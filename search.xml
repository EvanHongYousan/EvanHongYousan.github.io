<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Web安全防护实践指南</title>
      <link href="/2025/01/03/web-safe/"/>
      <url>/2025/01/03/web-safe/</url>
      
        <content type="html"><![CDATA[<img src="/2025/01/03/web-safe/banner.jpeg" alt="banner.jpeg" title><p>在当今互联网时代,Web安全已经成为开发者必须重视的核心议题。本文将从实践角度出发,深入介绍Web安全威胁与防护措施。</p><a id="more"></a><h2 id="常见的Web安全威胁"><a href="#常见的Web安全威胁" class="headerlink" title="常见的Web安全威胁"></a>常见的Web安全威胁</h2><h3 id="1-XSS-跨站脚本攻击"><a href="#1-XSS-跨站脚本攻击" class="headerlink" title="1. XSS (跨站脚本攻击)"></a>1. XSS (跨站脚本攻击)</h3><p>XSS攻击通过在网页中注入恶意脚本来获取用户信息或执行未经授权的操作。</p><h4 id="1-1-存储型XSS"><a href="#1-1-存储型XSS" class="headerlink" title="1.1 存储型XSS"></a>1.1 存储型XSS</h4><ul><li><p><strong>攻击原理</strong>: 攻击者将恶意脚本存储在目标服务器上(如评论、用户资料等),其他用户访问页面时触发执行</p></li><li><p><strong>危害</strong>: 可以窃取用户cookie、篡改页面内容、记录用户键盘输入等</p></li><li><p><strong>防护措施</strong>:</p><ol><li><p>对用户输入进行严格过滤和转义</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 基本HTML转义函数示例</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">escapeHtml</span>(<span class="params">unsafe</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> unsafe</span><br><span class="line">    .replace(<span class="regexp">/&amp;/g</span>, <span class="string">"&amp;amp;"</span>)</span><br><span class="line">    .replace(<span class="regexp">/&lt;/g</span>, <span class="string">"&amp;lt;"</span>)</span><br><span class="line">    .replace(<span class="regexp">/&gt;/g</span>, <span class="string">"&amp;gt;"</span>)</span><br><span class="line">    .replace(<span class="regexp">/"/g</span>, <span class="string">"&amp;quot;"</span>)</span><br><span class="line">    .replace(<span class="regexp">/'/g</span>, <span class="string">"&amp;#039;"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用成熟的XSS过滤库，如DOMPurify</p></li><li><p>设置响应头 <code>Content-Security-Policy</code></p></li><li><p>对输出进行编码，使用模板引擎的安全特性</p></li></ol></li></ul><h4 id="1-2-反射型XSS"><a href="#1-2-反射型XSS" class="headerlink" title="1.2 反射型XSS"></a>1.2 反射型XSS</h4><ul><li><strong>攻击原理</strong>: 攻击者构造特殊URL,诱导用户点击,服务器将URL中的恶意脚本返回给用户执行</li><li><strong>危害</strong>: 可以执行任意JavaScript代码,获取用户敏感信息</li><li><strong>防护措施</strong>:<ol><li>对URL参数进行严格校验</li><li>使用 <code>httpOnly</code> Cookie</li><li>实现输入验证白名单</li><li>设置 <code>X-XSS-Protection</code> 响应头</li></ol></li></ul><h4 id="1-3-DOM型XSS"><a href="#1-3-DOM型XSS" class="headerlink" title="1.3 DOM型XSS"></a>1.3 DOM型XSS</h4><ul><li><p><strong>攻击原理</strong>: 纯客户端的XSS,通过修改DOM树结构来实现攻击</p></li><li><p><strong>危害</strong>: 可以操作DOM、窃取用户信息</p></li><li><p><strong>防护措施</strong>:</p><ol><li><p>避免使用 <code>innerHTML</code>，优先使用 <code>textContent</code></p></li><li><p>使用安全的DOM API</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不安全的写法</span></span><br><span class="line">element.innerHTML = userInput;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 安全的写法</span></span><br><span class="line">element.textContent = userInput;</span><br></pre></td></tr></table></figure></li><li><p>对DOM操作相关的数据进行严格校验</p></li><li><p>使用 React/Vue 等框架的安全特性</p></li></ol></li></ul><h3 id="2-注入攻击"><a href="#2-注入攻击" class="headerlink" title="2. 注入攻击"></a>2. 注入攻击</h3><h4 id="2-1-SQL注入"><a href="#2-1-SQL注入" class="headerlink" title="2.1 SQL注入"></a>2.1 SQL注入</h4><ul><li><strong>攻击原理</strong>: 通过构造特殊的SQL语句,破坏原有SQL语句结构</li><li><strong>攻击示例</strong>:<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 原始SQL</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">users</span> <span class="keyword">WHERE</span> username = <span class="string">'$&#123;username&#125;'</span> <span class="keyword">AND</span> <span class="keyword">password</span> = <span class="string">'$&#123;password&#125;'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 注入攻击</span></span><br><span class="line">username: <span class="keyword">admin</span><span class="string">' --</span></span><br><span class="line"><span class="string">password: anything</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">-- 最终执行的SQL</span></span><br><span class="line"><span class="string">SELECT * FROM users WHERE username = '</span><span class="keyword">admin</span><span class="string">' -- '</span> <span class="keyword">AND</span> <span class="keyword">password</span> = <span class="string">'anything'</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p><strong>防护措施</strong>:</p><ol><li><p>使用参数化查询</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Node.js MySQL示例</span></span><br><span class="line"><span class="keyword">const</span> mysql = <span class="built_in">require</span>(<span class="string">'mysql2'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不安全的写法</span></span><br><span class="line"><span class="keyword">const</span> query = <span class="string">`SELECT * FROM users WHERE id = <span class="subst">$&#123;userId&#125;</span>`</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 安全的写法</span></span><br><span class="line"><span class="keyword">const</span> query = <span class="string">'SELECT * FROM users WHERE id = ?'</span>;</span><br><span class="line">connection.execute(query, [userId], (err, results) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 处理结果</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>ORM框架</p></li><li><p>最小权限原则</p></li><li><p>输入验证和转义</p></li></ol></li></ul><h3 id="3-CSRF-跨站请求伪造"><a href="#3-CSRF-跨站请求伪造" class="headerlink" title="3. CSRF (跨站请求伪造)"></a>3. CSRF (跨站请求伪造)</h3><h4 id="3-1-GET类型CSRF"><a href="#3-1-GET类型CSRF" class="headerlink" title="3.1 GET类型CSRF"></a>3.1 GET类型CSRF</h4><ul><li><strong>攻击原理</strong>: 诱导用户点击特制URL,利用用户登录态执行操作</li><li><strong>攻击示例</strong>:<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 攻击页面 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://bank.example/transfer?amount=1000&amp;to=attacker"</span> /&gt;</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p><strong>防护措施</strong>:</p><ol><li><p>使用CSRF Token</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Express.js示例</span></span><br><span class="line"><span class="keyword">const</span> csrf = <span class="built_in">require</span>(<span class="string">'csurf'</span>);</span><br><span class="line">app.use(csrf(&#123; <span class="attr">cookie</span>: <span class="literal">true</span> &#125;));</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/form'</span>, (req, res) =&gt; &#123;</span><br><span class="line">  res.render(<span class="string">'form'</span>, &#123; <span class="attr">csrfToken</span>: req.csrfToken() &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>验证请求来源</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 检查Referer头</span></span><br><span class="line">app.use(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> referer = req.headers.referer;</span><br><span class="line">  <span class="keyword">if</span> (referer &amp;&amp; <span class="keyword">new</span> URL(referer).origin === <span class="string">'https://yoursite.com'</span>) &#123;</span><br><span class="line">    next();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    res.status(<span class="number">403</span>).send(<span class="string">'Invalid referer'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>SameSite Cookie属性</p></li><li><p>使用POST替代GET请求</p></li></ol></li></ul><h2 id="安全检测与监控"><a href="#安全检测与监控" class="headerlink" title="安全检测与监控"></a>安全检测与监控</h2><h3 id="1-自动化安全扫描"><a href="#1-自动化安全扫描" class="headerlink" title="1. 自动化安全扫描"></a>1. 自动化安全扫描</h3><ul><li><p><strong>使用OWASP ZAP进行漏洞扫描</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用Docker运行ZAP扫描</span></span><br><span class="line">docker run -v $(<span class="built_in">pwd</span>):/zap/wrk/:rw -t owasp/zap2docker-stable zap-baseline.py \</span><br><span class="line">  -t https://your-target-website.com \</span><br><span class="line">  -r scan-report.html</span><br></pre></td></tr></table></figure></li><li><p><strong>代码安全审计工具</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用ESLint的安全规则</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"extends"</span>: [</span><br><span class="line">    <span class="string">"plugin:security/recommended"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"plugins"</span>: [</span><br><span class="line">    <span class="string">"security"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"rules"</span>: &#123;</span><br><span class="line">    <span class="string">"security/detect-eval-with-expression"</span>: <span class="string">"error"</span>,</span><br><span class="line">    <span class="string">"security/detect-non-literal-regexp"</span>: <span class="string">"error"</span>,</span><br><span class="line">    <span class="string">"security/detect-unsafe-regex"</span>: <span class="string">"error"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-日志监控"><a href="#2-日志监控" class="headerlink" title="2. 日志监控"></a>2. 日志监控</h3><ul><li><p><strong>记录异常登录行为</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Winston日志配置示例</span></span><br><span class="line"><span class="keyword">const</span> winston = <span class="built_in">require</span>(<span class="string">'winston'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> securityLogger = winston.createLogger(&#123;</span><br><span class="line">  format: winston.format.json(),</span><br><span class="line">  transports: [</span><br><span class="line">    <span class="keyword">new</span> winston.transports.File(&#123; </span><br><span class="line">      filename: <span class="string">'security.log'</span>,</span><br><span class="line">      level: <span class="string">'warn'</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 记录登录失败</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logFailedLogin</span>(<span class="params">username, ip</span>) </span>&#123;</span><br><span class="line">  securityLogger.warn(<span class="string">'Failed login attempt'</span>, &#123;</span><br><span class="line">    username,</span><br><span class="line">    ip,</span><br><span class="line">    timestamp: <span class="keyword">new</span> <span class="built_in">Date</span>().toISOString(),</span><br><span class="line">    event: <span class="string">'LOGIN_FAILED'</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>监控敏感操作</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Express中间件示例</span></span><br><span class="line"><span class="keyword">const</span> sensitiveOps = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">'/admin'</span>, <span class="string">'/api/users'</span>, <span class="string">'/api/delete'</span>]);</span><br><span class="line"></span><br><span class="line">app.use(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (sensitiveOps.has(req.path)) &#123;</span><br><span class="line">    securityLogger.info(<span class="string">'Sensitive operation'</span>, &#123;</span><br><span class="line">      path: req.path,</span><br><span class="line">      method: req.method,</span><br><span class="line">      user: req.user?.id,</span><br><span class="line">      ip: req.ip</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  next();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p><strong>告警系统集成</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 钉钉告警示例</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">sendSecurityAlert</span>(<span class="params">message</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> webhook = <span class="string">'https://oapi.dingtalk.com/robot/send?access_token=xxx'</span>;</span><br><span class="line">  <span class="keyword">await</span> axios.post(webhook, &#123;</span><br><span class="line">    msgtype: <span class="string">'text'</span>,</span><br><span class="line">    text: &#123;</span><br><span class="line">      content: <span class="string">`🚨安全告警：<span class="subst">$&#123;message&#125;</span>`</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置告警阈值</span></span><br><span class="line"><span class="keyword">const</span> LOGIN_FAIL_THRESHOLD = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> timeWindow = <span class="keyword">new</span> <span class="built_in">Map</span>(); <span class="comment">// IP -&gt; 失败次数</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkLoginAttempts</span>(<span class="params">ip</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> fails = timeWindow.get(ip) || <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> (fails &gt;= LOGIN_FAIL_THRESHOLD) &#123;</span><br><span class="line">    sendSecurityAlert(<span class="string">`IP <span class="subst">$&#123;ip&#125;</span> 在5分钟内登录失败超过<span class="subst">$&#123;LOGIN_FAIL_THRESHOLD&#125;</span>次`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-应急响应"><a href="#3-应急响应" class="headerlink" title="3. 应急响应"></a>3. 应急响应</h3><ol><li><p><strong>制定应急预案</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 安全事件等级定义</span></span><br><span class="line"><span class="keyword">const</span> SecurityLevel = &#123;</span><br><span class="line">  LOW: &#123;</span><br><span class="line">    name: <span class="string">'低危'</span>,</span><br><span class="line">    responseTime: <span class="string">'24小时'</span>,</span><br><span class="line">    notifyChannels: [<span class="string">'email'</span>]</span><br><span class="line">  &#125;,</span><br><span class="line">  MEDIUM: &#123;</span><br><span class="line">    name: <span class="string">'中危'</span>,</span><br><span class="line">    responseTime: <span class="string">'12小时'</span>,</span><br><span class="line">    notifyChannels: [<span class="string">'email'</span>, <span class="string">'phone'</span>]</span><br><span class="line">  &#125;,</span><br><span class="line">  HIGH: &#123;</span><br><span class="line">    name: <span class="string">'高危'</span>,</span><br><span class="line">    responseTime: <span class="string">'2小时'</span>,</span><br><span class="line">    notifyChannels: [<span class="string">'email'</span>, <span class="string">'phone'</span>, <span class="string">'sms'</span>]</span><br><span class="line">  &#125;,</span><br><span class="line">  CRITICAL: &#123;</span><br><span class="line">    name: <span class="string">'严重'</span>,</span><br><span class="line">    responseTime: <span class="string">'30分钟'</span>,</span><br><span class="line">    notifyChannels: [<span class="string">'email'</span>, <span class="string">'phone'</span>, <span class="string">'sms'</span>, <span class="string">'callCenter'</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p><strong>安全事件处理流程</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 事件处理状态机</span></span><br><span class="line"><span class="keyword">const</span> EventStatus = &#123;</span><br><span class="line">  DETECTED: <span class="string">'detected'</span>,</span><br><span class="line">  CONFIRMED: <span class="string">'confirmed'</span>,</span><br><span class="line">  ANALYZING: <span class="string">'analyzing'</span>,</span><br><span class="line">  FIXING: <span class="string">'fixing'</span>,</span><br><span class="line">  VERIFIED: <span class="string">'verified'</span>,</span><br><span class="line">  CLOSED: <span class="string">'closed'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SecurityIncident</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(level, description) &#123;</span><br><span class="line">    <span class="keyword">this</span>.id = uuid();</span><br><span class="line">    <span class="keyword">this</span>.level = level;</span><br><span class="line">    <span class="keyword">this</span>.description = description;</span><br><span class="line">    <span class="keyword">this</span>.status = EventStatus.DETECTED;</span><br><span class="line">    <span class="keyword">this</span>.timeline = [&#123;</span><br><span class="line">      status: EventStatus.DETECTED,</span><br><span class="line">      timestamp: <span class="keyword">new</span> <span class="built_in">Date</span>(),</span><br><span class="line">      operator: <span class="string">'system'</span></span><br><span class="line">    &#125;];</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">async</span> escalate() &#123;</span><br><span class="line">    <span class="comment">// 升级处理</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">async</span> notify() &#123;</span><br><span class="line">    <span class="comment">// 通知相关人员</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">async</span> archive() &#123;</span><br><span class="line">    <span class="comment">// 归档处理</span></span><br><span class="line">    <span class="keyword">this</span>.generateReport();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Web安全是一个需要持续投入的系统工程,需要在以下方面持续努力:</p><ol><li><strong>代码层面</strong><ul><li><strong>遵循安全编码规范</strong><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 密码加密最佳实践</span></span><br><span class="line"><span class="keyword">const</span> bcrypt = <span class="built_in">require</span>(<span class="string">'bcrypt'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">hashPassword</span>(<span class="params">password</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> salt = <span class="keyword">await</span> bcrypt.genSalt(<span class="number">10</span>);</span><br><span class="line">  <span class="keyword">return</span> bcrypt.hash(password, salt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 安全的随机数生成</span></span><br><span class="line"><span class="keyword">const</span> crypto = <span class="built_in">require</span>(<span class="string">'crypto'</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">generateSecureToken</span>(<span class="params">length = <span class="number">32</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> crypto.randomBytes(length).toString(<span class="string">'hex'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol><ul><li><strong>使用成熟的安全库</strong><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Helmet.js 安全头配置</span></span><br><span class="line"><span class="keyword">const</span> helmet = <span class="built_in">require</span>(<span class="string">'helmet'</span>);</span><br><span class="line"></span><br><span class="line">app.use(helmet(&#123;</span><br><span class="line">  contentSecurityPolicy: &#123;</span><br><span class="line">    directives: &#123;</span><br><span class="line">      defaultSrc: [<span class="string">"'self'"</span>],</span><br><span class="line">      scriptSrc: [<span class="string">"'self'"</span>, <span class="string">"'unsafe-inline'"</span>],</span><br><span class="line">      styleSrc: [<span class="string">"'self'"</span>, <span class="string">"'unsafe-inline'"</span>],</span><br><span class="line">      imgSrc: [<span class="string">"'self'"</span>, <span class="string">"data:"</span>, <span class="string">"https:"</span>],</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  referrerPolicy: &#123; <span class="attr">policy</span>: <span class="string">'same-origin'</span> &#125;</span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure></li></ul><ol start="2"><li><strong>架构层面</strong><ul><li><strong>最小权限原则</strong><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 基于角色的访问控制(RBAC)</span></span><br><span class="line"><span class="keyword">const</span> roles = &#123;</span><br><span class="line">  ADMIN: [<span class="string">'read'</span>, <span class="string">'write'</span>, <span class="string">'delete'</span>],</span><br><span class="line">  EDITOR: [<span class="string">'read'</span>, <span class="string">'write'</span>],</span><br><span class="line">  VIEWER: [<span class="string">'read'</span>]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkPermission</span>(<span class="params">user, action</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> userRole = user.role;</span><br><span class="line">  <span class="keyword">return</span> roles[userRole]?.includes(action) || <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 权限中间件</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">requirePermission</span>(<span class="params">action</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (checkPermission(req.user, action)) &#123;</span><br><span class="line">      next();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      res.status(<span class="number">403</span>).json(&#123; <span class="attr">error</span>: <span class="string">'权限不足'</span> &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol><ul><li><strong>纵深防御策略</strong><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 请求频率限制</span></span><br><span class="line"><span class="keyword">const</span> rateLimit = <span class="built_in">require</span>(<span class="string">'express-rate-limit'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> apiLimiter = rateLimit(&#123;</span><br><span class="line">  windowMs: <span class="number">15</span> * <span class="number">60</span> * <span class="number">1000</span>, <span class="comment">// 15分钟</span></span><br><span class="line">  max: <span class="number">100</span>, <span class="comment">// 限制100次请求</span></span><br><span class="line">  message: <span class="string">'请求过于频繁，请稍后再试'</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.use(<span class="string">'/api/'</span>, apiLimiter);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. IP黑名单</span></span><br><span class="line"><span class="keyword">const</span> blacklist = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line"></span><br><span class="line">app.use(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> clientIP = req.ip;</span><br><span class="line">  <span class="keyword">if</span> (blacklist.has(clientIP)) &#123;</span><br><span class="line">    <span class="keyword">return</span> res.status(<span class="number">403</span>).send(<span class="string">'Access Denied'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  next();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><ol start="3"><li><strong>运维层面</strong><ul><li><strong>自动化安全检查</strong><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># GitHub Actions安全扫描配置</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">Security</span> <span class="string">Scan</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span> <span class="string">[</span> <span class="string">main</span> <span class="string">]</span></span><br><span class="line">  <span class="attr">pull_request:</span></span><br><span class="line">    <span class="attr">branches:</span> <span class="string">[</span> <span class="string">main</span> <span class="string">]</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">security:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">      </span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Run</span> <span class="string">OWASP</span> <span class="string">ZAP</span> <span class="string">Scan</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">zaproxy/action-baseline@v0.4.0</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">target:</span> <span class="string">'https://your-staging-app.com'</span></span><br><span class="line">      </span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Run</span> <span class="string">npm</span> <span class="string">audit</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">npm</span> <span class="string">audit</span></span><br><span class="line">      </span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Run</span> <span class="string">Snyk</span> <span class="string">Security</span> <span class="string">Scan</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">snyk/actions/node@master</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="attr">SNYK_TOKEN:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.SNYK_TOKEN</span> <span class="string">&#125;&#125;</span></span><br></pre></td></tr></table></figure></li></ul></li></ol><ul><li><strong>监控告警配置</strong><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 监控系统集成</span></span><br><span class="line"><span class="keyword">const</span> monitor = &#123;</span><br><span class="line">  metrics: &#123;</span><br><span class="line">    loginFailures: <span class="keyword">new</span> <span class="built_in">Map</span>(), <span class="comment">// IP -&gt; 失败次数</span></span><br><span class="line">    apiErrors: <span class="keyword">new</span> <span class="built_in">Map</span>(),     <span class="comment">// 接口 -&gt; 错误次数</span></span><br><span class="line">    slowRequests: <span class="keyword">new</span> <span class="built_in">Map</span>()   <span class="comment">// 路径 -&gt; 慢请求次数</span></span><br><span class="line">  &#125;,</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">async</span> check() &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> [metric, thresholds] <span class="keyword">of</span> <span class="built_in">Object</span>.entries(<span class="keyword">this</span>.thresholds)) &#123;</span><br><span class="line">      <span class="keyword">const</span> value = <span class="keyword">await</span> <span class="keyword">this</span>.getValue(metric);</span><br><span class="line">      <span class="keyword">if</span> (value &gt; thresholds.critical) &#123;</span><br><span class="line">        <span class="keyword">this</span>.notify(<span class="string">'critical'</span>, <span class="string">`<span class="subst">$&#123;metric&#125;</span> 超过临界值: <span class="subst">$&#123;value&#125;</span>`</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (value &gt; thresholds.warning) &#123;</span><br><span class="line">        <span class="keyword">this</span>.notify(<span class="string">'warning'</span>, <span class="string">`<span class="subst">$&#123;metric&#125;</span> 超过警戒值: <span class="subst">$&#123;value&#125;</span>`</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><p>这些最佳实践示例都是基于实际项目经验总结的，可以直接应用到生产环境中。每个示例都包含了详细的注释和配置说明，方便开发者理解和使用。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><a href="https://owasp.org/www-project-top-ten/" target="_blank" rel="noopener">OWASP Top 10</a></li><li><a href="https://owasp.org/www-project-web-security-testing-guide/" target="_blank" rel="noopener">Web安全测试指南</a></li><li><a href="https://infosec.mozilla.org/guidelines/web_security" target="_blank" rel="noopener">Mozilla Web安全指南</a></li><li><a href="https://github.com/goldbergyoni/nodebestpractices#6-security-best-practices" target="_blank" rel="noopener">Node.js安全清单</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> tech </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安全 </tag>
            
            <tag> web安全 </tag>
            
            <tag> 最佳实践 </tag>
            
            <tag> XSS </tag>
            
            <tag> CSRF </tag>
            
            <tag> 注入攻击 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>地球转动动画效果预研</title>
      <link href="/2021/09/24/earth-rotation-animation-research/"/>
      <url>/2021/09/24/earth-rotation-animation-research/</url>
      
        <content type="html"><![CDATA[<p>接下来需要做一个visa的活动，产品、设计希望在活动页中实现一个地球自转的动画</p><img src="/2021/09/24/earth-rotation-animation-research/12-principles-of-animation.jpeg" alt="12-principles-of-animation.jpeg" title><a id="more"></a><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><ul><li>按目前业界常规做法，有两种实现思路</li><li>一种是设计测直接输出动画文件，前端开发拿到动画文件后，在页面直接播放动画</li><li>一种是设计输出动画实现所需素材，前端开发拿到素材后，对素材进行处理，并在页面中实现动画</li><li>接下来对两种方式进行进一步梳理</li></ul><h2 id="动画播放"><a href="#动画播放" class="headerlink" title="动画播放"></a>动画播放</h2><h3 id="SVGA"><a href="#SVGA" class="headerlink" title="SVGA"></a>SVGA</h3><img src="/2021/09/24/earth-rotation-animation-research/image2021-9-24_11-55-11.png" alt="image2021-9-24_11-55-11.png" title><ul><li>SVGA 是一种同时兼容 iOS / Android / Flutter / Web 多个平台的动画格式，此解决方案由国内的yy团队输出。</li><li>设计师在使用ae制作完动画后，使用svga提供的工具，可以把动画转化为svga格式 <a href="https://svga.io/designer.html" target="_blank" rel="noopener">https://svga.io/designer.html</a></li><li>前端使用svga的播放器，在页面中对svga文件进行播放</li><li>文档：<a href="https://svga.io/" target="_blank" rel="noopener">https://svga.io/</a></li></ul><img src="/2021/09/24/earth-rotation-animation-research/intro-flow.jpeg" alt="intro-flow.jpeg" title><h3 id="Lottie"><a href="#Lottie" class="headerlink" title="Lottie"></a>Lottie</h3><img src="/2021/09/24/earth-rotation-animation-research/image2021-9-24_11-53-20.png" alt="image2021-9-24_11-53-20.png" title><ul><li>Lottie支持多平台，此方案由airbnb团队输出</li><li>设计师在使用ae制作完动画后，使用bodymovin插件，把动画转为为json数据导出 <a href="https://github.com/airbnb/lottie-web" target="_blank" rel="noopener">https://github.com/airbnb/lottie-web</a></li><li>前端开发使用Lottie提供的库载入json，即可在页面播放动画</li><li>文档：<a href="https://airbnb.design/lottie/" target="_blank" rel="noopener">https://airbnb.design/lottie/</a></li></ul><h3 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h3><ul><li>svga在页面生成动画时，生成的是canvas标签，在canvas中进行动画生成与计算</li><li>Lottie在页面生成动画时，生成svg标签，通过变化svg标签的css3相关属性来进行动画生成与展示</li><li>就实际生成效果，Lottie生成的动画帧数更高</li><li>针对动画文件体积大小，svga导出的动画文件比Lottie导出的json文件提交小很多</li></ul><h2 id="动画实现"><a href="#动画实现" class="headerlink" title="动画实现"></a>动画实现</h2><h3 id="three3d-js"><a href="#three3d-js" class="headerlink" title="three3d.js"></a>three3d.js</h3><p>demo：<a href="http://9.135.218.65:8081/" target="_blank" rel="noopener">http://9.135.218.65:8081/</a></p><img src="/2021/09/24/earth-rotation-animation-research/Kapture_2021-09-24_at_11.57.20.gif" alt="Kapture_2021-09-24_at_11.57.20.gif" title><ul><li>Three3D.js是一款开源的主流3D绘图JS引擎（名字Three就是3D的含义），原作者为Mr.Doob，项目地址为：<a href="https://github.com/mrdoob/three.js/。" target="_blank" rel="noopener">https://github.com/mrdoob/three.js/。</a></li><li>针对本次的地球自转动画，设计需要输出地球贴图素材，由前端开发根据素材使用three3d的api把动画编写出来</li></ul><p>素材示例：</p><img src="/2021/09/24/earth-rotation-animation-research/image2021-9-24_12-8-58.png" alt="image2021-9-24_12-8-58.png" title><h4 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h4><ul><li>使用动画引擎库，则可以更方便地在动画中加入各种交互</li><li>动画效果改由程序计算得出，动画性能方面调校起来更为方便直观</li><li>开发资源的投入比“动画播放”的方案要高</li></ul>]]></content>
      
      
      <categories>
          
          <category> tech </category>
          
      </categories>
      
      
        <tags>
            
            <tag> animation </tag>
            
            <tag> 动画 </tag>
            
            <tag> thress3d.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue2项目单元测试对接实践记录</title>
      <link href="/2021/05/30/a-practice-of-vue-unit-test/"/>
      <url>/2021/05/30/a-practice-of-vue-unit-test/</url>
      
        <content type="html"><![CDATA[<p>虽然现在vue已经来到最新的vue3，但仍然有许多vue2项目在不断迭代维护中。因为时代背景的原因（其实也就几年前），当时起这些vue2项目时，单元测试并不被重视。随着业务压力的增大，对版本质量的要求变高，单元测试终于被提上日程，且单元测试开始成为普遍共识。</p><p>这次就给一个已经运行几年的vue2项目加上单元测试。当中遇到了一些问题，但其实也是写单元测试会遇到的常见问题，在此做个实践记录</p><img src="/2021/05/30/a-practice-of-vue-unit-test/maxresdefault.jpeg" alt="maxresdefault.jpeg" title><a id="more"></a><h2 id="阅读前提"><a href="#阅读前提" class="headerlink" title="阅读前提"></a>阅读前提</h2><ul><li>熟悉 <a href="https://cn.vuejs.org/v2/guide/" target="_blank" rel="noopener">vue2</a></li><li>熟悉 <a href="https://jestjs.io/" target="_blank" rel="noopener">jest</a></li><li>熟悉 <a href="https://vue-test-utils.vuejs.org/zh/guides/" target="_blank" rel="noopener">Vue Test Utils</a></li></ul><h2 id="项目特点说明"><a href="#项目特点说明" class="headerlink" title="项目特点说明"></a>项目特点说明</h2><ul><li>项目已经运行几年</li><li>本次针对项目中前端部分的其中一个模块做单元测试接入，此模块为重要业务模块</li><li>模块的主要技术栈为vue2，绝大部分代码基于vue2技术栈</li><li>模块中夹杂了一些jquery代码，同时也有一些直接操作dom、bom的代码</li></ul><h2 id="分析与设计"><a href="#分析与设计" class="headerlink" title="分析与设计"></a>分析与设计</h2><ul><li>对于测试框架，因为本人对jest更为熟悉的关系，本次直接使用jest进行单元测试框架接入</li><li>对于vue2的单元测试工具库选择，其<a href="https://cn.vuejs.org/v2/cookbook/unit-testing-vue-components.html" target="_blank" rel="noopener">官方文档</a>中推荐的是 <a href="https://vue-test-utils.vuejs.org/zh/guides/" target="_blank" rel="noopener">Vue Test Utils</a>，则本次直接使用 Vue Test Utils</li><li>项目中和业务逻辑相关的代码，都是vue2代码，单元测试主要对这部分逻辑进行测试覆盖</li><li>项目中基于jquery的代码，主要和动画效果相关（重构方面的产出），这部分可不做测试覆盖</li><li>代码也基于typescript，jest中要做相关转码配置</li></ul><h2 id="起步"><a href="#起步" class="headerlink" title="起步"></a>起步</h2><h3 id="依赖安装"><a href="#依赖安装" class="headerlink" title="依赖安装"></a>依赖安装</h3><p>首先，要先安装好本次接入单元测试的相关依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># unit testing</span></span><br><span class="line">vue add @vue/unit-jest</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装 Jest 和 Vue Test Utils</span></span><br><span class="line">npm install --save-dev jest @vue/<span class="built_in">test</span>-utils</span><br><span class="line"><span class="comment"># 安装 babel-jest 、 vue-jest 和 7.0.0-bridge.0 版本的 babel-core</span></span><br><span class="line">npm install --save-dev babel-jest vue-jest babel-core@7.0.0-bridge.0</span><br><span class="line"><span class="comment"># 安装 jest-serializer-vue</span></span><br><span class="line">npm install --save-dev jest-serializer-vue</span><br></pre></td></tr></table></figure><p>另外，项目为typescript项目，还需要安装typescript转码依赖</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev jest-preset-typescript ts-jest @vue/cli-plugin-unit-jest @babel/preset-typescript</span><br></pre></td></tr></table></figure><p>至此，依赖安装完成</p><blockquote><p>如果需要快速体验的话，也可以直接使用官方文档里的脚手架<br>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/vuejs/vue-test-utils-getting-started</span><br><span class="line"><span class="built_in">cd</span> vue-test-utils-getting-started</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>jest的配置可以直接在package.json中写，或者新建文件 <code>jest.config.js</code></p><ul><li>jest.config.js:</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  preset: <span class="string">'@vue/cli-plugin-unit-jest/presets/no-babel'</span>,</span><br><span class="line">  globals: &#123;</span><br><span class="line">    <span class="string">'ts-jest'</span>: &#123;</span><br><span class="line">      babelConfig: <span class="literal">true</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 测试覆盖配置</span></span><br><span class="line">  <span class="string">"coverageThreshold"</span>: &#123;</span><br><span class="line">    <span class="string">"global"</span>: &#123;</span><br><span class="line">      <span class="string">"branches"</span>: <span class="number">10</span>, <span class="comment">// 逻辑分支（if else之类）覆盖不可低于10%，否则抛出错误</span></span><br><span class="line">      <span class="string">"functions"</span>: <span class="number">10</span>, <span class="comment">// 函数覆盖不可低于10%，否则抛出错误</span></span><br><span class="line">      <span class="string">"lines"</span>: <span class="number">10</span>,  <span class="comment">// 代码行数覆盖不可低于10%，否则抛出错误</span></span><br><span class="line">      <span class="string">"statements"</span>: <span class="number">10</span>  <span class="comment">// 代码块行数覆盖不可低于10%，否则抛出错误</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  moduleFileExtensions: [</span><br><span class="line">    <span class="string">'ts'</span>,</span><br><span class="line">    <span class="string">'js'</span>,</span><br><span class="line">    <span class="string">'json'</span>,</span><br><span class="line">    <span class="string">'vue'</span>,</span><br><span class="line">  ],</span><br><span class="line">  <span class="comment">// 转码配置</span></span><br><span class="line">  transform: &#123;</span><br><span class="line">    <span class="comment">// process TypeScript files</span></span><br><span class="line">    <span class="string">"^.+\\.ts$"</span>: <span class="string">"ts-jest"</span>,</span><br><span class="line">    <span class="comment">// process *.vue files with vue-jest</span></span><br><span class="line">    <span class="string">".*\\.(vue)$"</span>: <span class="string">"vue-jest"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  testURL: <span class="string">'http://localhost/'</span>,</span><br><span class="line">  <span class="comment">// 测试代码文件匹配</span></span><br><span class="line">  testMatch: [<span class="string">'**/*.spec.[jt]s?(x)'</span>],</span><br><span class="line">  moduleDirectories: [</span><br><span class="line">    <span class="string">"node_modules"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="comment">// 初始化文件路径</span></span><br><span class="line">  setupFiles: [<span class="string">'./jest.setup.js'</span>],</span><br><span class="line">  <span class="comment">// 会被计算测试覆盖率的文件</span></span><br><span class="line">  collectCoverageFrom: [<span class="string">'static/js/app/creditcard/**'</span>, <span class="string">'!./**/*.snap'</span>],</span><br><span class="line">  <span class="comment">// 测试报告产出形式</span></span><br><span class="line">  coverageReporters: [<span class="string">"json"</span>, <span class="string">"lcov"</span>, <span class="string">"text"</span>, <span class="string">"clover"</span>, <span class="string">"text-summary"</span>],</span><br><span class="line">  <span class="comment">// 测试快照序列化工具库</span></span><br><span class="line">  snapshotSerializers: [<span class="string">"jest-serializer-vue"</span>]</span><br><span class="line">  <span class="comment">// testRegex: '(/__tests__/.*|(\\.|/)(test|spec))\\.(jsx?|tsx?)$',</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="具体测试代码"><a href="#具体测试代码" class="headerlink" title="具体测试代码"></a>具体测试代码</h2><p>完成依赖安装和基本配置后，接下来就是具体单元测试代码的接入</p><h3 id="纯函数测试"><a href="#纯函数测试" class="headerlink" title="纯函数测试"></a>纯函数测试</h3><ul><li>对于纯函数，只需要关注输入与输出即可</li><li>通常项目中 utils 文件夹中的都是纯函数</li></ul><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><ul><li>utils/index.tsx</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a: number, b: number</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> &#123; sum &#125;;</span><br></pre></td></tr></table></figure><ul><li>utils/index.test.tsx</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; sum &#125; <span class="keyword">from</span> <span class="string">"./index"</span>;</span><br><span class="line"></span><br><span class="line">it(<span class="string">"test sum"</span>, () =&gt; &#123;</span><br><span class="line">  expect(sum(<span class="number">1</span>, <span class="number">2</span>)).toEqual(<span class="number">3</span>);</span><br><span class="line">  expect(sum(<span class="number">2</span>, <span class="number">3</span>)).toEqual(<span class="number">5</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="页面展示内容测试"><a href="#页面展示内容测试" class="headerlink" title="页面展示内容测试"></a>页面展示内容测试</h3><ul><li>在 vue2 语境下，页面使用组件进行内容展示</li><li>则开发人员需要以组件为单位进行测试</li></ul><h4 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h4><ul><li>src/components/info.vue</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        info</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    props: [],</span><br><span class="line">    components: &#123;</span><br><span class="line">    &#125;,</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>src/components/info.spec.tsx</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; shallowMount &#125; <span class="keyword">from</span> <span class="string">'@vue/test-utils'</span></span><br><span class="line"><span class="keyword">import</span> info <span class="keyword">from</span> <span class="string">'./info.vue'</span></span><br><span class="line"></span><br><span class="line">describe(<span class="string">'info.vue'</span>, () =&gt; &#123;</span><br><span class="line">    it(<span class="string">'renders 1'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> wrapper = shallowMount(info, &#123;</span><br><span class="line">      propsData: &#123;&#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    expect(wrapper.text()).toMatch(<span class="string">'info'</span>)</span><br><span class="line">    expect(wrapper).toMatchSnapshot()</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="组件方法测试"><a href="#组件方法测试" class="headerlink" title="组件方法测试"></a>组件方法测试</h3><h4 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h4><ul><li>src/components/info.vue</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        info</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    props: [],</span><br><span class="line">    components: &#123;</span><br><span class="line">    &#125;,</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        sum(num1, num2) &#123;</span><br><span class="line">            return num1 + num2</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>src/components/info.spec.tsx</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; shallowMount &#125; <span class="keyword">from</span> <span class="string">'@vue/test-utils'</span></span><br><span class="line"><span class="keyword">import</span> info <span class="keyword">from</span> <span class="string">'./info.vue'</span></span><br><span class="line"></span><br><span class="line">describe(<span class="string">'info.vue'</span>, () =&gt; &#123;</span><br><span class="line">    it(<span class="string">'methods -- sum'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> wrapper = shallowMount(info, &#123;</span><br><span class="line">      propsData: &#123;&#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    expect((wrapper.vm <span class="keyword">as</span> any).sum(<span class="number">1</span>, <span class="number">2</span>)).toBe(<span class="number">3</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="组件状态测试"><a href="#组件状态测试" class="headerlink" title="组件状态测试"></a>组件状态测试</h3><h4 id="实例-3"><a href="#实例-3" class="headerlink" title="实例"></a>实例</h4><ul><li>src/components/info.vue</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        info</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    props: [],</span><br><span class="line">    components: &#123;</span><br><span class="line">    &#125;,</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            ttt: 1</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        sum(num1, num2) &#123;</span><br><span class="line">            return num1 + num2</span><br><span class="line">        &#125;,</span><br><span class="line">        setTTT(num) &#123;</span><br><span class="line">            this.ttt = num</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>src/components/info.spec.tsx</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; shallowMount &#125; <span class="keyword">from</span> <span class="string">'@vue/test-utils'</span></span><br><span class="line"><span class="keyword">import</span> info <span class="keyword">from</span> <span class="string">'./info.vue'</span></span><br><span class="line"></span><br><span class="line">describe(<span class="string">'info.vue'</span>, () =&gt; &#123;</span><br><span class="line">    it(<span class="string">'methods -- sum'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> wrapper = shallowMount(info, &#123;</span><br><span class="line">      propsData: &#123;&#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    expect((wrapper.vm <span class="keyword">as</span> any).ttt).toBe(<span class="number">1</span>)</span><br><span class="line">    expect((wrapper.vm <span class="keyword">as</span> any).setTTT(<span class="number">555</span>)).toBeUndefined()</span><br><span class="line">    expect((wrapper.vm <span class="keyword">as</span> any).ttt).toBe(<span class="number">555</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="组件属性测试"><a href="#组件属性测试" class="headerlink" title="组件属性测试"></a>组件属性测试</h3><p>从这里开始引入mock的概念</p><h4 id="实例-4"><a href="#实例-4" class="headerlink" title="实例"></a>实例</h4><ul><li>src/components/info.vue</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        info</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    props: [&apos;callBack&apos;],</span><br><span class="line">    components: &#123;</span><br><span class="line">    &#125;,</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            ttt: 1</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        sum(num1, num2) &#123;</span><br><span class="line">            return num1 + num2</span><br><span class="line">        &#125;,</span><br><span class="line">        setTTT(num) &#123;</span><br><span class="line">            this.ttt = num</span><br><span class="line">        &#125;,</span><br><span class="line">        callCB(event) &#123;</span><br><span class="line">            this.callBack(event)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>src/components/info.spec.tsx</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; shallowMount &#125; <span class="keyword">from</span> <span class="string">'@vue/test-utils'</span></span><br><span class="line"><span class="keyword">import</span> info <span class="keyword">from</span> <span class="string">'./info.vue'</span></span><br><span class="line"></span><br><span class="line">describe(<span class="string">'info.vue'</span>, () =&gt; &#123;</span><br><span class="line">    it(<span class="string">'methods -- callCB'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> mockCB = jest.fn()</span><br><span class="line">    <span class="keyword">const</span> wrapper = shallowMount(info, &#123;</span><br><span class="line">      propsData: &#123;</span><br><span class="line">          callBack: mockCB</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    expect((wrapper.vm <span class="keyword">as</span> any).callCB(<span class="number">111</span>)).toBeUndefined()</span><br><span class="line">    expect(mockCB).toBeCalled()</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="涉及dom属性或bom属性的测试"><a href="#涉及dom属性或bom属性的测试" class="headerlink" title="涉及dom属性或bom属性的测试"></a>涉及dom属性或bom属性的测试</h3><p>运行测试时，组件运行在jest-dom环境中（或开发人员配置的其它dom环境甚至node环境），而实际的业务代码有可能会在全局作用域或上层作用域中挂载一些属性在dom节点/window节点下，则组件中可以直接运行 <code>window.xxx.xxx</code> 这样的代码</p><p>但这样的代码，在进行测试时，会报错 <code>xxx is not defined</code></p><p>此时，就要对组件中依赖到的对象进行mock</p><h4 id="实例-5"><a href="#实例-5" class="headerlink" title="实例"></a>实例</h4><ul><li>src/components/info.vue</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        info</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    props: [&apos;callBack&apos;],</span><br><span class="line">    components: &#123;</span><br><span class="line">    &#125;,</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        getTheXXX() &#123;</span><br><span class="line">            return window.abc.xxx</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>src/components/info.spec.tsx</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; shallowMount &#125; <span class="keyword">from</span> <span class="string">'@vue/test-utils'</span></span><br><span class="line"><span class="keyword">import</span> info <span class="keyword">from</span> <span class="string">'./info.vue'</span></span><br><span class="line"></span><br><span class="line">beforeAll(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">Object</span>.defineProperty(<span class="built_in">window</span>, <span class="string">"abc"</span>, &#123;</span><br><span class="line">    writable: <span class="literal">true</span>,</span><br><span class="line">    value: &#123;</span><br><span class="line">      xxx: <span class="string">'xxx'</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">describe(<span class="string">'info.vue'</span>, () =&gt; &#123;</span><br><span class="line">    it(<span class="string">'methods -- getTheXXX'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> wrapper = shallowMount(info, &#123;</span><br><span class="line">      propsData: &#123;&#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    expect((wrapper.vm <span class="keyword">as</span> any).getTheXXX()).toBe(<span class="string">'xxx'</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="涉及-service-api-的测试"><a href="#涉及-service-api-的测试" class="headerlink" title="涉及 service api 的测试"></a>涉及 service api 的测试</h3><p>页面交互经常会涉及service api调用。有部分业界人士会直接启动一个mock server，测试时组件就直接向mock server请求数据，然后验证组件的状态变化是否符合期待</p><p>但也有部分业界人士比较习惯直接对http client进行mock。jest在这方面也提供了特性</p><h4 id="实例-6"><a href="#实例-6" class="headerlink" title="实例"></a>实例</h4><ul><li>src/components/info.vue</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        info</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import api from &apos;./api.ts&apos;</span><br><span class="line">export default &#123;</span><br><span class="line">    props: [],</span><br><span class="line">    components: &#123;</span><br><span class="line">    &#125;,</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        async getUserInfo() &#123;</span><br><span class="line">            return await api.getUserInfo()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>src/components/info.spec.tsx</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; shallowMount &#125; <span class="keyword">from</span> <span class="string">'@vue/test-utils'</span></span><br><span class="line"><span class="keyword">import</span> info <span class="keyword">from</span> <span class="string">'./info.vue'</span></span><br><span class="line"></span><br><span class="line">jest.mock(<span class="string">'./api.ts'</span>, () =&gt; (&#123;</span><br><span class="line">  getUserInfo: jest.fn().mockImplementation(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">Promise</span>.resolve(<span class="string">'userInfo)),</span></span><br><span class="line"><span class="string">&#125;))</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">describe('</span>info.vue<span class="string">', () =&gt; &#123;</span></span><br><span class="line"><span class="string">    it('</span>methods -- getUserInfo<span class="string">', () =&gt; &#123;</span></span><br><span class="line"><span class="string">    const wrapper = shallowMount(info, &#123;</span></span><br><span class="line"><span class="string">      propsData: &#123;&#125;</span></span><br><span class="line"><span class="string">    &#125;)</span></span><br><span class="line"><span class="string">    expect((wrapper.vm as any).getUserInfo()).toBe('</span>userInfo<span class="string">')</span></span><br><span class="line"><span class="string">  &#125;)</span></span><br><span class="line"><span class="string">&#125;)</span></span><br></pre></td></tr></table></figure><h2 id="运行测试"><a href="#运行测试" class="headerlink" title="运行测试"></a>运行测试</h2><h3 id="全量测试"><a href="#全量测试" class="headerlink" title="全量测试"></a>全量测试</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx jest</span><br></pre></td></tr></table></figure><p>可以看到全量测试运行结果</p><img src="/2021/05/30/a-practice-of-vue-unit-test/npxJestSilent.gif" alt="npxJestSilent.gif" title><h3 id="全量测试并输出测试覆盖报告"><a href="#全量测试并输出测试覆盖报告" class="headerlink" title="全量测试并输出测试覆盖报告"></a>全量测试并输出测试覆盖报告</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx jest --coverage</span><br></pre></td></tr></table></figure><img src="/2021/05/30/a-practice-of-vue-unit-test/npxJestSilentCoverage.gif" alt="npxJestSilentCoverage.gif" title><p>指令跑完后，在项目根目录下会生成 <code>coverage</code> 文件夹，里面的 <code>lcov-report</code> 文件夹包含html、js、css文件，可构建成一个静态站点，看到被测试代码的详细覆盖情况</p><img src="/2021/05/30/a-practice-of-vue-unit-test/coverageOfHtml.gif" alt="coverageOfHtml.gif" title><h3 id="watch模式下运行测试"><a href="#watch模式下运行测试" class="headerlink" title="watch模式下运行测试"></a>watch模式下运行测试</h3><p>针对变更文件进行测试，且每次文件变更并保存后触发测试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx jest --watch</span><br></pre></td></tr></table></figure><h2 id="成本说明"><a href="#成本说明" class="headerlink" title="成本说明"></a>成本说明</h2><p>当前信用卡业务前端部分被统计的代码行数为2771行，单元测试覆盖行数为1259行，单元测试行覆盖率为45.43%<br>以下是详细的测试覆盖推进细节：</p><ul><li>行覆盖率 0% → 37%，时间为 2021.05.06 ~ 2021.05.14，除去其他工作占用时间，投入至单元测试的大概是5个工作日。<ul><li>其中两个工作日为单元测试框架对接和组件最简单的测试对接，完成后单元测试覆盖大概有20%。20% ~ 37%的覆盖则是代码中的逻辑覆盖，耗时3个工作日</li></ul></li><li>行覆盖率 37% → 45%，时间为 2021.05.17 ~ 2021.05.21，除去其他工作占用时间，投入至单元测试的大概是1.5个工作日</li></ul><p>综上:</p><ul><li>0 ~ 20%时，效率为 10%（277.1行）/工作日</li><li>20% ~ 37% 时，效率为 5.6%（155.2行）/工作日</li><li>37% ~ 45% 时，效率为5.3%（146.9行）/工作日</li></ul><blockquote><p>以上特指项目中的js、ts源码，不包含css、html等其他代码<br>jest中的Istanbul进行代码行数统计时，使用一套内部规则进行计算，并不受源码的回车换行符影响。故编辑器中显示代码文件的行数，和jest产出的测试覆盖报告的的代码行数并不是一个概念</p></blockquote><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://cn.vuejs.org/v2/guide/" target="_blank" rel="noopener">vue2</a></li><li><a href="https://jestjs.io/" target="_blank" rel="noopener">jest</a></li><li><a href="https://vue-test-utils.vuejs.org/zh/guides/" target="_blank" rel="noopener">Vue Test Utils</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> tech </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jest </tag>
            
            <tag> unit test </tag>
            
            <tag> vue </tag>
            
            <tag> vue test utils </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nest 官方文档要点</title>
      <link href="/2021/04/04/nestjs-start-doc/"/>
      <url>/2021/04/04/nestjs-start-doc/</url>
      
        <content type="html"><![CDATA[<p>Nest 是一个用于构建高效，可扩展的 Node.js 服务器端应用程序的框架。它使用渐进式 JavaScript，内置并完全支持 TypeScript（但仍然允许开发人员使用纯 JavaScript 编写代码）并结合了 OOP（面向对象编程），FP（函数式编程）和 FRP（函数式响应编程）的元素。</p><a id="more"></a><img src="/2021/04/04/nestjs-start-doc/Nest.png" alt="Nest.png" title>]]></content>
      
      
      <categories>
          
          <category> tech </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nest </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【翻译】 Growth Hacking Made Simple - A Step-by-Step Guide -- Part 1</title>
      <link href="/2021/03/17/growth-hacking-made-simple-a-step-by-step-guide-part-1/"/>
      <url>/2021/03/17/growth-hacking-made-simple-a-step-by-step-guide-part-1/</url>
      
        <content type="html"><![CDATA[<p>黑客增长法已经是创业公司的新热门词语。忘掉”中枢(pivoting)”和 “迭代”。这些都是增长黑客。</p><p>这就是问题所在。</p><p>听过千百遍的人几乎是烦不胜烦，不知道是什么的人也是一头雾水。</p><p>不管你喜不喜欢，黑客增长法正在被不断使用。</p><p>而这也是我们每年都能看到几家新的创业公司的原因，其增长率绝对是荒谬的。</p><p><a href="https://techcrunch.com/2017/06/27/facebook-2-billion-users/" target="_blank" rel="noopener">Facebook 就是一个典型的例子。</a></p><img src="/2021/03/17/growth-hacking-made-simple-a-step-by-step-guide-part-1/facebook-historical-user-count-graph.webp" alt="facebook-historical-user-count-graph.webp" title><p>或者，<a href="https://www.hotelnewsnow.com/Articles/220811/5-things-hoteliers-should-understand-about-Airbnb" target="_blank" rel="noopener">Airbnb 也是另一个例子</a></p><img src="/2021/03/17/growth-hacking-made-simple-a-step-by-step-guide-part-1/20170825_operations_AccomAlternatives1.webp" alt="20170825_operations_AccomAlternatives1.webp" title><p>黑客增长术才出现了几年，但它已经火了。每个创业公司都在寻找增长黑客。</p><p>原因很显然：每个人都想以可怕的速度进行增长，获得数百万用户和美元的收入。</p><p>不过，黑客增长术到底意味着什么？</p><p>是时候一劳永逸地回答这个问题了。我甚至会在这份增长黑客指南中告诉你如何做。</p><a id="more"></a><p>我将涵盖很多信息，但你可以跳到下面的任何部分。</p><ul><li>定义</li><li>概述</li><li>步骤 1：确保你创造的产品是人们真正想要的。</li><li>步骤 2：不要针对所有人</li><li>步骤 3：获取</li><li>步骤 4：激活</li><li>步骤 5：保留</li><li>步骤 6：收入</li><li>步骤 7：转诊</li><li>步骤 8：不断改进你的产品</li></ul><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>你有可能在线下进行增长黑客行为。例如，你可能会把 <a href="https://www.quicksprout.com/the-definitive-guide-to-growth-hacking-chapter-1/" target="_blank" rel="noopener">20 世纪 50 年代麦当劳在每个州际公路出口出现算作增长黑客行为</a>。</p><p>他们意识到州际公路将是大势所趋，所以他们出现在他们知道客户会大量出现的地方。</p><p>然而，这个相当新的概念大多适用于初创公司的世界。他们没有庞大的营销预算，所以不能依靠<a href="https://neilpatel.com/what-is-digital-marketing/" target="_blank" rel="noopener">超级碗广告</a>或<a href="https://neilpatel.com/what-is-content-marketing/" target="_blank" rel="noopener">时代广场广告牌</a>。</p><p>这就是为什么他们必须找到更便宜的方式来推销自己。</p><p>他们往往拥有的是一种非常可扩展的产品。</p><p>比如考虑一下<a href="https://www.dropbox.com/" target="_blank" rel="noopener">Dropbox</a>。他们的云存储服务提供的基本上只是服务器上的磁盘空间，可以通过互联网访问。</p><p>他们可以随时购买或租用更多的服务器，为新用户提供更多的空间。</p><p>或者考虑 Uber。这种出租车替代服务依靠普通人用自己的车在 A 地接别人，并把他们安全送到 B 地–而支付则通过应用进行。</p><p>2015 年美国有超过 2.6 亿辆注册汽车，这也是非常容易扩展的市场。他们提供应用，无限量的用户可以通过网络下载并使用。其余的由用户提供。</p><p>像肥皂这种传统产品，规模化程度不高。每次用完肥皂，你都要买新的肥皂。</p><p>但是，每当有另一个用户注册到 Facebook 时，你的体验就会变得更好。</p><p>另外，产品的运行方式让它可以推销自己。如果你周五晚上用 Uber 去朋友家，他们问你怎么去的，你就说：”我坐 Uber 去的。”</p><p>自然而然，这个词就会传播开来。如果你喜欢这个服务，并且有朋友可以从使用这个服务中受益（除了你从你的朋友在平台上受益之外），你很可能会给朋友分享他。</p><p>这就是增长黑客如何大规模地利用口碑来实现我们所看到的指数级增长率。</p><p>好了，是时候看看一些用正确方式进行增长黑客术的创业公司的例子了。</p><p>但今天，我不会只向你展示伟大的例子。我还会给你一个简单的八步流程，你可以按照这个流程来尝试在自己的业务中应用增长黑客术。</p><h2 id="步骤-1：确保你创造出人们真正想要的产品"><a href="#步骤-1：确保你创造出人们真正想要的产品" class="headerlink" title="步骤 1：确保你创造出人们真正想要的产品"></a>步骤 1：确保你创造出人们真正想要的产品</h2><p>你会认为这对任何公司来说都是轻而易举的，对吗？</p><p>好吧，在以前，你有时可以摆脱一个平庸的产品，如果你只是营销它足够。</p><p>例如，可口可乐多年来推出了很多其他软饮料，如雪碧和芬达。 他们中的大多数人都没有可乐的味道好。</p><p>(还有，你们谁还记得 <a href="http://www.businessinsider.com/soda-brands-that-failed-2012-6?op=1&IR=T" target="_blank" rel="noopener">New Coke</a> 吗？)</p><img src="/2021/03/17/growth-hacking-made-simple-a-step-by-step-guide-part-1/coke.webp" alt="coke.webp" title><p>但是，通过广泛（和昂贵）的广告，他们使他们流行，现在他们在杂货店的饮料货架上与可乐本身一起到处都是。</p><p>今天要做到这一点要难得多，因为关于一个新产品的消息传播非常迅速。</p><p>如果你的产品不好，全世界知道的速度会比你想象的要快。</p><p>例如，2009 年，当美国联合航空公司的工人通过互相扔行李的方式传递行李时，他们最终打破了一位顾客的吉他。</p><p>他们承认是自己做的，但他们拒绝赔偿这个人的损失。</p><p>结果是什么呢？不是一首，而是三首关于蹩脚的美联航服务的歌曲，包括视频都出来了。</p><p>第一首至今已经聚集了 1500 万的浏览量。</p><p>这是相当糟糕的公关联合。如果你的产品很烂，它可以在比你建立它的时间更短的时间内消失。</p><p>解决这个问题的方法是什么？很简单，获取反馈。</p><p>你必须以最快的速度把你的产品推出去，开始收集反馈，并定期不断提高产品与市场的契合度。</p><p>我从中学到了这个教训。当我们开始 Kissmetrics 的时候，我们用了所有的资金来建立产品。</p><p>我们花了一年的时间来打造它。当我们发布它时，我们了解到，我们的客户对他们的社交网络已经提供的指标感到满意。</p><p>这可不是什么好事。</p><h3 id="你必须采取两个步骤，以确保你的产品击中目标"><a href="#你必须采取两个步骤，以确保你的产品击中目标" class="headerlink" title="你必须采取两个步骤，以确保你的产品击中目标"></a>你必须采取两个步骤，以确保你的产品击中目标</h3><p>下面就来看看正确的方法是什么。</p><ol><li>从提问和回答问题开始，而不是开发一个有很棒的市场契合度产品。</li></ol><p>我们在 <a href="https://www.crazyegg.com/" target="_blank" rel="noopener">Crazy Egg</a> 上就是这么做的。人们带着关于客户行为的问题来找我们。</p><p>他们说：”我们在广告上花了这么多钱，但实际上我们并不知道客户在做什么，他们在哪里点击，或者他们的行为是什么。”</p><p>只有在那时，我们才开始深入研究这个话题，并考虑创造一个能解决这个问题的产品。我们不仅仅是开发一个 “感觉是个好主意 “的产品。</p><ol start="2"><li>一旦你有了想法，就要开始获得反馈。</li></ol><p>不要躲在地下室里，开发了半年的东西，然后拿出来。挥舞着它，问：”你们觉得怎么样？”</p><p>马上询问反馈。</p><p>想象一下，一个朋友在吃饭时告诉你她公司的一个问题。你们一起在餐巾纸上勾画出一个解决方案。</p><p>当你拿到那个草图的那一刻，你就可以把它展示给其他人看。</p><p>我们只开发了一个月就推送了 Crazy Egg 的第一个版本，开始收集反馈。然后，每个月，我们都会发布一个改进版本。</p><p>得益于我们的快速发布和不断收集反馈意见，我们只用了半年时间就有了一个像样的产品，客户也乐于付费。</p><p>不仅如此，<a href="http://www.cmswire.com/cms/analytics/crazy-egg-gets-an-update-drops-free-trial-003710.php" target="_blank" rel="noopener">公开发布更新</a>所产生的媒体和轰动效应，也帮助我们在推出 “疯狂的蛋 “的时候，建立了一个万人的等待名单。</p><p>而对于这一万名付费客户，我们的获客成本是多少呢？是零。</p><p>另一个绝对搞定反馈部分的公司的例子是 Instagram。</p><p><a href="http://www.businessinsider.com/instagram-number-of-users-700-million-2017-4" target="_blank" rel="noopener">Instagram 的增长一直很疯狂。</a></p><img src="/2021/03/17/growth-hacking-made-simple-a-step-by-step-guide-part-1/instagramgrowth.png" alt="instagramgrowth.png" title><p>最初，创始人涉足了一款名为 Burbn 的社交网络应用，是为威士忌饮用者准备的。他们意识到，这款应用使用最多的功能是他们的照片分享机制。</p><p>随后，他们才开始关注摄影应用，他们认为这已经是一个饱和的市场。</p><p>与用户来回交流，他们最终意识到，对于所有的应用来说，分享照片要么太复杂，要么不是应用的主要功能。</p><p>他们只是简单地将他们所知道的所有应用中最好的部分，比如 <a href="https://www.quora.com/How-did-Instagram-start-and-were-the-founders-programmers" target="_blank" rel="noopener">Hipstamatic 的照片过滤器</a>和 Burbn 的分享方式，去掉了所有其他的东西，然后就有了! 他们<a href="https://www.macworld.com/article/1155293/instagram_update.html" target="_blank" rel="noopener">制作了一个大家都想要的伟大应用</a>。</p><img src="/2021/03/17/growth-hacking-made-simple-a-step-by-step-guide-part-1/instagram.png" alt="instagram.png" title><p>再加上出色的时机（Instagram 与 iPhone 4 同时推出），你就知道他们是如何在第一天就获得 2.5 万个安装量，在<a href="https://www.quora.com/How-did-Instagram-build-up-its-community-in-its-early-days" target="_blank" rel="noopener">两个月内达到 100 万用户</a>。</p><h3 id="验证你的想法，确保它不会完全落空。"><a href="#验证你的想法，确保它不会完全落空。" class="headerlink" title="验证你的想法，确保它不会完全落空。"></a>验证你的想法，确保它不会完全落空。</h3><p>制作一个伟大的产品的另一部分是验证你的产品理念。</p><p>你想知道人们想要你将要创造的东西的一个可靠的方法吗？</p><p>请他们为它付费。</p><p>如果你想创建一个应用程序，向人们展示城里最好的茶点，而你知道它需要花费 1000 美元来开发，从 50 个朋友那里获得 20 美元（或从 20 个朋友那里获得 50 美元）将为你解决开发成本问题。</p><p>而且，你会 100%确定:</p><ol><li>你的朋友希望你做这个应用（所以潜在的其他人也对它感兴趣）。</li><li>如果没有成功，你也不会浪费自己的很多钱。</li></ol><p>在你还没有产品之前就向你要钱，这似乎有悖常理。</p><p>但是，如果你仔细想想，你一直都在为一些事情提前付费：电影票、机票、音乐会、活动、健身房会员卡，以及各种各样的东西。</p><p>不管你最后去不去，你都要为这些东西付钱。</p><p>验证你的产品就更好了。在某些情况下，如果你最终没有打造出产品，你可以直接把钱还回去。</p><p>作家 Ryan Holiday 提前<a href="http://observer.com/2014/07/behind-the-book-campaign-how-to-sell-30000-copies-in-6-six-weeks/" target="_blank" rel="noopener">卖出了 2000 多本《障碍就是路》</a>，在他写书的这段时间里，他为自己的燕麦片付了钱，并确保这本书一出版就会成功。</p><p>你想知道另一个成功的产品与市场契合度验证的例子吗？看看 Airbnb？</p><p><a href="http://notes.fundersandfounders.com/post/82297315548/how-airbnb-started" target="_blank" rel="noopener">这里有一张关于 Airbnb 历史的伟大信息图。</a></p><img src="/2021/03/17/growth-hacking-made-simple-a-step-by-step-guide-part-1/airbnb.png" alt="airbnb.png" title><p>这个想法的诞生是出于需要。创始人 Joe 和 Brian，付不起房租。于是，他们想把公寓地板上的三张气垫租出去赚钱。</p><p>当三个人出现时，每个人付给他们 80 美元一晚的费用，他们想，”嗯，这也许值得。”嗯，这可能值得进一步探索”</p><p>一旦他们在西南偏南（<a href="http://www.sxsw.com/" target="_blank" rel="noopener">SXSW</a>）推出，他们就不断接到预订。但他们只得到了几个预订，每周能赚到 200 美元左右。</p><p>尽管如此，他们知道兴趣是存在的。他们要做的就是改进产品。</p><h3 id="如果你没有想法，就发布免费的内容。"><a href="#如果你没有想法，就发布免费的内容。" class="headerlink" title="如果你没有想法，就发布免费的内容。"></a>如果你没有想法，就发布免费的内容。</h3><p>如果你没有想法，就从免费开始。</p><p>创建一个博客或 YouTube 频道，并围绕你想建立业务的利基提供内容。在社交媒体上分享你的内容。</p><p>这是了解人们喜欢和不喜欢什么以及他们想要和需要什么的最简单方法。这是一个很好的渠道，可以让你的想法得到反馈。</p><p>更重要的是，正如你所看到的，如果你收集电子邮件地址，你甚至可以建立一个由渴望和忠诚的追随者组成的观众，他们不能等到你真正推出产品。</p><p>你可以通过赠送电子书、开发小测验、或制作电子邮件系列或一组酷炫的视频来实现。现在有了智能手机和 <a href="http://invideo.io/" target="_blank" rel="noopener">InVideo</a> 等无缝视频编辑解决方案，制作视频比以往任何时候都要容易。</p><p>让人们有机会获得你的一些最好的内容，以换取他们的电子邮件地址，你将立即开始建立一个观众。</p><p>这是目前最简单的创业方式，而且绝对没有风险。</p><p>好的，我们假设你有一个想法，并且你已经验证了它。</p><p>接下来，我们将看看你如何避免 Airbnb 犯下的一些错误，使他们的初期增长停滞不前。</p><h2 id="步骤-2：不要针对所有人"><a href="#步骤-2：不要针对所有人" class="headerlink" title="步骤 2：不要针对所有人"></a>步骤 2：不要针对所有人</h2><p>猜猜 Airbnb 一开始的目标客户是谁？</p><p>是每一个旅行的人。</p><p>看看他们最初的三位顾客–租他们气垫的人。他们是<a href="http://www.telegraph.co.uk/technology/news/9525267/Airbnb-The-story-behind-the-1.3bn-room-letting-website.html" target="_blank" rel="noopener">一个 30 岁的印度男人，一个 35 岁的波士顿女人，还有一个 45 岁的犹他州的四个孩子的父亲</a>。</p><p>交叉点在哪里？是什么把这些人联系在一起？他们的共同点是什么？</p><p>你看，每个新的创新产品都必须经历一个生命周期。这就是所谓的<a href="https://en.wikipedia.org/wiki/Diffusion_of_innovations" target="_blank" rel="noopener">创新扩散法则</a>，它看起来是这样的。</p><img src="/2021/03/17/growth-hacking-made-simple-a-step-by-step-guide-part-1/chart.png" alt="chart.png" title><p>要想接触到大多数人，你的产品必须首先成功通过创新者和早期采用者。</p><p>这些都是你需要明确定位的小群体和社区。杰弗里-摩尔写了整整一本书叫<a href="https://en.wikipedia.org/wiki/Crossing_the_Chasm" target="_blank" rel="noopener">《跨越鸿沟》</a>，讲的就是这个现象。</p><p>产品要么吸引了前 15%的市场，要么就去死在那里。</p><p>如果你的目标客户是 “所有人”，那么你就没有办法在前 15%的市场上实现增长黑客，因为你甚至不知道该说服谁来购买。</p><p>而且，你怎么才能做好这个工作呢？</p><h3 id="如何锁定少数人，让他们从你的产品中获得最大的利益。"><a href="#如何锁定少数人，让他们从你的产品中获得最大的利益。" class="headerlink" title="如何锁定少数人，让他们从你的产品中获得最大的利益。"></a>如何锁定少数人，让他们从你的产品中获得最大的利益。</h3><p>你应该建立一个客户档案。考虑你产品的各个方面。然后问自己。</p><p>谁能从我们的产品中获得最大的利益？</p><p>要具体。尽可能地描述一个真实的人。</p><p>如果 Dropbox 要告诉你他们理想的初始客户，他们可能会说这样的话。</p><p>一个 22 岁的白人男性 谁是技术精通， 住在旧金山或湾区， 是瘦，只有几个真正的好朋友， 穿 XYZ 品牌的衣服， 并花了大部分时间在网上。</p><p>这就是你应该做的细节。</p><p>而且，在一开始，你其实是想专门迎合这些人的需求。</p><p>传统的产品，如传统出版商出版的书籍，在推出之前就必须制造大量的轰动效应，以确保推出成功。</p><p>对于现代软件产品来说，发布前发生的事情并没有发布后发生的事情那么重要。</p><p>Dropbox 并没有举办一场只有邀请人参加的大型发布会。他们只是在 <a href="http://techcrunch.com/2009/10/13/dropbox-acquires-the-domain-everyone-thought-it-had-dropbox-com/" target="_blank" rel="noopener">2008 年的 TechCrunch50</a> 上向公众发布。</p><p>他们更聪明的举动是在推出服务后，将服务变成了仅限邀请。</p><p>这很聪明，是吧？</p><p>他们在每年他们的理想客户聚集的活动上推出了这项服务，然后在产品周围营造了一个排他性的光环。</p><p>希望加入服务的人需要现有用户的邀请才能加入。由于每个人都想知道 Dropbox 是什么，它是如何工作的，所以等待名单很快就炸开了。</p><p>但是，神秘感几乎总是伴随着怀疑。所以，为了让潜在用户了解 Dropbox 是怎么回事，他们制作了一个简短的<a href="http://kirjonen.me/how-dropbox-got-75000-wait-list-signups-from-digg/" target="_blank" rel="noopener">演示视频</a>。</p><p>他们为当时非常流行的社交新闻网络 <a href="http://digg.com/" target="_blank" rel="noopener">Digg</a> 的用户定制了该视频。同样，这些用户都是他们的理想目标。网络极客，技术宅，还有书呆子。</p><p>创始人之一的德鲁-休斯顿（Drew Houston）在整个演示文稿中放置了大约 12 个内部笑话。<a href="http://techcrunch.com/2011/10/19/dropbox-minimal-viable-product/" target="_blank" rel="noopener">在 24 小时内，这段视频就有了 1 万个 diggs（相当于点赞）</a>，消息像野火一样传播开来，他们的等待名单上的用户也从 5000 人跃升到了 75000 人。</p><p>相比于在谷歌 AdWords 上为一款 99 美元的产品每次收购花费 300 美元，这对他们来说似乎是更好的策略，<a href="http://expandedramblings.com/index.php/dropbox-statistics/" target="_blank" rel="noopener">他们现在拥有 5 亿用户</a>。</p><p>这种类型的增长跳跃在初创企业的早期是至关重要的，可以推动产品突破 15%的市场份额边界，而产品要起飞，就需要这样的增长。</p><p>这里还有一个在社区中传播消息的好例子。Hotmail。</p><p>如果你是 Gmail 的用户，Hotmail 似乎很老套，你可能早就忘了它。但是，自从微软收购了 Hotmail 之后，他们已经发展到了超过 4 亿用户。<a href="http://email.about.com/od/emailtrivia/f/how_many_email.htm" target="_blank" rel="noopener">在 2012 年左右之前，他们一直领先于 Gmail</a>。</p><p>他们做了什么，导致微软一开始就把他们买下来？他们发展得很快。</p><p>在辩论广告牌等营销方案时，他们的投资人有了一个想法。为什么不干脆在他们的用户发送的每封电子邮件的末尾放上一张纸条，上面写着 “PS：我爱你。在 Hotmail 获取你的免费邮件”？</p><p>这无疑是值得一试的，它将注册人数增加到了每天 3000 人，在 6 个月内，他们的用户群翻了一番–从 50 万增加到 100 万。</p><p>之后，增长变得更快。仅仅 5 周后，他们就统计出了 200 万用户。</p><p>1200 万用户是相当不错的–尤其是当这意味着<a href="http://www.shoutmeloud.com/popular-companies-growth-hacking-techniques.html" target="_blank" rel="noopener">互联网上每 5 个人中就有一个人</a>。</p><img src="/2021/03/17/growth-hacking-made-simple-a-step-by-step-guide-part-1/microsoft.png" alt="microsoft.png" title><p>通过将 “要求分享 “保留在他们的系统中，他们确保了他们击中了正确的目标群体。</p><p>Hotmail 电子邮件用户向他们的朋友发送电子邮件，这些朋友很可能与他们相似，因此也是理想的客户。</p><p>Uber 也做了同样的事情。他们等了整整一年，在流行的节日 South by Southwest（SXSW）上向时髦人士和科技人士免费发放乘车券，推广他们的服务，而不是依靠广告。</p><p>但所有这些成功的故事都带来了一个重要的问题。</p><p>你如何才能发现一个等待发生的汹涌的成功？一个出色的想法和一个糟糕的想法之间有什么区别？</p><p>在这一点上，我们转向盗版指标。</p><p><a href="https://en.wikipedia.org/wiki/PayPal_Mafia" target="_blank" rel="noopener">PayPal 黑手党</a>是一群企业家和投资人，他们都是通过 PayPal 一炮而红，然后在硅谷创立了其他公司。</p><p>Dave McClure 曾是 PayPal 的市场总监，他之后也创办了一些公司。但最引人注目的是科技孵化器/加速器 <a href="https://500.co/" target="_blank" rel="noopener">500 Startups</a>。</p><p>而 Dave 也明白增长黑客思维和品牌营销理念之间的关键区别。</p><p>大约十年前，Dave 发表了他对<a href="http://500hats.typepad.com/500blogs/2007/09/startup-metrics.html" target="_blank" rel="noopener">创业公司指标</a>的看法。他的观点是衡量几个关键的增长驱动因素，而忽略其他一切。</p><img src="/2021/03/17/growth-hacking-made-simple-a-step-by-step-guide-part-1/image-18.png" alt="image-18.png" title><p>他用有用的缩写 AARRR 概述了漏斗阶段的指标。用户于是亲切地给它起了个绰号 “海盗度量”。</p><p>所概述的漏斗阶段包括：</p><ol><li>获取： 你如何让人们知道你的名字。</li><li>Activation（激活）：如何让人们知道你的名字。如何给用户一个快乐的第一次体验。</li><li>留住用户。你如何让他们回头看更多。</li><li>收益：如何让他们赚钱。如何让他们赚钱</li><li>推荐：如何让他们告诉其他人。你如何让他们告诉其他人。</li></ol><p>你可以为每个阶段挑选出几个关键指标，准确地了解你的努力（和想法）的回报情况。</p><img src="/2021/03/17/growth-hacking-made-simple-a-step-by-step-guide-part-1/image-5.png" alt="image-5.png" title><p>然后，根据这些知识，你知道创业想法是否有吸引力，或者你是否应该转向其他东西。</p><p>漏斗顶端的第一个阶段是<code>收购</code>。</p><p>这措施正是它的声音。你可以看看新的网站或应用程序的流量，甚至可以看看新的眼球来估计你的影响力。</p><p>你有多少人暴露在你的信息传递中？在这里，你要看的是付费广告、公关、SEO 等方面的表现。</p><p>只要确保不惜一切代价<a href="https://neilpatel.com/blog/pointless-marketing-metrics/" target="_blank" rel="noopener">避免虚荣的指标</a>。</p><p>例如，如果你在 Facebook 广告上花了钱，但所有这些访客都立即跳转，那一开始就是不合格的流量。这意味着，你可能找错了目标人群。</p><iframe src="//www.youtube.com/watch?v=d--xYXrnJTE&feature=emb_imp_woyt" frameborder="0" allowfullscreen></iframe><p>这说明你需要再去充实这些客户角色。</p><p>所以你可以在你的获取指标中增加层次，比如所有网站访客至少点击了两个页面或者至少停留了十秒钟。这告诉你这些人确实对你的产品感兴趣。</p><p>第二步是看<code>激活度</code>，也就是在访问你的网站或应用后停留的人数。</p><p>戴夫-麦克卢尔将其称为 “快乐的第一次访问”。</p><p>有时，这意味着一个硬性目标，如选择进入或注册。但除此之外，它也可以适用于高质量的访问，即有人在你的应用里面使用了一个关键功能，或者在网站页面上浏览的时间超过了几分钟。</p><p>这也是我当初创建 Crazy Egg 的原因。</p><p>Google Analytics 可能会告诉你，有 100 人访问了你的主页。如果你在分析像 SEO 这样的获取策略，这很有帮助。</p><p>但如果你想弄清楚这 100 人在你的网站上做了什么，那就没有帮助了。</p><p>你根本不知道他们是否觉得这个页面有帮助，是否很好地提供了他们正在寻找的信息，或者他们是否有潜在的兴趣注册。</p><p>而这些东西最终决定了他们是否成为付费客户。</p><p>这就是 Crazy Egg 发挥作用的地方。</p><p>你可以<a href="https://www.crazyegg.com/heatmap" target="_blank" rel="noopener">根据他们的行为和点击量</a>，从字面上看出他们是否在激活。</p><img src="/2021/03/17/growth-hacking-made-simple-a-step-by-step-guide-part-1/739On6X5hbAHEabKpX6-igi8ZEkvGCI_nCl1KcZA-3iPNiyRMXa1MalRyBBJgXWViir65HXX6FrtkdJoKofeU_2HkIAf_J085WT6n4XuCaQs9OhlJu2Q-Mrnw9mOws2048.jpg" alt="739On6X5hbAHEabKpX6-igi8ZEkvGCI_nCl1KcZA-3iPNiyRMXa1MalRyBBJgXWViir65HXX6FrtkdJoKofeU_2HkIAf_J085WT6n4XuCaQs9OhlJu2Q-Mrnw9mOws2048.jpg" title><p>让人们到你的网站很容易与广告。获得合格的人是一个有点困难。</p><p>但实际上如何让这些人选择在或注册？这完全是另一回事。</p><p>它告诉你，人们是否真正喜欢你的产品概念。</p><p>在获得这些激活，或快乐的第一次访问后，下一步是长期<code>保留</code>他们。</p><p>想一想移动应用吧。</p><p>你很兴奋，急于下载那个大家都在谈论的新应用。你前往应用商店，点击下载，几乎无法控制自己的兴奋。</p><p>你用了几个小时，很开心，但后来又出现了一些事情。于是你把它收了起来。</p><p>而且你再也没有登录过!</p><p>你并不孤单。说真的，每个人都会这样做。</p><p>今天我们用手机的时间<a href="http://www.smartinsights.com/mobile-marketing/mobile-marketing-analytics/mobile-marketing-statistics/" target="_blank" rel="noopener">比用台式电脑的时间还多</a>。<a href="https://www.clickz.com/why-in-app-ads-may-be-the-future-of-mobile-advertising/90711/" target="_blank" rel="noopener">84%的时间</a>我们都在用手机，我们都在手机应用里。</p><p>然而应用的平均留存率却很糟糕。看看这张<a href="http://andrewchen.co/new-data-shows-why-losing-80-of-your-mobile-users-is-normal-and-that-the-best-apps-do-much-better/" target="_blank" rel="noopener">可怕的图</a>，让应用主们看看。</p><img src="/2021/03/17/growth-hacking-made-simple-a-step-by-step-guide-part-1/image02.png" alt="image02.png" title><p>这就告诉你，几乎 80%的用户在下载后三天内就会离开，再也不会回来。这个数字在几个月内会变得更糟糕，上升到高达 95%。</p><p>这就是为什么留存如此重要。你在广告上花钱，或者创造一个很棒的首次体验，但<a href="https://neilpatel.com/blog/business-profitability-customer-acquisition-cost-vs-life-time-value/" target="_blank" rel="noopener">流失会杀死大多数创业公司</a>。</p><p>你失去客户的速度会比你获得客户的速度更快，你很快就会失去现金（和业务）。</p><p><a href="http://hbswk.hbs.edu/archive/1590.html" target="_blank" rel="noopener">《哈佛商业评论》和贝恩公司</a>发表的一项旧研究表明，大多数新客户在一段时间内都无利可图。</p><img src="/2021/03/17/growth-hacking-made-simple-a-step-by-step-guide-part-1/customer-life-cycle-economics-in-ecommerce.gif" alt="customer-life-cycle-economics-in-ecommerce.gif" title><p>我们今天可以争论实际的数字，但同样的基本原则仍然适用。许多新客户在一开始是无利可图的，因为你必须在广告、人员、办公场所等方面花钱。</p><p>更糟糕的是，大多数 SaaS 公司每月只收取其价值的一小部分。这意味着你需要将一个客户保留 3 到 6 个月（甚至可能是 1 年），才能重获新生。</p><p>大多数营销博客文章都集中在获取渠道或战术上。他们谈论 “钱在列表中 “如何让电子邮件订阅者购买他们的第一个产品。</p><p>他们是对的……在一定程度上。</p><p>但真正的增长黑客知道，钱在客户名单中。你通常可以通过专注于增加客户保留而不是专注于新的收购来更快、更容易地增加收入。</p><p>因此，除非你是在移动应用业务中，否则人们在第一次或第二次参与后退出是一个糟糕的坏迹象。</p><p>没有多少公司能像 Dropbox 或 Facebook 那样建立病毒式的<code>推荐</code>循环。事实是，这需要一些特殊的事情同时发生。</p><p>你需要时机，一个惊人的产品，以及网络效应。当一个人对产品的使用增加了另一个人的价值时，就会发生这种情况。</p><p>这就像 1+1=3 一样。</p><p>但无论哪种方式，你仍然希望尽可能多地推动推荐。同样，这些是快乐的付费客户向他们的家人、朋友和同事推荐你。</p><p>再说一次，如果你做得好，这应该是很容易赚钱的。</p><p>为你传播消息的客户越多，你在收购上的花费就越少，这意味着你离盈利越近。</p><p>你的客户应该告诉他们的朋友，并催生你的产品。<a href="http://mschool.growtheverywhere.libsynpro.com/how-to-improve-your-net-promoter-score-ep-293?tdest_id=418298%20%E2%80%A6" target="_blank" rel="noopener">Net Promoter Score</a> 是我最喜欢的衡量技术之一，因为它非常简单。</p><p>但你要继续阅读下面的内容，才能知道如何正确使用它。</p><p>到目前为止，我们所做的一切都只有一个目标。<code>收入</code>。</p><p>最终，人们给你冷硬的现金是最好的产品验证形式。</p><p>要达到这个目标可能需要一段时间。可能要经过几次反复或枢纽才能打出一个成功的组合。</p><p>但是，如果你把前四个步骤都做好了，收入的问题就会迎刃而解。</p><p>现在你明白了做增长黑客决策的框架。你看到了每一个都在帮助你定义成功方面扮演着不同的角色。</p><p>接下来，让我们开始深入研究。</p><p>我们将通过历史上一些增长最快的公司所使用的具体策略、技巧和黑客来深入探讨其中的每一项。</p><p>我们将从漏斗顶端的收购开始。</p><h2 id="步骤-3：获取"><a href="#步骤-3：获取" class="headerlink" title="步骤 3：获取"></a>步骤 3：获取</h2><p>肖恩-埃利斯可能创造了增长黑客的概念。</p><p>但 Eric Ries 帮助将其普及到大众中。</p><p>在 Eric 出版<a href="https://www.amazon.com/Lean-Startup-Entrepreneurs-Continuous-Innovation-ebook/dp/B004J4XGN6/ref=tmm_kin_swatch_0?_encoding=UTF8&qid=&sr=%22" target="_blank" rel="noopener">《精益创业》</a>一书之前，科技界和软件界是人们知道许多核心增长黑客理念的唯一地方。</p><p>埃里克帮助把它放在了地图上，把它正式化，使它可以适用于世界各地各种规模的公司和各个行业。</p><p>那本书中最重要的主题之一是关于增长的三大引擎。</p><p>这是公司扩大获客规模最可靠的三条路径。但同时做多于其中之一的事情几乎是不可能的。</p><p>诀窍是要弄清楚哪种最适合自己的产品类型:</p><ol><li>病毒式 - 想想 Dropbox。你的成长主要是通过其他人将你推荐给他们的朋友、家人或同事。</li><li>粘性–想想 “疯狂的蛋”。你创造了一种无法抗拒的体验，让人们尽可能长时间地停留在你的身边（从而向你支付越来越多的费用）。</li><li>付费型–想想 Groupon。你花了 50 美元来获取一个客户，而这个客户最终将为你的企业带来 500 美元的价值。</li></ol><p>这三个 “引擎 “中的每一个都能发挥作用。然而，每一个执行的程度主要取决于你的业务。</p><p>现在让我们分别去看看每个引擎如何以及何时发挥最大的作用。</p><ol><li>去病毒化–是时候拿出大招了。不过，去病毒化与针对所有人是不同的。</li></ol><p>这一步只是意味着挖掘更大的系统和更大的用户群，并利用同行产品的影响力，真正渗透到大部分市场。</p><p>你的目标客户仍然是你的理想客户，但你正在扩展到所有人都存在的平台。</p><p>Dropbox 用病毒式推荐策略杀出了一条血路。</p><p>给人们提供免费的存储空间，让他们向朋友推荐产品，简直是天才，因为它做了两件事:</p><ol><li>它激励 Dropbox 用户更频繁地与他们的服务共享文档</li><li>它让更多的人认识了这个品牌，让从来没有听说过的人免费获得一点样品。</li></ol><img src="/2021/03/17/growth-hacking-made-simple-a-step-by-step-guide-part-1/dropbox.png" alt="dropbox.png" title><p>当这种推荐朋友的策略开始产生效益时，他们将其发挥到了极致。</p><p>这是与 Dropbox 的另一个关键区别。</p><p>许多公司过于分散投资。他们在这里投入 100 美元，在那里再投入 100 美元，看到的是 1%的微薄投资回报。</p><p>所有的初创公司都是现金紧缺的。这甚至是那些筹集了大量资金的公司。</p><p>原因是你经常要和庞大的企业集团竞争，他们的资金是你的几十亿，而你的资金是几百万。</p><p>小公司就不能<a href="https://neilpatel.com/blog/digg-marketing-guide/" target="_blank" rel="noopener">分散投资</a>了。他们需要把所有的鸡蛋放在一个篮子里，以产生尽可能大的回报。</p><p>如果有些东西不奏效，你就尽快改变方向，尝试其他东西。</p><p>Dropbox 循环使用了几个不同的想法，直到他们找到了病毒式推荐朋友的方法。当他们看到它的效果时，他们加倍努力，<a href="https://www.referralcandy.com/blog/dropbox-referral-program/" target="_blank" rel="noopener">给用户提供更多的空间</a>。</p><img src="/2021/03/17/growth-hacking-made-simple-a-step-by-step-guide-part-1/dropbox-get-more-space-referrals.png" alt="dropbox-get-more-space-referrals.png" title><p>这听起来很像应该在漏斗中更进一步的 Referral 指标。而且在一定程度上是这样的。</p><p>但不要搞错了，这是他们领先的收购增长杠杆，因为订阅量增加了 60%。这是他们领先的收购增长杠杆 因为<a href="http://www.slideshare.net/gueste94e4c/dropbox-startup-lessons-learned-3836587" target="_blank" rel="noopener">订阅量增加了 60%</a>。</p><p>添加其他操作，比如连接你的社交账户以获得更多的存储空间，就像是火上浇油。</p><p>然而，他们花了一段时间才想明白，这种策略会如此有效。</p><p>例如，在打这个战术之前，他们尝试了广告活动和公关的付费策略。</p><p>据创始人德鲁-休斯顿（Drew Houston）说，没有一个成功。于是他们不断迭代，直到找到了行之有效的策略。</p><p>为每个用户提供激励措施，让更多的人加入到平台上，是启动病毒式营销活动的好方法，但让你的产品自己来营销就更好了。</p><p>苹果公司就是这样做的，他们的广告很好地运用了这一策略。还记得流行的 iPod 广告，黑色的剪影和白色的耳机吗？</p><p><a href="http://www.owen.org/blog/7764" target="_blank" rel="noopener">2004-2008 年，这些广告随处可见。</a></p><img src="/2021/03/17/growth-hacking-made-simple-a-step-by-step-guide-part-1/pasted-image-0-221.png" alt="pasted-image-0-221.png" title><p>通过将耳机做成白色，苹果确保每个人都能认出他们。耳机通常是黑色的，所以通过调整这个功能，他们把所有的客户变成了行走的广告。</p><p>你还想知道另一个例子吗？</p><p>WordPress 正在为 <a href="https://wordpress.com/" target="_blank" rel="noopener">29%的在线网站</a>提供动力，而且它是免费的。不过，免费版有一个问题。</p><p>您的域名将始终显示为 wordpress.yourdomain.com。</p><p>每个访问您的免费 WordPress 博客的人都会立即知道这是一个 WordPress 网站。</p><p>但是，让我们来谈谈一个更强大的增长黑客。</p><p>在 Facebook 将其彻底接管之前，MySpace 统治了这个场景。他们是最大的平台之一。</p><p>事实上，他们是如此之大，以至于 YouTube 利用他们的成功来<a href="https://thenextweb.com/entrepreneur/2014/05/28/9-iconic-growth-hacks-tech-companies-used-pump-user-base/" target="_blank" rel="noopener">飙升流量</a>。</p><img src="/2021/03/17/growth-hacking-made-simple-a-step-by-step-guide-part-1/youtube.gif" alt="youtube.gif" title><p>YouTube 的见解是让视频易于分享。他们免费创建了嵌入代码，鼓励用户将他们的视频添加到 MySpace 等其他网站。</p><p>这让 YouTube 的内容呈现在所有人面前。</p><p>首先，他们得到了品牌认可。人们开始熟悉他们是谁，他们做了什么。</p><p>它还通过吸走其他网站的权威，帮助创建反向链接和推荐流量。</p><p>快进几年，YouTube 现在每天处理超过 <a href="https://www.forbes.com/sites/forbesagencycouncil/2017/05/15/are-you-maximizing-the-use-of-video-in-your-content-marketing-strategy/#1408b1913584" target="_blank" rel="noopener">30 亿次搜索</a>，使其成为第二大在线搜索引擎。</p><p>每个人的宠儿，Facebook，使用嵌入作为一个早期的增长黑客，以确保他们达到他们的目标，在一年内获得 2 亿新用户。</p><p>他们给用户提供了一个选择，通过创建不同的徽章让他们嵌入到其他地方，比如他们的博客、网站和论坛中，以显示他们在 Facebook 上。</p><p>这些徽章今天仍然存在。</p><img src="/2021/03/17/growth-hacking-made-simple-a-step-by-step-guide-part-1/badges.png" alt="badges.png" title><p>这创造了数十亿的印象，数亿的点击量，以及每月数百万的注册量。</p><p>而且，这并不是唯一一家使用这种策略的巨头。你有没有尝试过在你的博客上分享YouTube视频？</p><p>他们让嵌入视频变得超级简单，所以很多人都会这么做。他们为你创建整个代码并突出显示，这样你只需按Cmd+C（或Ctrl+C，如果你在Windows上），然后将其粘贴到你的编辑器中。</p><img src="/2021/03/17/growth-hacking-made-simple-a-step-by-step-guide-part-1/embed.png" alt="embed.png" title><p>但这不是它如此受欢迎的唯一原因。还因为YouTube视频非常容易分享。</p><p>我们还希望人们将他们的数据嵌入到Crazy Egg中–这不是一个好主意。</p><p>为什么呢？</p><p>哪家公司愿意展示他们的流量、点击、收入数字和转化率?</p><p>没有人愿意!</p><p>但是，猜猜谁想分享他们发现的最新有趣的猫咪视频？每个人都想!</p><p>小贴士：给人们一个深入挖掘你的嵌入的理由。YouTube播放器会自动播放下一个视频，或者在每个视频结束时给你一个相关视频的选择。这使得你在看完一个嵌入视频后，极有可能切换到YouTube。</p><p>当你决定是否要让你的产品可嵌入时，要确保客户有一个嵌入的理由，它很容易做到，并且你要吸引他们深入挖掘你的嵌入。</p><p>不过，还有比嵌入更强大的东西，特别是如果你做对了：集成。</p><p>您是否知道，只要让人们使用他们在Facebook、Twitter或Google上已有的账户注册您的服务，您就可以增加高达50%的注册量？</p><p>整合你的服务与另一个服务无缝对接，可以让你非常轻松地接触到数百万的潜在客户。</p><p>PayPal在大多数市场上挣扎着进入大门。很少有零售商真正将其作为一种选择。</p><p>但是，一旦他们与eBay达成协议，并将PayPal作为选项提供给Visa和万事达卡旁边，闸门就打开了。</p><p>在过去的几年里，他们的支付量甚至翻了一番。</p><img src="/2021/03/17/growth-hacking-made-simple-a-step-by-step-guide-part-1/image-2.png" alt="image-2.png" title><p>最终，eBay在2002年以15亿美元收购了PayPal。</p><p>考虑到PayPal现在的价值不仅超过了eBay，而且还超过了美国运通，这简直是偷鸡不成蚀把米。对他们来说，有一个强大的整合就够了。</p><p>但PayPal和Facebook已经是旧闻了。那最近的一些创业公司呢？</p><p>今天的整合同样有效。只不过现在，像Facebook和PayPal这样的公司才是你想要整合的对象。</p><p>Spotify就是一家这样做的公司。</p><p>下面是它的样子。</p><img src="/2021/03/17/growth-hacking-made-simple-a-step-by-step-guide-part-1/music.png" alt="music.png" title><p>与Facebook的整合是一个非常有针对性的举措。Facebook已经是一个分享兴趣的平台，尤其是音乐（例如视频形式）。</p><p>Spotify只是让这种体验变得更好。通过在应用和Facebook流中显示你的朋友听的音乐，人们开始发现这个应用。</p><blockquote><p>“汤姆在听Spotify上的Jay -Z的歌。</p></blockquote><blockquote><p>嗯，我想知道那是什么。让我看看 哦，这是免费的流媒体。太棒了!”</p></blockquote><p>Spotify又有了新用途。顺便说一句，这正是他们得到我的方式。</p><p>与嵌入一样，确保你的整合对用户来说是有意义的，而且你的入驻过程是顺利的，这样双方都能受益。</p><p>Airbnb没有，这就是为什么他们的增长黑客最终停止了工作。幸运的是，他们在那个时候已经不需要它了。</p><p>当他们开始创建房源时，他们真的想利用Craigslist的庞大网络。</p><p>但是Craigslist并没有公开他们的API，所以Airbnb的人不得不创建一个非常困难的技术解决方案。</p><p>最终，他们实现了这一点，人们可以通过简单的点击来交叉发布他们的Airbnb列表。</p><img src="/2021/03/17/growth-hacking-made-simple-a-step-by-step-guide-part-1/email.png" alt="email.png" title><p>当时，每月约有5000万独立用户使用Craigslist。</p><p>这些房源后来得到了大规模的曝光，导致Airbnb的用户增长了一大段。</p><img src="/2021/03/17/growth-hacking-made-simple-a-step-by-step-guide-part-1/airbnbchart.png" alt="airbnbchart.png" title><p>但我们只能说，这并不是一个很认可的程序，也根本没有得到Craigslist的认可。最终，他们不得不停止整合。</p><img src="/2021/03/17/growth-hacking-made-simple-a-step-by-step-guide-part-1/question.png" alt="question.png" title><p>另一个与嵌入和集成类似的概念是 “Powered by badges”。</p><img src="/2021/03/17/growth-hacking-made-simple-a-step-by-step-guide-part-1/pasted-image-0-218.png" alt="pasted-image-0-218.png" title><p>不过这些都需要大量的测试和优化，因为不可能马上就知道什么是有效的。</p><p>例如，对于Kissmetrics，我们发现 “Analytics by… “比 “Powered by… “好用得多。</p><p>整合、嵌入和徽章当然是你最好的赌注之一，可以让你的产品走向病毒式传播，并获得足够大的市场，成为热门产品。</p><p>尽管如此，这些例子更多的是想法，而不是 “复制这个 “计划。</p><p>你看，当越来越多的公司开始利用它们时，增长黑客通常会相当快地停止工作。</p><p>因此，与其试图复制这些例子中的每一个，不如试着进入正确的心态，看到尚未开发的机会和新的方法，让你使用类似的策略来营销你的产品。</p><p>那么，你一定要想出一些聪明的策略吗？</p><p>不，你不需要。</p><p>这里有一个使用增长黑客的初创公司的例子，它不是一家价值10亿美元的科技初创公司。</p><p>听说过 “海报沟 “吗？他们是一个让你买卖艺术品和海报的市场。</p><p>他们通过利用病毒式策略，如结构良好的赠品和联盟营销，招募 “校园创业者 “为他们获取用户，只用了一小部分成本就将他们的市场发展到100万美元。</p><p>很基本的战术，利用病毒式的基本本钱，对吧？</p><p>你不需要很花哨。你可以简单地测试已经有效的战术，看看它们的效果如何。如果你获得了很好的投资回报率，那么就可以加倍地扩大它的规模。</p><ol start="2"><li>粘性增长–Facebook也有网络效应，内置病毒性。但他们追求新用户增长的方式几乎完全相反。</li></ol><p>他们没有试图让尽可能多的人获得机会，而是反其道而行之。</p><p>Facebook一开始只针对特定的常春藤盟校。你必须在每所学校都有一个电子邮件地址才能访问。</p><p>从那里，他们慢慢扩展到其他高调的学校。这限制了供应，刺激了需求。</p><img src="/2021/03/17/growth-hacking-made-simple-a-step-by-step-guide-part-1/facebook.jpeg" alt="facebook.jpeg" title><p>Facebook具有病毒性，随着越来越多的朋友加入，每个用户的价值都会增加。</p><p>然而，这个平台的粘性非常高。几乎没有任何其他平台可以与之相比。</p><p>平均每个人每天在Facebook上花费大约一个小时的时间。这几乎和人们白天吃饭的时间一样多。</p><p>而且这些趋势数字还在不断增长!</p><p>Facebook很清楚他们的用户喜欢什么，不喜欢什么。然后，他们像木偶大师一样操纵这些东西，让人们每天继续多次登录。</p><p>这意味着他们已经征服了产品粘性的神奇公式。</p><blockquote><p>高留存率+低流失率+网络效应。</p></blockquote><p>Kissmetrics前增长总监Lars Lofgren展示了如果你任其发展，流失率往往会（也会）开始侵蚀新客户的获取。</p><img src="/2021/03/17/growth-hacking-made-simple-a-step-by-step-guide-part-1/10_Percent_Monthly_Churn_Reduced_to_7_Small.png" alt="10_Percent_Monthly_Churn_Reduced_to_7_Small.png" title><p>而且他还引用了Eric Ries的一个简单的经验法则，用于粘性产品。</p><p>管辖粘性增长引擎的规则非常简单： 如果新客户的获取率超过了流失率，产品就会增长。</p><p>David Skok在他关于SaaS指标的文章中写下了你可以称之为Churn Bible的东西。在其中，他引用了NetSuite的Ron Gill的话，他基本上说，流失率就像你能看到的年率或回报率的天花板。</p><img src="/2021/03/17/growth-hacking-made-simple-a-step-by-step-guide-part-1/image_thumb36.png" alt="image_thumb36.png" title><p>换句话说，你只能在你的流失率低的情况下成长。</p><p>负流失也可以改变游戏规则。这时，从现有客户那里增加收入的收益超过了老客户离开所损失的收入。</p><img src="/2021/03/17/growth-hacking-made-simple-a-step-by-step-guide-part-1/image_thumb3.png" alt="image_thumb3.png" title><p>大卫-斯科克概述了两种增加的方法。</p><p>第一个是将价格与产品使用量挂钩。这样，客户使用你的产品越多，他们支付的价格就越高。例如，根据他们发送电子邮件的数量来收费。<br>另一个选择是向上销售或交叉销售更多/更大版本的产品。这在B2B领域特别有帮助，你可以添加一个大的、可定制的 “企业 “产品。</p><p>诚然，这是个有点深奥的宅男话题。</p><p>但坚持产品是绝对必要的。</p><p>流失率可以（也将）决定你的产品最终的成功程度。</p><ol start="3"><li>付费增长–病毒性、粘性业务在软件中很常见。然而，在它之外，它们就不那么常见了。</li></ol><p>问题是，许多其他类型的公司并没有从在线增长中获益那么多。</p><p>像Nespresso咖啡机这样的硬件公司，不能那么容易地 “病毒式 “传播，也不能通过简单地创造一个有粘性的产品来实现增长。</p><p>这些公司是如何成长的呢？他们利用商业广告。</p><p>Groupon在短短几年内通过付费增长上市时，也采取了类似的策略。</p><p>他们销售的是硬商品和服务。</p><p>他们的诀窍是在任何竞争对手跟上之前尽可能快地成长，这样他们就可以达到规模，上市，并主导优惠券领域。</p><p>你可以说所有你想要的关于他们的股票价格或性能。</p><p>但你无法反驳的是他们的增长策略。</p><p>他们的规模在一年内增长了228%。</p><p>怎么做到的？</p><p>就在上市之前，他们必须向美国证券交易委员会披露财务数据。</p><p>而其中最让人眼前一亮的一项是，他们在一个季度内花了1.79亿美元获取了3300万新用户!</p><img src="/2021/03/17/growth-hacking-made-simple-a-step-by-step-guide-part-1/image-16.png" alt="image-16.png" title><p>“网络营销 “这一项是目前最大的费用调整。</p><p>所以他们是直接花钱获取新用户。</p><p>他们的商业模式表明，在广告上花钱是一种积极的投资。他们能够在每个注册用户上赚取一定的利润。</p><p>增长的数学很简单。花尽可能多的钱！</p><p>你有客户的终身价值（LTV）在方程的一边。这是每个客户在一段时间内的平均价值。</p><p>因此，如果有人每月付给你100美元，持续两年，那就是2400美元的LTV。</p><p>你可以也应该尽力提高这个数字。下面基于留存的策略可以帮助你。</p><p>但除此之外，你要将这个数字与获客成本（CAC）进行比较。</p><p>把获取一个客户所需的所有费用加起来。你有可能拥有设备、销售人员、营销人员、广告活动等。</p><p>因此，你在市场和销售上的花费几乎总是比你想象的要高。</p><p>中间的某个地方是你的投资回收期。这是你收回这些初始成本所需的时间。</p><p>而你可以将这一点之后的所有东西回馈给管理费用或利润。</p><p>亚马逊Prime会员每年的消费超过1300美元。这是非Prime客户消费的两倍。每月总计近1亿美元。</p><img src="/2021/03/17/growth-hacking-made-simple-a-step-by-step-guide-part-1/screen20shot202017-07-0720at201584820pm.png" alt="screen20shot202017-07-0720at201584820pm.png" title><p>额外的利润率使他们能够重新投资于未来的增长。</p><p>例如，亚马逊出了名的产品销售利润率较低。</p><p>但最近，他们已经开始创造、销售和分销自己的产品。</p><p>而且最好的是，他们只是简单地看一个类别中最畅销的产品。所以他们已经知道什么是最有效的。</p><p>亚马逊前员工Rachel Greer透露了亚马逊是如何利用他们新的自有品牌来提高每单位销售利润的。</p><p>亚马逊既能追踪人们购买的商品，也能追踪他们搜索到的和找不到的商品，这让这家电子零售商在小卖家面前拥有巨大的优势。</p><p>他们正在研究哪些商品化的产品已经表现良好，然后简单地削弱竞争。</p><img src="/2021/03/17/growth-hacking-made-simple-a-step-by-step-guide-part-1/pasted-image-0-219.png" alt="pasted-image-0-219.png" title><p>付费增长从一些基本的东西开始，比如广告或公关。</p><p>但正如你所看到的，它还包括在增加利润的同时降低成本，以进一步利用权力地位。</p><p>引起更多的关注和兴趣永远是第一步。然而，如果不能让这些关注度持续下去，你将永远面临一场艰苦的战斗。</p><p>以下是如何激活新的网站访问量和应用安装者，让他们长期留在这里。</p><h2 id="步骤-4：激活"><a href="#步骤-4：激活" class="headerlink" title="步骤 4：激活"></a>步骤 4：激活</h2><p>你想尽快提高转化率吗？</p><p>其实很简单。</p><p>你所要做的就是消除你的选择页面上的一些表格字段。</p><p>我只需从注册页面中删除一个表格字段，就能将我的转化率提高26%。</p><p>但是，等等。它不可能这么简单，对吗？</p><p>不幸的是，它不是。</p><p>你只是在这个免费的步骤上让选择加入变得更容易了。免费转换并不能支付账单。只有付费客户才会这样做。</p><p>这里有一个几年前的完美例子，证明了这一点。</p><p>在人们注册时要求他们提供信用卡，会增加很多摩擦。他们还不确定自己是否想要或需要你的产品。</p><p>去掉这个要求，就容易多了。</p><p>所以很容易猜到这对转化率的影响。</p><p>这是Totango的一项研究发现的。</p><img src="/2021/03/17/growth-hacking-made-simple-a-step-by-step-guide-part-1/totango-product-evaluators.jpeg" alt="totango-product-evaluators.jpeg" title><ul><li>他们发现，不要求信用卡带来了更高的转化率（约10%）。</li><li>要求提供信用卡带来较低的转换率（约2%）。</li></ul><p>你自己的情况是独一无二的。重复这项研究可能会给你不同的结果。</p><p>不过，重点还是在于。</p><p>如果更多的人只是要离开，那么让更多的人转化是没有用的。这不是一个成功的激活。</p><p>相反，你希望合格的人留在这里。注册或选择加入是一个好的开始。但它们并不能给你提供全貌。</p><p>在注册后叠加每次浏览的页面可能会给你提供你需要的背景。</p><p>Fraser Deans强调了成功收购的三个不同阶段。</p><ul><li>预注册。这包括人们在选择加入之前所经历的所有 “东西”。</li><li>首次用户体验。这些是指导性的入职步骤，帮助人们看到你的产品的价值。</li><li>注册后。这是所有之后的事情，以确保他们不会有买方的后悔。</li></ul><p>第一阶段概述了别人到达你的注册页面的所有步骤。</p><p>例如，也许他们在谷歌上搜索了一个痛点，找到了一篇博客文章，然后点击了那个页面。</p><p>也许他们先看到了一个广告，引导他们进入了一个登陆页面。</p><p>也可能他们直接输入了你的品牌名称。</p><p>这里的诀窍是优化用户流，加快每一个人的速度。</p><img src="/2021/03/17/growth-hacking-made-simple-a-step-by-step-guide-part-1/funnels-google-site-ppc-ad.png" alt="funnels-google-site-ppc-ad.png" title><p>比如，我的很多网站都会在前面和中间设置一个工具选择功能。</p><p>访问Crazy Egg主页，你会看到的是一个URL栏，可以即时获得热图。</p><img src="/2021/03/17/growth-hacking-made-simple-a-step-by-step-guide-part-1/image-4.png" alt="image-4.png" title><p>我们为什么要这么做？</p><p>我们在 “塑造 “用户流。有人可以在一篇博客文章中读到关于常见网站错误的内容。</p><p>然后，一旦他们开始浏览网站以获得更多的信息，我们可以向他们展示如何修复他们的网站。</p><p>这是令人难以置信的强大。它免费给别人带来直接的价值。</p><p>这也是我见过的最好的方法之一，让人们立即了解你的产品如何使他们受益。</p><p>当他们看到热图的那一刻，他们就会产生 “哈哈 “的感觉。</p><p>因此，从那里开始，它是一个简单的销售。</p><p>不过，让别人转化只是战役的一半。</p><p>下一步是确保发生 “快乐的第一次体验”。</p><p>这是入职阶段，在这个阶段，你可以使用教程来帮助人们学习如何从你的产品中获得最大的好处。</p><p>Claire Suellent概述了三种不同的方法，包括:</p><ol><li>自助服务</li><li>小组演示</li><li>一对一通话</li></ol><p>服务和关注程度也主要取决于产品类型。</p><p>例如，像Canva这样的简单产品是相当直接的。</p><p>通过拖拽一个小方框来裁剪照片，非常直观。</p><img src="/2021/03/17/growth-hacking-made-simple-a-step-by-step-guide-part-1/image-7-1200x675.png" alt="image-7-1200x675.png" title><p>他们可能有能力使用自助服务教程，使用callout和工具提示来告诉用户下一步该点击哪里。</p><p>产品越复杂，你最初需要做的手工操作就越多。</p><p>问题不在于人们理解你产品的功能。这些很容易看到。</p><p>问题是让人们了解如何从这些东西中获益。而这往往需要一段时间来沉淀。</p><p>像HubSpot和Infusionsoft这样真正复杂的产品甚至需要你做正式的培训，然后他们才会让你松开产品。</p><img src="/2021/03/17/growth-hacking-made-simple-a-step-by-step-guide-part-1/image.png" alt="image.png" title><p>很显然，对于大多数产品来说，要求一次性收取3000元的上岗费是矫枉过正。</p><p>但它的作用是将注册的人数缩小到只有合格的人。</p><p>HubSpot愿意打赌，当你真的经历了这个过程，你将能够更有效地使用他们的产品。</p><p>而结果是，你会坚持做一个付费客户的时间更长。</p><p>把你的入职序列看作是自己的漏斗，可以帮助你发现问题所在。</p><p>例如，沿着宾果卡创造者的每个步骤，看看下面的转换。</p><img src="/2021/03/17/growth-hacking-made-simple-a-step-by-step-guide-part-1/bingo-card-creator-funnel.png" alt="bingo-card-creator-funnel.png" title><p>从签到仪表板到创建列表的人数看起来不错!</p><p>但下一步(从创建列表到定制列表)就没有那么好了。</p><p>这让你看到了转化路障藏在哪里，一览无余。从一个功能到另一个功能的过渡对你来说可能看起来很简单。</p><p>然而，客户数据却描绘了另一幅图景。</p><p>LinkedIn通过在零到100的范围内显示你的个人资料有多 “完整”，这也是这种策略的另一种变化。</p><img src="/2021/03/17/growth-hacking-made-simple-a-step-by-step-guide-part-1/LinkedIn.jpeg" alt="LinkedIn.jpeg" title><p>和以往一样，只有测试才能看出什么是有效的。这就是为什么增长黑客的思维方式对成功至关重要。</p><p>你需要假设潜在的解决方案，测试，衡量影响，并继续迭代，直到你找到答案。</p><p>例如，Buffer的Leo Widrich告诉Chargify，他们是如何在入职过程中不强迫用户分享一些东西，从而反直觉地发现了更多的成功。</p><p>这与你的想法完全相反，因为Buffer背后的整个理念就是改善人们分享内容的方式。有的时候，在你测试不同的方法之前，你根本无法知道什么会有效。</p><p>接下来，在整个体验中调整你的信息传递。</p><p>例如，营销自动化可以帮助你定制信息。</p><p>因此，你可以看到某人是否已经使用了某个特定的功能，如果没有，就给他们发送一封完全不同的提醒邮件来推敲他们。</p><p>大多数自动化平台将允许你为你想要的行动设置事件。</p><img src="/2021/03/17/growth-hacking-made-simple-a-step-by-step-guide-part-1/image-8.png" alt="image-8.png" title><p>然后，你可以根据用户是否采取了该行动来改变后续消息。</p><p>如果LinkedIn上有人上传了照片，但没有填写技能、专长或以前的工作经历，猜猜他们即将收到哪条消息？</p><p>像这样的滴灌邮件不仅仅是为了辅助激活。</p><p>事实上，在留存阶段，你往往可以从中获得更多的价值，让人们一次又一次地回来。</p><!-- ## 步骤5：留存两节前，我们对流失率进行了深入的探讨。我们看到了它是什么，它是如何工作的，以及它如何影响你的底线。为什么我们要花这么多时间在这上面？因为留住现有客户是通往成功的最快路径。根据Adobe公司的数据，回头客更有可能转化并花费更多的钱。基本上你在哪里看到的都是同样的故事。回头客更有可能购买。 --><hr><p>原文：<a href="https://neilpatel.com/what-is-growth-hacking/" target="_blank" rel="noopener">Growth Hacking Made Simple: A Step-by-Step Guide</a></p>]]></content>
      
      
      <categories>
          
          <category> tech </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 翻译 </tag>
            
            <tag> growth </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《深入浅出node.js》小结</title>
      <link href="/2021/03/16/explain-profound-theories-in-simple-language-node-js/"/>
      <url>/2021/03/16/explain-profound-theories-in-simple-language-node-js/</url>
      
        <content type="html"><![CDATA[<p>这本书从不同的视角介绍了 Node 内在的特点和结构。由首章 Node 介绍为索引，涉及 Node 的各个方面，主要内容包含模块机制的揭示、异步 I/O 实现原理的展现、异步编程的探讨、内存控制的介绍、二进制数据 Buffer 的细节、Node 中的网络编程基础、Node 中的 Web 开发、进程间的消息传递、Node 测试以及通过 Node 构建产品需要的注意事项。</p><a id="more"></a><img src="/2021/03/16/explain-profound-theories-in-simple-language-node-js/img2.png" alt="img2.png" title>]]></content>
      
      
      <categories>
          
          <category> tech </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一份运营活动平台的概要设计草案</title>
      <link href="/2021/02/08/a-design-of-activity-lowcode-platform/"/>
      <url>/2021/02/08/a-design-of-activity-lowcode-platform/</url>
      
        <content type="html"><![CDATA[<img src="/2021/02/08/a-design-of-activity-lowcode-platform/topbanner.jpg" alt="topbanner.jpg" title><a id="more"></a><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><ul><li>日益增加的运营活动类需求与有限的开发资源间，已经有越来越大的矛盾</li><li>推广活动的运行模式，具备可抽象性</li></ul><h1 id="整体抽象"><a href="#整体抽象" class="headerlink" title="整体抽象"></a>整体抽象</h1><img src="/2021/02/08/a-design-of-activity-lowcode-platform/1.png" alt="1.png" title><p>针对常规活动，其产出机制可大致进行如下划分：</p><ol><li>针对具体活动，其预算需要确认</li><li>奖品确认</li><li>活动规则确认（用户参与活动需要完成的任务）</li><li>用户属性的限制</li><li>活动载体制作（h5）与上线</li><li>针对完成任务的用户，进行奖励推送</li></ol><p>针对上述划分的步骤，可提取出具体的服务：</p><ol><li>活动配置服务：针对活动涉及的交互组件进行组装，并生成活动实例；活动实例被下面各个服务实例依赖</li><li>预算服务：创建预算实例，依赖活动实例；对接银行账户，且对所有活动的预算进行限制。预算实例可能是实际金额，也可能是虚拟产品</li><li>奖品服务：创建奖品实例，依赖预算实例；对具体奖品进行配置与生成（现金或其他虚拟产品）</li><li>规则服务：创建规则实例，依赖活动实例；对活动任务进行设置（比如用户需要完成注册/开户/入金/出金/抽奖等任务，就算是完成活动任务），用户完成任务后进行记录</li><li>资格服务：创建资格实例，依赖活动实例；对参与活动的用户进行限制（地区限制，新用户/已注册用户/已开户用户 等属性限制）</li><li>发奖服务：创建发奖实例，依赖活动实例；对完成任务的用户进行发奖（比如把现金发入用户账户，给用户的微信账户发微信红包，给用户的账户发虚拟产品等）</li></ol><p>其中，<code>规则服务</code>需要察觉用户用户完成的各项任务（登陆注册、开户、入金、出金等），会依赖登陆注册服务、开户服务、出入金服务等其他服务，这里使用<code>发布/订阅</code>模式进行机制实现：</p><ol><li>消息总线：团队中的其他关键服务，比如登陆注册服务、开户服务等，在用户完成具体事件后，对消息总线发出具体消息；规则服务对消息总线进行订阅，对完成事件并符合资格的用户进行记录</li></ol><p>另外，可能还需要一些服务：</p><ol><li>报名服务：创建报名实例，依赖活动实例；当需要用户通过具体活动页登陆注册后再完成任务，才能领取奖品时，需要进行用户记录</li><li>抽奖服务：创建抽奖实例，依赖活动实例；对每个抽奖实例，涉及概率计算，与奖品池分配，还有可能需要动态进行奖品池调整</li></ol><h1 id="具体活动站点架构"><a href="#具体活动站点架构" class="headerlink" title="具体活动站点架构"></a>具体活动站点架构</h1><img src="/2021/02/08/a-design-of-activity-lowcode-platform/2.png" alt="2.png" title><p>对于一个具体的活动页，其可复用的东西，是页面组件，以及组件在页面中的组合关系，也就是：</p><ol><li>组件</li><li>模版</li></ol><p>接下来再设计好<code>使用模版生成页面</code>的调度关系，即可批量生产 h5</p><p>经过简单调研，初步考虑使用 gatsby 作为静态页生成器</p><p>开发人员开发出常用的活动交互组件（比如页面轮播 banner，抽奖转盘，手机注册 form 表单等）</p><p>开发人员在 gatsby 的架构约束下使用模版拼装组件，然后使用模版生成实际页面；也可以使用 gatsby 对接具体的数据源，在 CMS 中进行组件拼装</p><h1 id="CMS-说明"><a href="#CMS-说明" class="headerlink" title="CMS 说明"></a>CMS 说明</h1><p>CMS 需要对接活动涉及到的微服务群，比如奖品服务、发奖服务等。大部分的对接，是常见的表单输入、列表展示、详情展示，但针对<code>活动页组装</code> 组装的这部分对接，会相对复杂。</p><p>针对<code>活动页组装</code>的交互，主要是 3 个点：</p><ol><li>组件罗列与预览：通过 npm 统一管理组件，CMS 的组件依赖需要和活动站点的组件依赖保持同步</li><li>模版预览：在页面中划分出模版预览区域，区域中展示组件拼装效果</li><li>组件拖拽：<code>待详细考虑</code></li></ol><h1 id="后续思考"><a href="#后续思考" class="headerlink" title="后续思考"></a>后续思考</h1><ol><li>批量生成运营活动载体（h5）有非常明显的业务价值，但这些业务价值的具体指标，一般要如何计算<ol><li>计算手工开发活动的人力成本，然后计算使用平台配置活动的人力成本，进而做对比差异</li><li>计算活动运行下来的平均收益，再和上面的对比相乘，进而得出运营平台上线后的收益指标</li><li>具体收益指标，都是指哪些指标？待进一步考虑</li></ol></li><li>在打造运营活动平台（low code 平台）的过程中，开发人员要如何借此增加自身的核心竞争力（或者说，这里面最<code>硬核</code>的东西是什么）<ol><li>业务抽象能力？</li><li>非常明显的业务价值？</li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> tech </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 用户增长 </tag>
            
            <tag> gatsby </tag>
            
            <tag> activity </tag>
            
            <tag> low code </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【翻译】https如何工作</title>
      <link href="/2020/12/02/how-https-works/"/>
      <url>/2020/12/02/how-https-works/</url>
      
        <content type="html"><![CDATA[<p>HTTPS 就是标准 HTTP 协议 + SSL/TLS 加密技术。除非出现严重问题，否则它可以防止 <a href="https://en.wikipedia.org/wiki/Alice_and_Bob#Cast_of_characters" target="_blank" rel="noopener">Eve</a> 这种臭名昭著的人查看或修改你的的请求；它可以保证你的密码、信息和信用卡数据在你的电脑和正确的服务器之间传递时的安全。虽然绿色的小挂锁和地址栏中的字母”https”并不意味着你和你正在浏览的网站不会被 hack，但它们至少可以帮助你安全地进行通信。</p><a id="more"></a><h2 id="1-什么是-HTTPS，它有什么作用？"><a href="#1-什么是-HTTPS，它有什么作用？" class="headerlink" title="1. 什么是 HTTPS，它有什么作用？"></a>1. 什么是 HTTPS，它有什么作用？</h2><p>HTTPS 基于 HTTP 协议，并在其之上增加了一个 SSL/TLS（以下简称为 “SSL”）加密层。服务器和客户端之间仍然使用 HTTP 协议规范进行通信，但通过安全的 SSL 连接，对其请求和响应进行加密和解密。SSL 层有 2 个主要目的：</p><ul><li>验证您是否与直接正确的服务器通话。</li><li>确保只有服务器能读取你发送的内容，也只有你能读取它响应的内容。</li></ul><p>真正巧妙的部分是 – 任何人都可以拦截你与服务器交换的信息，包括你们正在商定使用的密钥和加密策略，但仍然无法读取你发送的任何实际数据。</p><h2 id="2-如何建立-SSL-连接"><a href="#2-如何建立-SSL-连接" class="headerlink" title="2. 如何建立 SSL 连接"></a>2. 如何建立 SSL 连接</h2><p>客户端和服务器之间的 SSL 连接是通过握手建立起来的，其目标是：</p><ul><li>确保客户端与正确的服务器通话（或者反过来）。</li><li>商定一个 “密码套件”，其中包括他们将使用哪种加密算法来保护数据。</li><li>商定该算法所需的密钥</li></ul><p>一旦建立了连接，双方就可以使用约定的算法和密钥安全地发送消息。我们将把握手分为 3 个主要阶段–’你好’、’证书交换’和’密钥交换’:</p><ol><li>Hello - 握手开始于客户端发送的客户端请求。客户端请求里包含了服务器通过 SSL 连接到客户端所需要的所有信息，包括各种密码套件和它支持的最大 SSL 版本。服务器以服务器响应作出回应，其中包含了客户端所需的类似信息，包括根据客户端的偏好决定将使用哪种密码套件和 SSL 版本。</li><li>证书交换–既然已经建立了联系，服务器必须向客户证明其身份。这是通过 SSL 证书来实现的，SSL 证书就像它的护照一样。一个 SSL 证书包含各种数据，包括所有者的名字，它所连接的财产（如域名），证书的公钥，数字签名和证书的有效期信息。客户端会检查是否隐含地信任该证书，或该证书已被多个证书签发机构(CA)中的其中一个核实及信任，并隐含地信任该证书。稍后会有更多关于这方面的内容。请注意，服务器也可以要求证书来证明客户端的身份，但这通常只发生在非常敏感的应用中。</li><li>密钥交换–客户端和服务器实际交换的消息数据的加解密将使用对称算法来完成，其确切的性质已经在 Hello 阶段达成一致。对称算法在加密和解密时都使用一个单一的密钥，而非对称算法则需要一个公钥/私钥对。双方需要就这个单一的对称密钥达成一致，这个过程是使用非对称加密和服务器的公钥/私钥安全完成的。</li></ol><p>客户端生成一个随机密钥，用于主要的对称算法，并使用同样在 Hello 阶段商定的算法和服务器的公钥（在 SSL 证书上找到）对其进行加密。客户端将这个加密后的密钥发送给服务器，服务器使用私钥进行解密，握手的有趣部分就完成了。双方都很高兴，因为他们正在和正确的人交谈，并且已经秘密地商定了一个密钥来对称地加密他们将要发送给对方的数据。现在，HTTP 请求和响应可以形成一个明文信息，然后加密后发送。对方是唯一一个知道如何解密这个消息的人，所以中间人（攻击者）无法读取或修改他们可能截获的任何请求。</p><h2 id="3-证书"><a href="#3-证书" class="headerlink" title="3. 证书"></a>3. 证书</h2><h3 id="3-1-信任"><a href="#3-1-信任" class="headerlink" title="3.1 信任"></a>3.1 信任</h3><p>基本上，SSL 证书就是一个文本文件，任何有文本编辑器的人都可以创建一个。你可以轻而易举地创建一个证书，声称你是谷歌公司，你控制着域名 gmail.com。如果这就是整个流程，那么 SSL 就会成为一个笑话 – 身份验证实质上就会变成：客户端问服务器 “你是 Google 吗？”，服务器回答 “呃，是的，这里有一张纸，上面写着’我是 Google’”，客户端说 “好的，太好了，这是我所要的数据”。防止这场闹剧的关键之处在于数字签名，它可以让一方验证另一方的纸片是否真的合法。</p><p>有两个合理的理由可以让你信任证书：</p><ul><li>它在你隐性信任的证书列表中</li><li>它能够证明它被上述列表中的一个证书的控制者所信任。</li></ul><p>第一个标准很容易检查。你的浏览器预装了获取自证书颁发机构（CA）的可信任 SSL 证书列表，你可以查看，添加和删除。这些证书由一组集中的（理论上，通常在实践中）极其安全、可靠和值得信赖的组织所控制，如赛门铁克、Comodo 和 GoDaddy。如果一个服务器出示的证书来自该列表，那么你知道你可以信任他们。</p><p>第二个标准要难得多。服务器很容易说 “是的，我是微软，你信任赛门铁克，赛门铁克信任我，所以都很酷”。有点聪明的客户可能就会去问赛门铁克 “我这里有一个微软，他们说你信任他们，这是真的吗？” 但即使赛门铁克说 “是的，我们认识他们，微软是合法的”，你还是不知道这个自称是微软的服务器到底是微软还是其他糟糕的东西。这就是数字签名的作用。</p><h3 id="3-2-数字签名"><a href="#3-2-数字签名" class="headerlink" title="3.2 数字签名"></a>3.2 数字签名</h3><p>如前所述，SSL 证书有一个相关的公钥/私钥对。公钥作为证书的一部分进行分发，而私钥则受到非常安全的保护。这对非对称密钥在 SSL 握手中用于交换双方进一步的密钥，以对称地加密和解密数据。客户端使用服务器的公钥对对称密钥进行加密，并安全地发送给服务器，服务器则使用其私钥进行解密。任何人都可以使用公钥加密，但只有服务器可以使用私钥解密。</p><p>数字签名的情况正好相反。证书可以由另一个当局 “签署”，这样，该当局就可以有效地记录在案，说 “我们已经核实，该证书的控制人也控制着证书上所列的财产（域）”。在这种情况下，权威机构使用他们的私钥（广义上）对证书的内容进行加密，而这个加密文本作为数字签名附在证书上。任何人都可以用权威机构的公钥对这个签名进行解密，并验证其结果是否达到预期的解密值。但只有权威机构才能使用私钥对内容进行加密，所以只有权威机构才能真正在第一时间创建一个有效的签名。</p><p>所以，如果有一个服务器来宣称自己有一个由赛门铁克（或其他 CA）签署的 Microsoft.com 的证书，你的浏览器不必相信它。如果它是合法的，赛门铁克会用他们的（超机密）私钥来生成服务器 SSL 证书的数字签名，你的浏览器可以使用他们的（超公开）公钥来检查这个签名是否有效。赛门铁克会採取步骤，确保他们所签署的机构真的是 Microsoft.com 的拥有者，因此，鉴于你的客户信任赛门铁克，它可以肯定它真的是 Microsoft Inc.</p><h3 id="3-3-自签名"><a href="#3-3-自签名" class="headerlink" title="3.3 自签名"></a>3.3 自签名</h3><p>请注意，所有的根 CA 证书都是 “自签名 “的，这意味着数字签名是用证书自己的私钥生成的。根 CA 的证书并没有什么本质上的特别之处–如果你想的话，你可以生成自己的自签证书，并使用这个证书来签署其他证书。但由于你的随机证书并没有作为 CA 预装到任何地方的浏览器中，因此没有一个浏览器会信任你签署自己的或其他证书。你实际上是在说：”呃，是的，我是微软，这里有我自己签发和签名的官方身份证书。”所有正常运行的浏览器都会针对你的可疑证书抛出一个非常可怕的错误信息。</p><p>这给所有的浏览器和操作系统发布商带来了巨大的负担，他们只信任干净的根 CA，因为他们的用户最终会信任这些组织来审核网站并保证证书的安全。<a href="https://security.stackexchange.com/questions/11464/getting-a-root-ca-accepted-in-systems-and-browsers" target="_blank" rel="noopener">这不是一件容易的事</a>。</p><h3 id="3-4-你在相信什么？"><a href="#3-4-你在相信什么？" class="headerlink" title="3.4 你在相信什么？"></a>3.4 你在相信什么？</h3><p>有趣的是，你的客户端在技术上并不是要验证是否应该相信发送证书的一方，而是要验证是否应该相信证书中包含的公钥。SSL 证书是完全开放和公开的，所以任何攻击者都可以抢夺微软的证书，拦截客户端对 Microsoft.com 的请求，并向其出示合法证书。客户端会接受这一点，并愉快地开始握手。然而，当客户端加密将用于实际数据加密的密钥时，它将使用这个真实证书中的微软的真实公钥来加密。由于攻击者没有微软的私钥来解密，所以他们现在被卡住了。即使完成了握手，他们仍然无法解密密钥，因此也无法解密客户端发送给他们的任何数据。只要攻击者不控制可信证书的私钥，秩序就会得到维护。如果客户机以某种方式被欺骗，相信一个私钥被攻击者控制的证书和公钥，麻烦就开始了。</p><h2 id="4-有趣的事实"><a href="#4-有趣的事实" class="headerlink" title="4. 有趣的事实"></a>4. 有趣的事实</h2><h3 id="4-1-咖啡店可以通过他们的网络监控我的-HTTPS-流量吗？"><a href="#4-1-咖啡店可以通过他们的网络监控我的-HTTPS-流量吗？" class="headerlink" title="4.1 咖啡店可以通过他们的网络监控我的 HTTPS 流量吗？"></a>4.1 咖啡店可以通过他们的网络监控我的 HTTPS 流量吗？</h3><p>不行。</p><p>公钥加密的魔力意味着，攻击者可以观察你的客户端和服务器之间交换的每一个字节的数据，并且仍然不知道你们之间在说什么，除了大概有多少数据在交换。然而，在不安全的 wifi 网络上，你的正常 HTTP 流量仍然是非常脆弱的，一个脆弱的网站可以成为任何数量的变通方法的受害者，这些变通方法以某种方式欺骗你发送 HTTPS 流量，要么通过普通 HTTP，要么就是完全发送到错误的地方。例如，即使一个登录表单通过 HTTPS 提交用户名/密码组合，如果表单本身是通过 HTTP 不安全地加载，那么攻击者可以在表单到达你的机器的途中拦截表单的 HTML，并修改它来发送登录细节到他们自己的端点。</p><h3 id="4-2-我的公司可以通过他们的网络监控我的-HTTPS-流量吗？"><a href="#4-2-我的公司可以通过他们的网络监控我的-HTTPS-流量吗？" class="headerlink" title="4.2 我的公司可以通过他们的网络监控我的 HTTPS 流量吗？"></a>4.2 我的公司可以通过他们的网络监控我的 HTTPS 流量吗？</h3><p>如果你使用的也是你公司控制的机器，那么是的。请记住，在每一个信任链的根部都有一个隐含的受信任的 CA，而这些权威机构的列表就存储在你的浏览器中。你的公司可以利用他们对你的机器的访问权限，将他们自己的自签证书添加到这个 CA 列表中。然后他们就可以拦截你所有的 HTTPS 请求，出示声称代表相应网站的证书，这些证书由他们的假 CA 签署，因此毫无疑问地被你的浏览器信任。由于你会使用他们的假证书的公钥对你所有的 HTTPS 请求进行加密，他们可以使用相应的私钥对你的请求进行解密和检查（甚至修改），然后将其发送到预定的位置。他们可能不会。但他们可以。</p><p>顺便说一句，这也是你<a href="http://nickfishman.com/post/50557873036/reverse-engineering-native-apps-by-intercepting-network" target="_blank" rel="noopener">使用代理检查和修改 iPhone 应用发出的本来无法访问的 HTTPS 请求</a>的方法。</p><h3 id="4-3-那么-Lavabit-和-FBI-之间发生了什么？"><a href="#4-3-那么-Lavabit-和-FBI-之间发生了什么？" class="headerlink" title="4.3 那么 Lavabit 和 FBI 之间发生了什么？"></a>4.3 那么 Lavabit 和 FBI 之间发生了什么？</h3><p>Lavabit 是爱德华-斯诺登在 2013 年 NSA 泄密疯狂期间的超级安全电子邮件提供商。正如我们所看到的，任何数量的标准黑客技术都无法让 FBI 看到 Lavabit 和其客户之间的任何数据。没有 Lavabit SSL 证书的私钥，该机构就完蛋了。然而，一位乐于助人的美国法官告诉 Lavabit 的创始人 Ladar Levison，他必须交出这个密钥，实际上给了 FBI 自由窥探流量的权力。莱维森勇敢地试图拖延时间，交出了 <a href="https://www.techdirt.com/articles/20131002/17443624734/lavabit-tried-giving-feds-its-ssl-key-11-pages-4-point-type-feds-complained-that-it-was-illegible.shtml" target="_blank" rel="noopener">11 页 4 号字体的 2,560 个字符的密钥</a>，但却遭到了命令，要求他以有用的格式交出密钥，否则将面临每天 5,000 美元的罚款，直到他交出为止。</p><p>一旦他遵守规定，Lavabit 的 CA GoDaddy 就撤销了证书，（正确地）认为它已被破坏。这将 Lavabit 证书添加到证书撤销列表（CRL）中，这是一个客户不应再信任的证书列表，以提供安全的连接。篡改、自签或其他不可信的证书会导致浏览器显示一个大的红色错误信息，并阻止或直接禁止用户的进一步行动。不幸的是，浏览器将继续信任一个被破坏的证书，直到他们拉出最新的 CRL 更新，这个过程显然<a href="http://news.netcraft.com/archives/2013/05/13/how-certificate-revocation-doesnt-work-in-practice.html" target="_blank" rel="noopener">在实践中是不完美的</a>。</p><h2 id="5-结论"><a href="#5-结论" class="headerlink" title="5. 结论"></a>5. 结论</h2><p>HTTPS 并不是牢不可破的，SSL 协议也必须不断发展，因为针对它的新的攻击<a href="https://en.wikipedia.org/wiki/Transport_Layer_Security#Attacks_against_TLS.2FSSL" target="_blank" rel="noopener">被发现并被压制</a>。但它仍然是一种令人印象深刻的强大的传输秘密数据的方式，而不会在乎谁看到你的信息。当然，这里还有许多实施细节没有提到，比如握手信息的确切格式和顺序，简略的握手以获取最近的会话，而不必重新协商密钥和密码套件，以及在每个阶段有许多不同的加密选项。要记住的关键是，虽然 HTTPS 能保证数据在传输过程中的安全，但它绝对不能保护你（作为用户或开发者）免受 XSS 或数据库泄漏或任何其他事情的影响。庆幸有它在背后支持你，但要保持警惕。用威尔-史密斯的不朽名言：”在阴影中行走，在沉默中移动，防范地外暴力。”</p><p>如果你喜欢这个，你可能会喜欢我<a href="https://robertheaton.com/2015/04/06/the-ssl-freak-vulnerability/" target="_blank" rel="noopener">解释 2015 年 SSL 中 FREAK 漏洞细节的文章</a>。</p><p>原文：<a href="https://robertheaton.com/2014/03/27/how-does-https-actually-work/#:~:text=HTTPS%20takes%20the%20well-known%20and%20understood%20HTTP%20protocol%2C,that%20encrypts%20and%20decrypts%20their%20requests%20and%20responses." target="_blank" rel="noopener">How does HTTPS actually work?</a></p><p>译者：evan</p>]]></content>
      
      
      <categories>
          
          <category> tech </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 翻译 </tag>
            
            <tag> https </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>invest web团队工作流 -- 关于 git flow、代码校验、单元测试、持续集成的结合</title>
      <link href="/2020/11/25/invest-web-dev-flow/"/>
      <url>/2020/11/25/invest-web-dev-flow/</url>
      
        <content type="html"><![CDATA[<!-- <img src="/2020/11/25/invest-web-dev-flow/unit-test-running.gif" alt="unit-test-running.gif" title=""> --><img src="/2020/11/25/invest-web-dev-flow/invest_git_flow.png" alt="invest_git_flow.png" title><a id="more"></a><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><ul><li>原 git 开发模式的问题<ul><li>关键分支未收到严格保护，代码 review 未收到严格约束</li><li>sit、uat、master 分支管理模式，会导致代码合并风险加大，测试版本和发布版本差异过大</li></ul></li><li>各个项目代码风格不统一</li><li>特性验证的问题<ul><li>开发人员的开发、上线过程，可以概括为 coding-&gt;testing-&gt;coding-&gt;testing 循环；随着项目复杂度越来越高，testing 的成本越来越大</li><li>复杂度到达一定程度后，testing 成本会大到影响正常迭代</li><li>代码 review 与 merge 操作，会对开发人员带来越来越大的心智负担</li><li>项目特性越来越多，越来越无法重构</li></ul></li><li>开发约束问题<ul><li>本地开发可以绕过约束</li></ul></li><li>因为上述问题，进而进行了 git 开发模式的调整，代码校验与单元测试的添加，持续集成的推进</li></ul><h2 id="git-开发模式"><a href="#git-开发模式" class="headerlink" title="git 开发模式"></a>git 开发模式</h2><ul><li>当前 git 分支流推进是这个模式</li></ul><img src="/2020/11/25/invest-web-dev-flow/invest_git_flow.png" alt="invest_git_flow.png" title><ul><li>里面涉及 4 种分支与两种角色</li></ul><h3 id="角色"><a href="#角色" class="headerlink" title="角色"></a>角色</h3><ul><li>owner/master：对 merge request 单进行审核，在 master 分支上执行发布前的 git merge –squash 操作，可推送 master 分支、迭代分支、开发分支</li><li>develop：开发分支负责人，可推送开发分支、迭代分支</li></ul><h3 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h3><ul><li>master：长期存在，存放生产可靠代码，可以被 master 角色 push，可以被 master 角色 merge</li><li>迭代分支：在迭代期存在，存放当次迭代的可测试代码，可以被 develop 角色 push，可以被 develop 角色 merge，命名实例：iter/yantianyu/202009/add_logs</li><li>开发分支：在迭代期存在，存放当次迭代中具体需求实现代码，可以被 develop 角色 push，可以被 develop 角色 merge，合并入迭代分支后会被删除，命名实例：feature/yantianyu/202009/add_logs</li><li>紧急补丁分支：非常规迭代期中存在，存放紧急修复代码，合并入 master 分支后被删除，命名实例：hotfix/yantianyu/202009/passport_fix</li></ul><h3 id="实施操作"><a href="#实施操作" class="headerlink" title="实施操作"></a>实施操作</h3><ul><li>迭代开始前，迭代开发负责人/项目开发负责人 从 master 拉出迭代分支（比如 iter/jack/202008/add_logs）</li><li>本次迭代中，各需求开发负责人从迭代分支上拉出自己的开发分支</li><li>迭代分支根据实际情况把最新的 master 分支 rebase 进来（项目发版后执行 rebase 操作）</li><li>具体开发负责人根据实际情况把最新的 iter 分支 rebase 进来</li><li>各需求开发完成后，分支通过 merge request 合并入迭代分支，然后使用迭代分支进行提测，其中 merge request 单作为提测单中的 code review 物料；开发分支合并入迭代分支后，需要被删除，开发人员在迭代分支中拉出新开发分支。GIT 合并多个 commit 命令行操作</li><li>上线阶段，迭代分支根据实际情况判断是否需要 rebase master 分支，确保迭代分支合并入 master 分支时没有冲突。然后提交 iter 分支合并入 master 分支的 mr</li></ul><h3 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h3><ul><li>基本概念：master 分支是迭代分支、开发分支、紧急补丁分支的上游分支，迭代分支是开发分支的上游分支。紧急补丁分支不是迭代分支的下游分支</li><li>上游分支获取下游分支代码，使用 merge 操作，比如 master 分支获取 iter/yantianyu/202009/add_logs 分支代码。在当前规范下：<ul><li>master 分支获取 iter 分支代码，由 master 角色在 master 分支上执行 git merge –squash iter，提交后推送至远程。这样操作的目的，是保持 master 分支上的节点清晰明了</li><li>iter 分支获取 feature 分支代码，通过提交 merge quest 单完成，且 merge quest 单完成后，及时通知统一迭代分支下各个开发分支负责人，及时 把自身的开发分支 rebase 至迭代分支的最新节点。这样操作的目的，是为了保持迭代分支中的增量代码，始终被 review 过，且产生一个 code review 记录</li></ul></li><li>下游分支获取上游分支代码，使用 rebase 操作，比如开发分支 feature/tianyu.yan/202008/xxxx 获取 iter/202008/xxxx 分支代码。由开发人员自行在开发分支上，执行 git rebase iter/202008/xxxx</li></ul><h3 id="code-review"><a href="#code-review" class="headerlink" title="code review"></a>code review</h3><ul><li>使用 mr 单进行 code review, 以下是 mr 单模版</li><li>mr 单会带着 CI 执行结果，CI 运行不成功，则 MR 单不可合并</li><li>.gitlab/merge_request_templates/BUG_FIX.md</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">### 这个 PR 做了</span><br><span class="line"></span><br><span class="line">&lt;!-- 列表 --&gt;</span><br><span class="line"></span><br><span class="line">1. xxx</span><br><span class="line">2. xxx</span><br><span class="line">3. 。。。</span><br><span class="line"></span><br><span class="line">### 自测报告</span><br><span class="line"></span><br><span class="line">| 模块 | 场景 | 表现 | 结果 |</span><br><span class="line">| ---- | ---- | ---- | ---- |</span><br><span class="line">| ?    | ?    | ?    | ok?  |</span><br><span class="line"></span><br><span class="line">### 这个 PR 涉及什么模块</span><br><span class="line"></span><br><span class="line">&lt;!-- 请填写涉及的模块 --&gt;</span><br><span class="line"></span><br><span class="line">### 其它需要 Reviewer 知晓的内容：</span><br><span class="line"></span><br><span class="line">&lt;!-- 其它需要补充的内容 --&gt;</span><br></pre></td></tr></table></figure><ul><li>.gitlab/merge_request_templates/MERGE_REQUEST.md</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">### 这个 PR 做了 BUG FIX</span><br><span class="line"></span><br><span class="line">### 自测报告</span><br><span class="line"></span><br><span class="line">&lt;!-- 请填写禅道中真实的 Bug ID --&gt;</span><br><span class="line"></span><br><span class="line">| BUG ID                                           | 表现 | 结果 |</span><br><span class="line">| ------------------------------------------------ | ---- | :--: |</span><br><span class="line">| [xxx](http://zen.in.za/zentao/bug-view-xxx.html) | ?    | ok?  |</span><br><span class="line"></span><br><span class="line">### 这个 PR 涉及什么模块</span><br><span class="line"></span><br><span class="line">&lt;!-- 请填写涉及的模块 --&gt;</span><br></pre></td></tr></table></figure><h3 id="git-提交信息规范"><a href="#git-提交信息规范" class="headerlink" title="git 提交信息规范"></a>git 提交信息规范</h3><ul><li>git 提交信息检查会在 pre-commit 阶段进行</li><li>例子</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &apos;feat: add footer&apos;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &apos;docs&apos;, // Adds or alters documentation. 仅仅修改了文档，比如README, CHANGELOG, CONTRIBUTE等等</span><br><span class="line">  &apos;chore&apos;, // Other changes that don&apos;t modify src or test files. 改变构建流程、或者增加依赖库、工具等</span><br><span class="line">  &apos;feat&apos;, // Adds a new feature. 新增feature</span><br><span class="line">  &apos;fix&apos;, // Solves a bug. 修复bug</span><br><span class="line">  &apos;merge&apos;, // Merge branch ? of ?.</span><br><span class="line">  &apos;perf&apos;, // Improves performance. 优化相关，比如提升性能、体验</span><br><span class="line">  &apos;refactor&apos;, // Rewrites code without feature, performance or bug changes. 代码重构，没有加新功能或者修复bug</span><br><span class="line">  &apos;revert&apos;, // Reverts a previous commit. 回滚到上一个版本</span><br><span class="line">  &apos;style&apos;, // Improves formatting, white-space. 仅仅修改了空格、格式缩进、逗号等等，不改变代码逻辑</span><br><span class="line">  &apos;test&apos;, // Adds or modifies tests. 测试用例，包括单元测试、集成测试等</span><br><span class="line">],</span><br></pre></td></tr></table></figure><h2 id="代码检查"><a href="#代码检查" class="headerlink" title="代码检查"></a>代码检查</h2><ul><li>代码检查，使用统一 eslint 规则 eslint-config-zati</li><li>代码检查指令会在 pre-commit 阶段、CI 阶段运行</li><li>pre-commit 阶段可被绕过，但 CI 阶段不可绕过</li><li>CI 运行不通过，则此节点代码不可被合并入迭代分支</li></ul><h2 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h2><img src="/2020/11/25/invest-web-dev-flow/unit-test-cost.jpg" alt="unit-test-cost.jpg" title><ul><li>单元测试的确需要一定的成本，以 invest h5 项目实施情况来看，要达到 60%的测试覆盖率，测试代码与生产代码开发成本大致是 1:2</li></ul><h3 id="单元测试落地"><a href="#单元测试落地" class="headerlink" title="单元测试落地"></a>单元测试落地</h3><img src="/2020/11/25/invest-web-dev-flow/unit-test-running.gif" alt="unit-test-running.gif" title><ul><li><p>针对上述问题对应的测试用例，基本可以分为以下几种：</p><ul><li>纯函数测试：测试工具类纯函数是否符合预期</li><li>展示性测试：用于测试组件内容是否正常展示，展示的各项内容是否完整、正确</li><li>交互性测试：用于测试组件涉及的交互，是否可以正常输出，正常输出，并对输入、输出做校验</li><li>快照测试：快照测试让开发人员明确自身对组件的修改，会有多大的波及度，具体可看<a href="https://jestjs.io/docs/en/snapshot-testing" target="_blank" rel="noopener">Snapshot Testing</a></li></ul></li><li><p>其中交互测试是成本最高的测试，可以再细分为下面几种：</p><ul><li>涉及 dom 操作的交互测试</li><li>涉及 bom 操作的交互测试</li><li>涉及 service api 的操作交互测试</li></ul></li><li><p>另外，针对当前团队技术栈，还需要在 redux 场景下进行测试</p></li><li><p>上述测试用例具体实践方式，可以看 <a href="https://evanhongyousan.github.io/2020/10/11/react-react-router-react-redux-unit-test/">react+react-router+react-redux 项目单元测试实践记录</a></p></li><li><p>在具体实际中，针对一个组件的测试代码，其交互测试与其他测试测试代码对比，一般会是 6:1</p></li></ul><h3 id="测试覆盖检查"><a href="#测试覆盖检查" class="headerlink" title="测试覆盖检查"></a>测试覆盖检查</h3><ul><li><p>测试覆盖概念说明</p><ul><li>行覆盖率（line coverage）</li><li>函数覆盖率（function coverage）</li><li>分支覆盖率（branch coverage）</li><li>语句覆盖率（statement coverage）</li></ul></li><li><p>这是目前全量单元测试覆盖率限制，各个指标未满足覆盖度，则单元测试指令返回失败</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">coverageThreshold: &#123;</span><br><span class="line">  global: &#123;</span><br><span class="line">    branches: 50,</span><br><span class="line">    functions: 60,</span><br><span class="line">    lines: 65,</span><br><span class="line">    statements: 65</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>当前 invest h5 项目测试覆盖率情况</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">=============================== Coverage summary ===============================</span><br><span class="line">Statements   : 69.52% ( 1909/2746 )</span><br><span class="line">Branches     : 53.2% ( 623/1171 )</span><br><span class="line">Functions    : 65.72% ( 508/773 )</span><br><span class="line">Lines        : 69.97% ( 1859/2657 )</span><br><span class="line">================================================================================</span><br></pre></td></tr></table></figure><ul><li>可以通过详细报告，查看各文件测试覆盖情况<img src="/2020/11/25/invest-web-dev-flow/test_coverage.gif" alt="test_coverage.gif" title></li></ul><h2 id="CI-执行结果推送"><a href="#CI-执行结果推送" class="headerlink" title="CI 执行结果推送"></a>CI 执行结果推送</h2><img src="/2020/11/25/invest-web-dev-flow/pipeline-email.png" alt="pipeline-email.png" title><h2 id="当前-git-工作流、代码校验、单元测试、持续集成的结合"><a href="#当前-git-工作流、代码校验、单元测试、持续集成的结合" class="headerlink" title="当前 git 工作流、代码校验、单元测试、持续集成的结合"></a>当前 git 工作流、代码校验、单元测试、持续集成的结合</h2><img src="/2020/11/25/invest-web-dev-flow/ivnest_web_work_flow.png" alt="ivnest_web_work_flow.png" title><h3 id="待完成事项"><a href="#待完成事项" class="headerlink" title="待完成事项"></a>待完成事项</h3><ul><li>CI 还未进行提交信息校验和分支名校验</li><li>接入统一 code lint 规则 eslint-config-zati</li><li>CI 根据最新 gitlab 特性进行调整</li><li>对接 CD</li></ul>]]></content>
      
      
      <categories>
          
          <category> tech </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gitlab CI </tag>
            
            <tag> unit test </tag>
            
            <tag> CI </tag>
            
            <tag> git flow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单元测试与持续集成实践记录</title>
      <link href="/2020/11/19/unit-test-and-gitlab-ci/"/>
      <url>/2020/11/19/unit-test-and-gitlab-ci/</url>
      
        <content type="html"><![CDATA[<img src="/2020/11/19/unit-test-and-gitlab-ci/top.png" alt="top.png" title><a id="more"></a><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><ul><li>特性验证的问题<ul><li>开发人员在进行开发、上线过程中，基本可以认为是 coding-&gt;testing-&gt;coding-&gt;testing 的循环。</li><li>随着项目复杂度越来越高，testing 的成本自然越来越大。</li><li>复杂度到达一定程度后，代码变更导致的 testing 成本会大到影响正常迭代，此时项目无法维护</li><li>代码 review 与 merge 操作，会对开发人员带来越来越大的心智负担</li><li>随着时间的推移，项目特性越来越多，越来越无法重构</li></ul></li><li>重复行为问题<ul><li>各项目测试环境发布次数不少，带来不少重复操作</li></ul></li><li>开发约束问题<ul><li>本地开发可以绕过约束 – 需要提供线上约束</li></ul></li></ul><img src="/2020/11/19/unit-test-and-gitlab-ci/too-busy-to-improve.png" alt="too-busy-to-improve.png" title><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><ul><li>针对 coding 和 testing：coding 是不明确的工作，每次都会有不一样的内容；而 testing 则是明确的工作，每次都是重复工作</li><li>则针对 testing 的自动化，可以极大的释放生产力</li></ul><h2 id="单元测试落地"><a href="#单元测试落地" class="headerlink" title="单元测试落地"></a>单元测试落地</h2><img src="/2020/11/19/unit-test-and-gitlab-ci/unit-test-cost.jpg" alt="unit-test-cost.jpg" title><ul><li>给项目添加单元测试，并不单纯只是工具使用上的变化和代码量的增加，更为本质的变化，是代码设计上的变化、开发工作模式的变化</li><li>上述变化，基本可以用一个词描述 – 学习成本</li></ul><h3 id="前端项目的单元测试落地针对的实际问题"><a href="#前端项目的单元测试落地针对的实际问题" class="headerlink" title="前端项目的单元测试落地针对的实际问题"></a>前端项目的单元测试落地针对的实际问题</h3><ul><li>在实现 web 前端应用前，至少会考虑几个要点<ul><li>应用运行环境：pc 浏览器？移动端浏览器？app 内 webview？</li><li>应用展示内容：banner？文案？按钮？图片？等等</li><li>应用交互：点击按钮发生什么？输入文字发生什么？等等</li></ul></li><li>故对于 web 前端应用，其项目代码中，除了纯函数部分，还充斥着大量的 io 操作（service api 调用、bom api 调用、dom api）调用</li><li>上述实现，就是一个个实际的测试用例</li></ul><h3 id="具体实践"><a href="#具体实践" class="headerlink" title="具体实践"></a>具体实践</h3><ul><li><p>针对上述问题对应的测试用例，基本可以分为以下几种：</p><ul><li>纯函数测试：测试工具类纯函数是否符合预期</li><li>展示性测试：用于测试组件内容是否正常展示，展示的各项内容是否完整、正确</li><li>交互性测试：用于测试组件涉及的交互，是否可以正常输出，正常输出，并对输入、输出做校验</li><li>快照测试：快照测试让开发人员明确自身对组件的修改，会有多大的波及度，具体可看<a href="https://jestjs.io/docs/en/snapshot-testing" target="_blank" rel="noopener">Snapshot Testing</a></li></ul></li><li><p>其中交互测试是成本最高的测试，可以再细分为下面几种：</p><ul><li>涉及 dom 操作的交互测试</li><li>涉及 bom 操作的交互测试</li><li>涉及 service api 的操作交互测试</li></ul></li><li><p>另外，针对当前团队技术栈，还需要在 redux 场景下进行测试</p></li><li><p>上述测试用例具体实践方式，可以看 <a href="https://evanhongyousan.github.io/2020/10/11/react-react-router-react-redux-unit-test/">react+react-router+react-redux 项目单元测试实践记录</a></p></li><li><p>在具体实际中，针对一个组件的测试代码，其交互测试与其他测试测试代码对比，一般会是 6:1</p></li></ul><h3 id="成本与收益"><a href="#成本与收益" class="headerlink" title="成本与收益"></a>成本与收益</h3><ul><li><p>通过上面的论述，基本可以得出单元测试具体的成本描述</p><ul><li>基于当前技术栈单元测试学习成本</li><li>测试代码开发成本</li></ul></li><li><p>另外也有单元测试具体的收益描述</p><ul><li>测试代码投入成本越高，则验证的成本越低</li><li>项目迭代过程中，保证新特性不影响已有特性</li><li>项目重构过程中，保证已有特性不受影响</li></ul></li></ul><h2 id="持续集成落地"><a href="#持续集成落地" class="headerlink" title="持续集成落地"></a>持续集成落地</h2><ul><li>持续集成投入很低，但收益很高</li><li>持续集成，一般与 git 工作流结合使用，主要完成以下几个特性<ul><li>代码推送后，完成 code lint\unit test，给出报告</li><li>代码请求合并前，完成 code lint\unit test，给出报告，有效减少 review 人的心智负担</li><li>代码 review 完成后，进行自动化部署</li></ul></li></ul><img src="/2020/11/19/unit-test-and-gitlab-ci/top.png" alt="top.png" title><h3 id="具体实践-1"><a href="#具体实践-1" class="headerlink" title="具体实践"></a>具体实践</h3><ul><li>当前团队使用 gitlab 服务进行版本管理，则可以使用 gitlab ci 对接 gitlab runner 完成持续集成</li></ul><h4 id="gitlab-runner-安装"><a href="#gitlab-runner-安装" class="headerlink" title="gitlab-runner 安装"></a>gitlab-runner 安装</h4><ul><li>申请好机器后，在机器下载的 gitlab runner</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo wget -O /usr/local/bin/gitlab-runner https://gitlab-runner-downloads.s3.amazonaws.com/latest/binaries/gitlab-runner-linux-386</span><br></pre></td></tr></table></figure><ul><li>给 Gitlab-runner 添加执行权限：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod +x /usr/local/bin/gitlab-runner</span><br></pre></td></tr></table></figure><ul><li>创建一个 GitLab CI 用户</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo useradd --comment &apos;GitLab Runner&apos; --create-home gitlab-runner --shell /bin/bash</span><br></pre></td></tr></table></figure><ul><li>安装并启动服务</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo gitlab-runner install --user=gitlab-runner --working-directory=/home/gitlab-runner</span><br><span class="line">sudo gitlab-runner start</span><br></pre></td></tr></table></figure><h4 id="gitlab-runner-注册"><a href="#gitlab-runner-注册" class="headerlink" title="gitlab-runner 注册"></a>gitlab-runner 注册</h4><ul><li><p>runner 启动后，需要注册入 gitlab 服务中</p></li><li><p>开始注册</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gitlab-runner register</span><br></pre></td></tr></table></figure><ul><li>填入 Gitlab URL：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Please enter the gitlab-ci coordinator URL (e.g. https://gitlab.com )</span><br></pre></td></tr></table></figure><ul><li>然后输入注册 Runner 所需要的 token<ul><li>token 会分为两种：Shared Runner（针对所有项目），Specific Runner （针对特定项目）</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Please enter the gitlab-ci token for this runner</span><br></pre></td></tr></table></figure><ul><li>输入 Runner 的 tags</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Please enter the gitlab-ci tags for this runner (comma separated)</span><br><span class="line">fe-ci</span><br></pre></td></tr></table></figure><ul><li>选择 Runner 的执行者</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Please enter the executor: ssh, docker+machine, docker-ssh+machine, kubernetes, docker, parallels, virtualbox, docker-ssh, shell:</span><br><span class="line">shell</span><br></pre></td></tr></table></figure><ul><li>如果一切正常</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Runner registered successfully. Feel free to start it, but if it&apos;s running already the config should be automatically reloaded!</span><br></pre></td></tr></table></figure><ul><li>最后回到 gitlab，使用 admin 权限账号管理 runner，找到 ‘fe-ci’ runner，在 runner 中对对应项目启用，则 runner 配置完成</li></ul><h4 id="gitlab-ci-yml-文件"><a href="#gitlab-ci-yml-文件" class="headerlink" title=".gitlab-ci.yml 文件"></a>.gitlab-ci.yml 文件</h4><ul><li>在项目根目录下创建 .gitlab-ci.yml 文件。以下是一份实例</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">stages:</span><br><span class="line">  - install</span><br><span class="line">  - codelint</span><br><span class="line">  - test</span><br><span class="line"></span><br><span class="line">cache:</span><br><span class="line">  paths:</span><br><span class="line">    - node_modules/</span><br><span class="line"></span><br><span class="line">install:node_modules:</span><br><span class="line">  stage: install</span><br><span class="line">  script:</span><br><span class="line">    - npm install</span><br><span class="line">  tags:</span><br><span class="line">    - fe-ci</span><br><span class="line"></span><br><span class="line">codelint:</span><br><span class="line">  stage: codelint</span><br><span class="line">  script:</span><br><span class="line">    - npm run lint</span><br><span class="line">  tags:</span><br><span class="line">    - fe-ci</span><br><span class="line"></span><br><span class="line">test:coverage:</span><br><span class="line">  stage: test</span><br><span class="line">  script:</span><br><span class="line">    - npm run test:coverage</span><br><span class="line">  tags:</span><br><span class="line">    - fe-ci</span><br></pre></td></tr></table></figure><ul><li>可以看到 ci 脚本分为三个阶段<ul><li>install: npm install – 安装依赖（node_modules）</li><li>codelint: npm run lint – 代码校验</li><li>test:coverage : npm run test:coverage – 全量单元测试并输出测试覆盖情况</li></ul></li><li><code>cache: ...</code> 部分表示 node_modules 需要缓存</li><li><code>tags: - fe-ci</code> 表示此阶段指定使用 tags 为 ‘fe-ci’ 的 runner 进行执行</li></ul><h4 id="配置完成后实际运行"><a href="#配置完成后实际运行" class="headerlink" title="配置完成后实际运行"></a>配置完成后实际运行</h4><ul><li>代码推送后自动运行 code lint 和 unit test<img src="/2020/11/19/unit-test-and-gitlab-ci/ci_run_1.png" alt="ci_run_1.png" title></li><li>在 merge request settings 中打开 pipeline 相关的约束<img src="/2020/11/19/unit-test-and-gitlab-ci/mergeSetting.png" alt="mergeSetting.png" title></li><li>则后续的 merge request 单，会需要 pipeline 运行成功后才能进行合并<img src="/2020/11/19/unit-test-and-gitlab-ci/mr_result.png" alt="mr_result.png" title></li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://evanhongyousan.github.io/2020/10/11/react-react-router-react-redux-unit-test/">react+react-router+react-redux 项目单元测试实践记录</a><br><a href="https://juejin.cn/post/6844903826256822285" target="_blank" rel="noopener">Gitlab 自动部署之二：安装 GITLAB-RUNNER</a></p>]]></content>
      
      
      <categories>
          
          <category> tech </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
            <tag> jest </tag>
            
            <tag> enzyme </tag>
            
            <tag> react-testing-library </tag>
            
            <tag> unit test </tag>
            
            <tag> CI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【翻译】enzyme 和 react-testing-library 之间的不同</title>
      <link href="/2020/10/30/Difference-between-enzyme-and-react-testing-library/"/>
      <url>/2020/10/30/Difference-between-enzyme-and-react-testing-library/</url>
      
        <content type="html"><![CDATA[<img src="/2020/10/30/Difference-between-enzyme-and-react-testing-library/1.png" alt="1.png" title><a id="more"></a><h2 id="Enzyme"><a href="#Enzyme" class="headerlink" title="Enzyme"></a>Enzyme</h2><p>Enzyme 是由 Airbnb 推出的流行的测试库。它已经发布了很长一段时间，且 react 官方文档建议减少使用 Enzyme 作为编写测试用例的模板。Enzyme 的 API 旨在通过模仿 jQuery 的 API 来实现直观和灵活的 DOM 操作和遍历。</p><h2 id="React-Testing-Library"><a href="#React-Testing-Library" class="headerlink" title="React Testing Library"></a>React Testing Library</h2><p>React Testing Library – 一个非常通用的名字，它作为一个测试库，旨在解决与其他测试库不同的用例。React Testing Library 迫使你编写不脆弱的测试 – 测试并不是测试具体实现，而是测试组件的功能。它鼓励编写代码的最佳实践，并使代码具备可测试性，和测试正确的条件。</p><p>更新–React Testing Library 现在改名为@testing-library/react。</p><p>让我们来看看 Enzyme 与@testing-library/react 的一些区别。</p><h2 id="Case-1-设置"><a href="#Case-1-设置" class="headerlink" title="Case 1 - 设置"></a>Case 1 - 设置</h2><p>在 Enzyme 中，你需要配置适配器，使其与 React 16 一起工作。还有其他的第三方适配器可以使 Enzyme 与这些库一起工作。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Enzyme <span class="keyword">from</span> <span class="string">"enzyme"</span>;</span><br><span class="line"><span class="keyword">import</span> Adapter <span class="keyword">from</span> <span class="string">"enzyme-adapter-react-16"</span>;</span><br><span class="line"></span><br><span class="line">Enzyme.configure(&#123; <span class="attr">adapter</span>: <span class="keyword">new</span> Adapter() &#125;);</span><br></pre></td></tr></table></figure><p>在 @testing-library/react 中，不需要太多的设置。你必须安装 @testing-library/react npm 模块，然后就可以了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev react-testing-library</span><br></pre></td></tr></table></figure><h2 id="Case-2-概念差异"><a href="#Case-2-概念差异" class="headerlink" title="Case 2 概念差异"></a>Case 2 概念差异</h2><p>当你在 Enzyme 中编写测试时，你有方法检查类的状态属性，检查传递给组件的 props 是什么。但是如果你是用道具和状态来测试组件，那就意味着你的测试很脆弱。如果明天有人改变了状态变量的名称，那么你的测试就会失败。即使组件的功能是一样的，只是因为组件中使用的状态变量名重名了，测试就会失败。由此可见单元测试的脆性。</p><p>而@testing-library/react 没有测试状态或道具的方法。相反，它测试的是 dom，也就是用户正在与之交互的东西。</p><p>@testing-library/react 的指导原则之一是</p><p>如果涉及到渲染组件，它处理的是 DOM 节点而不是组件实例，也不应该鼓励处理组件实例。</p><p>所以，你没有得到组件实例的方法，也没有自己调用组件的方法。相反，你就像用户一样在 DOM 上工作。想测试对服务器的异步函数调用吗？从 DOM 中获取按钮，点击它，模拟 API，然后在 DOM 中检查结果。</p><h2 id="Case-3-没有强制更新-或强制重新渲染组件"><a href="#Case-3-没有强制更新-或强制重新渲染组件" class="headerlink" title="Case 3 没有强制更新()或强制重新渲染组件"></a>Case 3 没有强制更新()或强制重新渲染组件</h2><p>在 Enzyme 中，你有 ForceUpdate 方法来重新渲染组件。如果你在组件内部窥探一些箭头函数（组件内部的箭头函数是错误的），那么你将不得不强制更新组件。</p><p>在@testing-library/react 中，你没有任何这样的方法。相反，它只使用 DOM 进行测试。</p><h2 id="Case-4-没有浅层或深层的渲染"><a href="#Case-4-没有浅层或深层的渲染" class="headerlink" title="Case 4 没有浅层或深层的渲染"></a>Case 4 没有浅层或深层的渲染</h2><p>在@testing-library/react 中，你没有直接的方法来测试组件的实例。所以，在 React 测试库中，没有对组件进行浅层或深层的渲染。</p><h2 id="Case-5-约束性"><a href="#Case-5-约束性" class="headerlink" title="Case 5 约束性"></a>Case 5 约束性</h2><p>Enzyme 不是一个强约束（opionated）的库，它提供了访问组件内部的方法，即组件的实例方法、状态和道具。它提供了访问组件内部的方法，即组件的方法、状态和属性。但是 Enzyme 也提供了访问组件的 DOM 的方法，所以通过使用 Enzyme，你可以选择测试组件的内部结构，即组件的方法，状态和属性。</p><p>所以通过使用 Enzyme，你可以选择测试组件的内部，也可以选择不测试。Enzyme 并不强制执行任何关于你应该如何测试组件的意见。</p><p>@testing-library/react 是强约束（opionated）的库。它只提供给你渲染组件和访问 DOM 的方法，不提供访问组件的方法。它不提供访问组件内部的方法。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>虽然@testing-library/react 的目标是与 Enzyme 竞争，并鼓励你从用户的角度编写可测试的代码和对应测试，但它们都有用例。你不能用一个代替另一个。有时你确实需要测试组件内部的状态变化或功能，尽管从用户的角度来看，它可能没有意义。在这些情况下，需要用 Enzyme 来测试实例方法。React Testing Library 很适合测试组件的 DOM，因为它允许你像用户使用它一样进行测试。</p><p>原文: <a href="https://techdoma.in/react-js-testing/difference-between-enzyme-and-react-testing-library" target="_blank" rel="noopener">Difference between enzyme and react-testing-library</a></p><p>译者: Evan</p>]]></content>
      
      
      <categories>
          
          <category> tech </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 翻译 </tag>
            
            <tag> react </tag>
            
            <tag> 自动化测试 </tag>
            
            <tag> enzyme </tag>
            
            <tag> react-testing-library </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react+react-router+react-redux项目单元测试实践记录</title>
      <link href="/2020/10/11/react-react-router-react-redux-unit-test/"/>
      <url>/2020/10/11/react-react-router-react-redux-unit-test/</url>
      
        <content type="html"><![CDATA[<img src="/2020/10/11/react-react-router-react-redux-unit-test/1.png" alt="1.png" title><p>给项目添加测试，并不单纯只是工具使用上的变化和代码量的增加，更为本质的变化，是代码设计上的变化、开发工作模式的变化</p><p>ps: 在开始使用 typescript 的类型约束后，也会有上述变化产生</p><a id="more"></a><h2 id="前置知识要求"><a href="#前置知识要求" class="headerlink" title="前置知识要求"></a>前置知识要求</h2><ul><li>熟悉 <a href="https://reactjs.org/" target="_blank" rel="noopener">react</a></li><li>熟悉 <a href="https://jestjs.io/" target="_blank" rel="noopener">jest</a></li><li>熟悉 <a href="https://github.com/enzymejs/enzyme" target="_blank" rel="noopener">enzyme</a></li></ul><h2 id="总体分析"><a href="#总体分析" class="headerlink" title="总体分析"></a>总体分析</h2><h3 id="执行单元测试主要面对的问题"><a href="#执行单元测试主要面对的问题" class="headerlink" title="执行单元测试主要面对的问题"></a>执行单元测试主要面对的问题</h3><ul><li>在实现 web 前端应用前，至少会考虑几个要点<ul><li>应用运行环境：pc 浏览器？移动端浏览器？app 内 webview？</li><li>应用展示内容：banner？文案？按钮？图片？等等</li><li>应用交互：点击按钮发生什么？输入文字发生什么？等等</li></ul></li><li>故对于 web 前端应用，其项目代码中，除了纯函数部分，还充斥着大量的 io 操作（service api 调用、bom api 调用、dom api）调用</li><li>下面就针对上述问题，依次处理</li></ul><h2 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h2><h3 id="纯函数测试"><a href="#纯函数测试" class="headerlink" title="纯函数测试"></a>纯函数测试</h3><ul><li>对于纯函数，只需要关注输入与输出即可</li><li>通常项目中 utils 文件夹中的都是纯函数</li></ul><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><ul><li>utils/index.tsx</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a: number, b: number</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> &#123; sum &#125;;</span><br></pre></td></tr></table></figure><ul><li>utils/index.test.tsx</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; sum &#125; <span class="keyword">from</span> <span class="string">"./index"</span>;</span><br><span class="line"></span><br><span class="line">it(<span class="string">"test sum"</span>, () =&gt; &#123;</span><br><span class="line">  expect(sum(<span class="number">1</span>, <span class="number">2</span>)).toEqual(<span class="number">3</span>);</span><br><span class="line">  expect(sum(<span class="number">2</span>, <span class="number">3</span>)).toEqual(<span class="number">5</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="页面展示内容测试"><a href="#页面展示内容测试" class="headerlink" title="页面展示内容测试"></a>页面展示内容测试</h3><ul><li>在 react 语境下，页面使用组件进行内容展示</li><li>则开发人员需要以组件未单位进行测试</li></ul><h4 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h4><ul><li>src/components/Banner/index.tsx</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Banner</span>(<span class="params"></span>): <span class="title">JSX</span>.<span class="title">Element</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Banner<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Banner;</span><br></pre></td></tr></table></figure><ul><li>src/components/Banner/index.test.tsx</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> Banner <span class="keyword">from</span> <span class="string">"./index"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; shallow &#125; <span class="keyword">from</span> <span class="string">"enzyme"</span>;</span><br><span class="line"></span><br><span class="line">it(<span class="string">"should render correctly"</span>, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> wrapper = shallow(<span class="xml"><span class="tag">&lt;<span class="name">Banner</span> /&gt;</span></span>);</span><br><span class="line">  expect(wrapper.text()).toContain(<span class="string">"banner"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="交互测试"><a href="#交互测试" class="headerlink" title="交互测试"></a>交互测试</h3><ul><li>界面作为人机交互入口，直接承载用户输入与机器输出</li><li>交互实际上就是用户输入和机器输出的体现</li><li>下面是一个不涉及 io 操作的交互测试</li></ul><h4 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h4><ul><li>src/components/Banner/index.tsx</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState &#125; <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Banner</span>(<span class="params"></span>): <span class="title">JSX</span>.<span class="title">Element</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [text, setText] = useState(<span class="string">"banner"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> clickHandle = (): <span class="function"><span class="params">void</span> =&gt;</span> &#123;</span><br><span class="line">    setText(<span class="string">"clicked"</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &#123;text&#125;</span><br><span class="line">      &lt;button id=<span class="string">"btn"</span> onClick=&#123;clickHandle&#125;&gt;</span><br><span class="line">        click</span><br><span class="line">      &lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Banner;</span><br></pre></td></tr></table></figure><ul><li>src/components/Banner/index.test.tsx</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> Banner <span class="keyword">from</span> <span class="string">"./index"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; shallow &#125; <span class="keyword">from</span> <span class="string">"enzyme"</span>;</span><br><span class="line"></span><br><span class="line">it(<span class="string">"click the button and change text"</span>, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> wrapper = shallow(<span class="xml"><span class="tag">&lt;<span class="name">Banner</span> /&gt;</span></span>);</span><br><span class="line">  expect(wrapper.text()).toContain(<span class="string">"banner"</span>);</span><br><span class="line">  wrapper.find(<span class="string">"#btn"</span>).simulate(<span class="string">"click"</span>);</span><br><span class="line">  expect(wrapper.text()).not.toContain(<span class="string">"banner"</span>);</span><br><span class="line">  expect(wrapper.text()).toContain(<span class="string">"clicked"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="dom-操作交互测试"><a href="#dom-操作交互测试" class="headerlink" title="dom 操作交互测试"></a>dom 操作交互测试</h3><ul><li>涉及 dom 操作、bom 操作、api 操作的部分，可以使用<code>mock</code></li></ul><h4 id="实例-3"><a href="#实例-3" class="headerlink" title="实例"></a>实例</h4><ul><li>src/components/Banner/index.tsx</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState &#125; <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Banner</span>(<span class="params"></span>): <span class="title">JSX</span>.<span class="title">Element</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [text, setText] = useState(<span class="string">"banner"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> clickHandle = (): <span class="function"><span class="params">void</span> =&gt;</span> &#123;</span><br><span class="line">    setText(<span class="string">"clicked"</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &#123;text&#125;</span><br><span class="line">      &lt;button id=<span class="string">"btn"</span> onClick=&#123;clickHandle&#125;&gt;</span><br><span class="line">        click</span><br><span class="line">      &lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">      &lt;button</span></span><br><span class="line"><span class="regexp">        id="jump"</span></span><br><span class="line"><span class="regexp">        onClick=&#123;(): void =&gt; &#123;</span></span><br><span class="line"><span class="regexp">          location.href = "jump success";</span></span><br><span class="line"><span class="regexp">        &#125;&#125;</span></span><br><span class="line"><span class="regexp">      &gt;</span></span><br><span class="line"><span class="regexp">        jump</span></span><br><span class="line"><span class="regexp">      &lt;/</span>button&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default Banner;</span></span><br></pre></td></tr></table></figure><ul><li>src/components/Banner/index.test.tsx</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> Banner <span class="keyword">from</span> <span class="string">"./index"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; shallow &#125; <span class="keyword">from</span> <span class="string">"enzyme"</span>;</span><br><span class="line"></span><br><span class="line">beforeAll(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">Object</span>.defineProperty(<span class="built_in">window</span>, <span class="string">"location"</span>, &#123;</span><br><span class="line">    writable: <span class="literal">true</span>,</span><br><span class="line">    value: &#123;</span><br><span class="line">      href: <span class="string">"mock success"</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">it(<span class="string">"test jump"</span>, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> wrapper = shallow(<span class="xml"><span class="tag">&lt;<span class="name">Banner</span> /&gt;</span></span>);</span><br><span class="line">  expect(<span class="built_in">window</span>.location.href).toBe(<span class="string">"mock success"</span>);</span><br><span class="line">  wrapper.find(<span class="string">"#jump"</span>).simulate(<span class="string">"click"</span>);</span><br><span class="line">  expect(<span class="built_in">window</span>.location.href).toBe(<span class="string">"jump success"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="bom-操作交互测试"><a href="#bom-操作交互测试" class="headerlink" title="bom 操作交互测试"></a>bom 操作交互测试</h3><ul><li>bom 操作和 dom 类似</li></ul><h4 id="实例-4"><a href="#实例-4" class="headerlink" title="实例"></a>实例</h4><ul><li>src/components/Banner/index.tsx</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState &#125; <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Banner</span>(<span class="params"></span>): <span class="title">JSX</span>.<span class="title">Element</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [text, setText] = useState(<span class="string">"banner"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> clickHandle = (): <span class="function"><span class="params">void</span> =&gt;</span> &#123;</span><br><span class="line">    setText(<span class="string">"clicked"</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &#123;text&#125;</span><br><span class="line">      &lt;button id=<span class="string">"btn"</span> onClick=&#123;clickHandle&#125;&gt;</span><br><span class="line">        click</span><br><span class="line">      &lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">      &lt;button</span></span><br><span class="line"><span class="regexp">        id="jump"</span></span><br><span class="line"><span class="regexp">        onClick=&#123;(): void =&gt; &#123;</span></span><br><span class="line"><span class="regexp">          location.href = "jump success";</span></span><br><span class="line"><span class="regexp">        &#125;&#125;</span></span><br><span class="line"><span class="regexp">      &gt;</span></span><br><span class="line"><span class="regexp">        jump</span></span><br><span class="line"><span class="regexp">      &lt;/</span>button&gt;</span><br><span class="line">      &lt;button</span><br><span class="line">        id=<span class="string">"getUserAgent"</span></span><br><span class="line">        onClick=&#123;(): <span class="function"><span class="params">void</span> =&gt;</span> &#123;</span><br><span class="line">          setText(<span class="built_in">window</span>.navigator.userAgent);</span><br><span class="line">        &#125;&#125;</span><br><span class="line">      &gt;</span><br><span class="line">        jump</span><br><span class="line">      &lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Banner;</span><br></pre></td></tr></table></figure><ul><li>src/components/Banner/index.test.tsx</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> Banner <span class="keyword">from</span> <span class="string">"./index"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; shallow &#125; <span class="keyword">from</span> <span class="string">"enzyme"</span>;</span><br><span class="line"></span><br><span class="line">beforeAll(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">Object</span>.defineProperty(<span class="built_in">window</span>, <span class="string">"navigator"</span>, &#123;</span><br><span class="line">    writable: <span class="literal">true</span>,</span><br><span class="line">    value: &#123;</span><br><span class="line">      userAgent: <span class="string">"get userAgent success"</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">it(<span class="string">'click "get useragen"'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> wrapper = shallow(<span class="xml"><span class="tag">&lt;<span class="name">Banner</span> /&gt;</span></span>);</span><br><span class="line">  wrapper.find(<span class="string">"#getUserAgent"</span>).simulate(<span class="string">"click"</span>);</span><br><span class="line">  expect(wrapper.text()).toContain(<span class="string">"get userAgent success"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="service-api-操作交互测试"><a href="#service-api-操作交互测试" class="headerlink" title="service api 操作交互测试"></a>service api 操作交互测试</h3><ul><li>api 相关的 mock 会有一点差异</li></ul><h4 id="实例-5"><a href="#实例-5" class="headerlink" title="实例"></a>实例</h4><ul><li>src/components/Banner/index.tsx</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState &#125; <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; getUserInfo &#125; <span class="keyword">from</span> <span class="string">"@/pages/card-mgmt/api"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Banner</span>(<span class="params"></span>): <span class="title">JSX</span>.<span class="title">Element</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [text, setText] = useState(<span class="string">"banner"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> clickHandle = (): <span class="function"><span class="params">void</span> =&gt;</span> &#123;</span><br><span class="line">    setText(<span class="string">"clicked"</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &#123;text&#125;</span><br><span class="line">      &lt;button id=<span class="string">"btn"</span> onClick=&#123;clickHandle&#125;&gt;</span><br><span class="line">        click</span><br><span class="line">      &lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">      &lt;button</span></span><br><span class="line"><span class="regexp">        id="jump"</span></span><br><span class="line"><span class="regexp">        onClick=&#123;(): void =&gt; &#123;</span></span><br><span class="line"><span class="regexp">          location.href = "jump success";</span></span><br><span class="line"><span class="regexp">        &#125;&#125;</span></span><br><span class="line"><span class="regexp">      &gt;</span></span><br><span class="line"><span class="regexp">        jump</span></span><br><span class="line"><span class="regexp">      &lt;/</span>button&gt;</span><br><span class="line">      &lt;button</span><br><span class="line">        id=<span class="string">"getUserAgent"</span></span><br><span class="line">        onClick=&#123;(): <span class="function"><span class="params">void</span> =&gt;</span> &#123;</span><br><span class="line">          setText(<span class="built_in">window</span>.navigator.userAgent);</span><br><span class="line">        &#125;&#125;</span><br><span class="line">      &gt;</span><br><span class="line">        getUserAgent</span><br><span class="line">      &lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">      &lt;button</span></span><br><span class="line"><span class="regexp">        id="getUserInfo"</span></span><br><span class="line"><span class="regexp">        onClick=&#123;async (): Promise&lt;void&gt; =&gt; &#123;</span></span><br><span class="line"><span class="regexp">          const result = await getUserInfo();</span></span><br><span class="line"><span class="regexp">          setText(result.cnName);</span></span><br><span class="line"><span class="regexp">        &#125;&#125;</span></span><br><span class="line"><span class="regexp">      &gt;</span></span><br><span class="line"><span class="regexp">        getUserInfo</span></span><br><span class="line"><span class="regexp">      &lt;/</span>button&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default Banner;</span></span><br></pre></td></tr></table></figure><ul><li>src/components/Banner/index.test.tsx</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> Banner <span class="keyword">from</span> <span class="string">'./index'</span></span><br><span class="line"><span class="keyword">import</span> &#123; shallow &#125; <span class="keyword">from</span> <span class="string">'enzyme'</span></span><br><span class="line"><span class="keyword">import</span> &#123; act &#125; <span class="keyword">from</span> <span class="string">'react-dom/test-utils'</span></span><br><span class="line"></span><br><span class="line">jest.mock(<span class="string">'@/pages/card-mgmt/api'</span>, () =&gt; (&#123;</span><br><span class="line">  ...(jest.requireActual(<span class="string">'@/pages/card-mgmt/api'</span>) <span class="keyword">as</span> any),</span><br><span class="line">  getUserInfo: jest</span><br><span class="line">    .fn()</span><br><span class="line">    .mockImplementation(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">Promise</span>.resolve(&#123; <span class="attr">cnName</span>: <span class="string">'火箭'</span>, <span class="attr">enName</span>: <span class="string">'rocket'</span> &#125;))</span><br><span class="line">&#125;))</span><br><span class="line"></span><br><span class="line">it(<span class="string">'click "get userInfo"'</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> wrapper = shallow(<span class="xml"><span class="tag">&lt;<span class="name">Banner</span> /&gt;</span></span>)</span><br><span class="line">  <span class="keyword">await</span> act(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    wrapper.find(<span class="string">'#getUserInfo'</span>).simulate(<span class="string">'click'</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  expect(wrapper.text()).toContain(<span class="string">'火箭'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="redux-场景下组件测试"><a href="#redux-场景下组件测试" class="headerlink" title="redux 场景下组件测试"></a>redux 场景下组件测试</h2><ul><li>对于使用 redux 进行状态管理的应用，必定会有组件使用 react-redux 提供的 hooks 去获取状态、更新状态</li><li>根据上面的实践，明显可以看出：进行这类组件的单元测试，必须对 react-redux 的 hooks 进行 mock</li><li>对此，已经有完整的 mock 工具可供使用：redux-mock-store</li></ul><h3 id="实例-6"><a href="#实例-6" class="headerlink" title="实例"></a>实例</h3><ul><li>src/components/Banner/storeSlice.tsx</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* istanbul ignore file */</span></span><br><span class="line"><span class="comment">// TODO Test</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; createSlice &#125; <span class="keyword">from</span> <span class="string">'@reduxjs/toolkit'</span></span><br><span class="line"></span><br><span class="line">interface UserInfoType &#123;</span><br><span class="line">  cnName: string</span><br><span class="line">  enName: string</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> defaultUserInfo: UserInfoType = &#123;</span><br><span class="line">  cnName: <span class="string">''</span>,</span><br><span class="line">  enName: <span class="string">''</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> slice = createSlice(&#123;</span><br><span class="line">  name: <span class="string">'userInfo'</span>,</span><br><span class="line">  initialState: &#123;</span><br><span class="line">    userInfo: defaultUserInfo</span><br><span class="line">  &#125;,</span><br><span class="line">  reducers: &#123;</span><br><span class="line">    updateUserInfo(state, action): <span class="keyword">void</span> &#123;</span><br><span class="line">      state.userInfo = action.payload</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> &#123; updateUserInfo &#125; = slice.actions</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> selectUserInfo = (state: any): <span class="function"><span class="params">UserInfoType</span> =&gt;</span> state.userInfo.userInfo</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> slice.reducer</span><br></pre></td></tr></table></figure><blockquote><p>关于 storeSlice 这种写法，可以看 <a href="https://redux-toolkit.js.org/" target="_blank" rel="noopener">@reduxjs/toolkit</a></p></blockquote><ul><li>src/components/Banner/index.tsx</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState &#125; <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; getUserInfo &#125; <span class="keyword">from</span> <span class="string">"@/pages/card-mgmt/api"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; selectUserInfo &#125; <span class="keyword">from</span> <span class="string">"./storeSlice"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useSelector &#125; <span class="keyword">from</span> <span class="string">"react-redux"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Banner</span>(<span class="params"></span>): <span class="title">JSX</span>.<span class="title">Element</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [text, setText] = useState(<span class="string">"banner"</span>);</span><br><span class="line">  <span class="comment">// 这里使用了 react-redux 的 hook</span></span><br><span class="line">  <span class="keyword">const</span> userInfo = useSelector(selectUserInfo);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> clickHandle = (): <span class="function"><span class="params">void</span> =&gt;</span> &#123;</span><br><span class="line">    setText(<span class="string">"clicked"</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &#123;text&#125;</span><br><span class="line">      &#123;userInfo.cnName&#125;</span><br><span class="line">      &#123;userInfo.enName&#125;</span><br><span class="line">      &lt;button id=<span class="string">"btn"</span> onClick=&#123;clickHandle&#125;&gt;</span><br><span class="line">        click</span><br><span class="line">      &lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">      &lt;button</span></span><br><span class="line"><span class="regexp">        id="jump"</span></span><br><span class="line"><span class="regexp">        onClick=&#123;(): void =&gt; &#123;</span></span><br><span class="line"><span class="regexp">          location.href = "jump success";</span></span><br><span class="line"><span class="regexp">        &#125;&#125;</span></span><br><span class="line"><span class="regexp">      &gt;</span></span><br><span class="line"><span class="regexp">        jump</span></span><br><span class="line"><span class="regexp">      &lt;/</span>button&gt;</span><br><span class="line">      &lt;button</span><br><span class="line">        id=<span class="string">"getUserAgent"</span></span><br><span class="line">        onClick=&#123;(): <span class="function"><span class="params">void</span> =&gt;</span> &#123;</span><br><span class="line">          setText(<span class="built_in">window</span>.navigator.userAgent);</span><br><span class="line">        &#125;&#125;</span><br><span class="line">      &gt;</span><br><span class="line">        getUserAgent</span><br><span class="line">      &lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">      &lt;button</span></span><br><span class="line"><span class="regexp">        id="getUserInfo"</span></span><br><span class="line"><span class="regexp">        onClick=&#123;async (): Promise&lt;void&gt; =&gt; &#123;</span></span><br><span class="line"><span class="regexp">          const result = await getUserInfo();</span></span><br><span class="line"><span class="regexp">          setText(result.cnName);</span></span><br><span class="line"><span class="regexp">        &#125;&#125;</span></span><br><span class="line"><span class="regexp">      &gt;</span></span><br><span class="line"><span class="regexp">        getUserInfo</span></span><br><span class="line"><span class="regexp">      &lt;/</span>button&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default Banner;</span></span><br></pre></td></tr></table></figure><ul><li>src/components/Banner/index.test.tsx</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> Banner <span class="keyword">from</span> <span class="string">"./index"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; mount &#125; <span class="keyword">from</span> <span class="string">"enzyme"</span>;</span><br><span class="line"><span class="keyword">import</span> configureStore <span class="keyword">from</span> <span class="string">"redux-mock-store"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Provider &#125; <span class="keyword">from</span> <span class="string">"react-redux"</span>;</span><br><span class="line"></span><br><span class="line">it(<span class="string">"should render correctly with redux store"</span>, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> mockStore = configureStore([]);</span><br><span class="line">  <span class="keyword">const</span> store = mockStore(&#123;</span><br><span class="line">    userInfo: &#123;</span><br><span class="line">      userInfo: &#123;</span><br><span class="line">        cnName: <span class="string">"马马马马马马"</span>,</span><br><span class="line">        enName: <span class="string">"horsehorsehorsehorse"</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">const</span> wrapper = mount(</span><br><span class="line">    &lt;Provider store=&#123;store&#125;&gt;</span><br><span class="line">      &lt;Banner /&gt;</span><br><span class="line">    &lt;<span class="regexp">/Provider&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">  expect(wrapper.text()).toContain("马");</span></span><br><span class="line"><span class="regexp">  expect(wrapper.text()).toContain("horse");</span></span><br><span class="line"><span class="regexp">&#125;);</span></span><br></pre></td></tr></table></figure><h2 id="前端单元测试执行套路"><a href="#前端单元测试执行套路" class="headerlink" title="前端单元测试执行套路"></a>前端单元测试执行套路</h2><p>经过一些实践后，提炼出下面三个方面的测试：</p><ul><li>纯函数测试：测试工具类纯函数是否符合预期</li><li>展示性测试：用于测试组件内容是否正常展示，展示的各项内容是否完整、正确</li><li>交互性测试：用于测试组件涉及的交互，是否可以正常输出，正常输出，并对输入、输出做校验</li><li>快照测试：快照测试让开发人员明确自身对组件的修改，会有多大的波及度，具体可看<a href="https://jestjs.io/docs/en/snapshot-testing" target="_blank" rel="noopener">Snapshot Testing</a></li></ul><h2 id="实际运行"><a href="#实际运行" class="headerlink" title="实际运行"></a>实际运行</h2><img src="/2020/10/11/react-react-router-react-redux-unit-test/unit-test-running.gif" alt="unit-test-running.gif" title><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://jestjs.io/docs/en/getting-started" target="_blank" rel="noopener">jest doc</a></li><li><a href="https://github.com/enzymejs/enzyme" target="_blank" rel="noopener">enzyme doc</a></li><li><a href="https://www.xtivia.com/best-practices-for-testing-a-react-redux-toolkit-app/" target="_blank" rel="noopener">Best Practices for Testing a React/Redux Toolkit App</a></li><li><a href="https://codewithhugo.com/jest-exclude-coverage/" target="_blank" rel="noopener">jest ignore or exclude file/function/statement from test coverage</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> tech </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jest </tag>
            
            <tag> 自动化测试 </tag>
            
            <tag> enzyme </tag>
            
            <tag> test </tag>
            
            <tag> redux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jest测试框架官方文档要点提取</title>
      <link href="/2020/09/05/jest-test-guide-mind-map/"/>
      <url>/2020/09/05/jest-test-guide-mind-map/</url>
      
        <content type="html"><![CDATA[<img src="/2020/09/05/jest-test-guide-mind-map/img.png" alt="img.png" title>]]></content>
      
      
      <categories>
          
          <category> tech </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 自动化 </tag>
            
            <tag> 测试 </tag>
            
            <tag> react </tag>
            
            <tag> jest </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【翻译】Gatsby vs Next.JS - What, Why and When?</title>
      <link href="/2020/07/05/gatsby-vs-next-js-what-why-and-when/"/>
      <url>/2020/07/05/gatsby-vs-next-js-what-why-and-when/</url>
      
        <content type="html"><![CDATA[<img src="/2020/07/05/gatsby-vs-next-js-what-why-and-when/1.jpeg" alt="1.jpeg" title><p>好吧，首先，我离题了，我是这两个“框架”的忠实粉丝。我经常在 Twitter 或 Instagram 上看到对它们的赞赏，但是，在谈论这些工具时我被问得最多的问题是：哪个更好？</p><p>我应该使用 Next.JS 吗？但是我听说 Gatsby 也很 🔥，也许我应该使用 Gatsby？</p><p>因此，我想对此进行一些更深入的讨论，并希望得出一些更明确的选择。</p><a id="more"></a><p>让我们开始吧！</p><img src="/2020/07/05/gatsby-vs-next-js-what-why-and-when/2.gif" alt="2.gif" title><h2 id="一份对于-Gatsby-和-Next-的介绍"><a href="#一份对于-Gatsby-和-Next-的介绍" class="headerlink" title="一份对于 Gatsby 和 Next 的介绍"></a>一份对于 Gatsby 和 Next 的介绍</h2><p>那么，除了以前听人提起过但从未真正了解过的流行语外，Gatsby 和 Next 是什么？</p><p>用最基本的话来说，create-react-app 会给你创建一个 React 项目的 boilerplate，而这两个框架将为你创建一个应用奠定基础。</p><p>不过，他们已经脱离了 create-react-app，在某种意义上，他们并没有被归类为 boilerplate，而是工具箱，打好了基础，然后给你一套如何建造房子的说明。</p><p>总结一下：</p><p>create-react-app - 为 React 项目奠定基础。剩下的就看你的了。</p><p>Gatsby &amp; Next - 奠定 React 项目的基础。给你指导你应该如何在它们之上构建。</p><p>…</p><p>可是 那很奇怪？他们俩都做…同一件事？</p><p>有点。</p><p>乍一看，它们看上去都非常相似：</p><ul><li>提供一个模板应用</li><li>生成令人难以置信的高性能、可访问性和 SEO 友好型网站。</li><li>创建开箱即用的单页应用。</li><li>拥有非常棒的开发者体验。</li></ul><p>但实际上，它们有着本质上的区别。</p><h2 id="服务器端渲染-vs-静态生成"><a href="#服务器端渲染-vs-静态生成" class="headerlink" title="服务器端渲染 vs 静态生成"></a>服务器端渲染 vs 静态生成</h2><img src="/2020/07/05/gatsby-vs-next-js-what-why-and-when/3.gif" alt="3.gif" title><p>OK，我们将要开始获取一些技术知识点，请紧跟我的思路…不会很糟糕的！</p><p>Gatsby 是一款静态网站生成工具。静态网站生成器在构建时生成静态 HTML。它不使用服务器。</p><p>Next.JS 主要是一个服务器端渲染页面的工具。每当有新的请求进来时，它都会利用服务器动态生成 HTML。</p><p>当然，两者都可以在客户端调用 API。根本的区别是 Next 需要服务器才能运行。Gatsby 完全可以在没有任何服务器的情况下运行。</p><p>Gatsby 只是在构建时生成纯 HTML/CSS/JS，而 Next 则在运行时生成 HTML/CSS/JS。所以每次有新的请求进来，它都会从服务器上创建一个新的 HTML 页面。</p><p>我不打算在这里太深入地了解每个人的优点和缺点，然而，为了更深入地阅读，请查看这篇文章。- <a href="https://dev.to/stereobooster/server-side-rendering-or-ssr-what-is-it-for-and-when-to-use-it-2cpg" target="_blank" rel="noopener">https://dev.to/stereobooster/server-side-rendering-or-ssr-what-is-it-for-and-when-to-use-it-2cpg</a></p><h2 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a>数据处理</h2><p>这两个工具之间的另一个根本区别是它们处理数据的方式。</p><p>Gatsby 告诉你应该如何处理应用中的数据。</p><p>Next.js 则完全由你自己来决定。</p><img src="/2020/07/05/gatsby-vs-next-js-what-why-and-when/4.gif" alt="4.gif" title><h3 id="这到底是什么意思？"><a href="#这到底是什么意思？" class="headerlink" title="这到底是什么意思？"></a>这到底是什么意思？</h3><p>Gatsby 使用的是一种叫做 GraphQL 的东西。GraphQL 是一种查询语言，如果你熟悉 SQL，它们的工作方式非常相似。用户将使用一种特殊的语法，在组件中描述用户想要的数据，然后这些数据将会被提供。</p><p>当组件需要时，Gatsby 会在浏览器中提供这些数据。</p><p>一个例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; graphql &#125; <span class="keyword">from</span> <span class="string">"gatsby"</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (&#123; data &#125;) =&gt; (</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;About &#123;data.site.siteMetadata.title&#125;&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">    &lt;p&gt;We're a very cool website you should return to often.&lt;/</span>p&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">);</span></span><br><span class="line"><span class="regexp">export const query = graphql`</span></span><br><span class="line"><span class="regexp">  query &#123;</span></span><br><span class="line"><span class="regexp">    site &#123;</span></span><br><span class="line"><span class="regexp">      siteMetadata &#123;</span></span><br><span class="line"><span class="regexp">        title</span></span><br><span class="line"><span class="regexp">      &#125;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">`;</span></span><br></pre></td></tr></table></figure><p>在上面的例子中，你可以看到我们有一个查询来获取标题，然后在组件中显示标题。太棒了！</p><p>Gatsby 还有很多针对各种数据源的插件，这（理论上）使得它很容易针对很多数据源进行整合。一些数据源插件的例子是 Contentful、Wordpress、MongoDB 和 Forestry。这允许你做一些事情，比如把你的网站挂到一个 CMS 上，并对内容进行外部控制。</p><p>当为生产构建时，不再使用 GraphQL，而是将数据持久化为 JSON 文件。</p><p>… 好吧，酷。</p><p>Next.js 则是另一种方式：如何管理数据完全由你自己决定。你必须在自己的架构上决定如何管理数据。</p><p>这样做的好处是，你不会被捆绑在任何你想或不想使用的技术上。</p><h2 id="那我该怎么选择呢？"><a href="#那我该怎么选择呢？" class="headerlink" title="那我该怎么选择呢？"></a>那我该怎么选择呢？</h2><p>你应该使用 Gatsby 还是 Next，很大程度上取决于你的实际情况，因为其实他们都很酷。</p><h3 id="何时使用-Next-JS"><a href="#何时使用-Next-JS" class="headerlink" title="何时使用 Next.JS"></a>何时使用 Next.JS</h3><p>如果你有很多内容，或者你希望你的内容随着时间的推移会有很大的增长，那么静态生成的网页并不是你最好的解决方案。原因是，如果你有很多内容，建立网站需要很多时间。</p><p>当创建一个有数千页的非常大的应用时，重建速度会相当慢。而且如果你必须在点击发布后等待一大段时间才能上线，这不是一个完美的解决方案。</p><p>因此，如果您的网站内容随着时间的推移会不断增长，那么 Next.JS 是您的最佳选择。</p><p>另外，如果您希望在访问数据方面有更多的自由，那么 Next.JS 值得一提。</p><p>在这里值得一提的是，Next 的文档是我见过的最好的文档。它有一个交互：在您浏览完一节内容时，会对你进行测验，以确保你能跟上:)真棒! 👏</p><h3 id="何时使用-Gatsby"><a href="#何时使用-Gatsby" class="headerlink" title="何时使用 Gatsby"></a>何时使用 Gatsby</h3><p>在创建小型网站和博客时，我倾向于使用 Gatsby，这是我个人的喜好。它的生态系统非常适合连接到 CMS（简直是轻而易举），并且有一些很棒的指南，告诉你如何去使用它。</p><p>在我看来，Gatsby 更容易上手和运行，这一点值得记住。同样，文档的水平也很高，里面有很多教程，可以跟着学。</p><p>Gatsby 还附带了一些 “入门 “模板，以及一个相对较新的特性”主题”，这些都使得一个功能齐全的网络应用能够快速地建立和运行。</p><hr><p>原文: <a href="https://dev.to/jameesy/gatsby-vs-next-js-what-why-and-when-4al5" target="_blank" rel="noopener">Gatsby vs Next.JS - What, Why and When?</a></p><p>作者: <a href="https://dev.to/jameesy" target="_blank" rel="noopener">James Bedford</a></p><p>译者: Evan</p>]]></content>
      
      
      <categories>
          
          <category> tech </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gatsby </tag>
            
            <tag> 翻译 </tag>
            
            <tag> next.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>修复 ‘iframes 弹框无法在iOS中上下滚动’问题</title>
      <link href="/2020/07/04/iframes-scroll-bug-on-ios/"/>
      <url>/2020/07/04/iframes-scroll-bug-on-ios/</url>
      
        <content type="html"><![CDATA[<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"position: fixed;"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">"YOUR_PAGE_URL"</span> <span class="attr">width</span>=<span class="string">"600"</span> <span class="attr">height</span>=<span class="string">"400"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如上，div 中的 iframe 内容超过屏幕长度，却无法滚动</p><a id="more"></a><ul><li>处理</li></ul><ol><li><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">  <span class="attr">style</span>=<span class="string">"overflow:scroll !important; -webkit-overflow-scrolling:touch !important;"</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">"YOUR_PAGE_URL"</span> <span class="attr">width</span>=<span class="string">"600"</span> <span class="attr">height</span>=<span class="string">"400"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>触发弹框中 input 元素 blur 事件时，对弹框聚焦</p></li><li><p>对于可能产生滚动条的子元素，设置子元素的 min-height 大于父元素的 height，尽量使 iOS 产生 scrollView</p></li></ol><blockquote><p>问题未彻底解决：在上述三种处理方式叠加后，频繁触发 input blur 事件，仍有小几率触发弹框无法滚动的现象</p></blockquote><ul><li>参考</li></ul><p><a href="https://stackoverflow.com/questions/4599153/iframes-and-the-safari-on-the-ipad-how-can-the-user-scroll-the-content" target="_blank" rel="noopener">https://stackoverflow.com/questions/4599153/iframes-and-the-safari-on-the-ipad-how-can-the-user-scroll-the-content</a></p><p><a href="https://segmentfault.com/a/1190000016408566" target="_blank" rel="noopener">https://segmentfault.com/a/1190000016408566</a></p>]]></content>
      
      
      <categories>
          
          <category> tech </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iframe </tag>
            
            <tag> bug fix </tag>
            
            <tag> iOS </tag>
            
            <tag> scroll </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 gatsby cli 问题：pngquant failed to build</title>
      <link href="/2020/07/04/gatsby-starter-pngquant-failed-to-build/"/>
      <url>/2020/07/04/gatsby-starter-pngquant-failed-to-build/</url>
      
        <content type="html"><![CDATA[<img src="/2020/07/04/gatsby-starter-pngquant-failed-to-build/images.png" alt="images.png" title><p>使用 gatsby cli 遇到问题</p><a id="more"></a><p>使用 gatsby cli 构建初始项目</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gatsby new my-blazing-fast-site</span><br></pre></td></tr></table></figure><p>遇到问题：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&gt; pngquant-bin@5.0.2 postinstall /Users/yantianyu/Documents/repo/my-blazing-fast-site/node_modules/pngquant-bin</span><br><span class="line">&gt; node lib/install.js</span><br><span class="line"></span><br><span class="line">  ⚠ connect ETIMEDOUT 0.0.0.0:443</span><br><span class="line">  ⚠ pngquant pre-build test failed</span><br><span class="line">  ℹ compiling from source</span><br><span class="line">  ✖ Error: pngquant failed to build, make sure that libpng is installed</span><br><span class="line">    at Promise.all.then.arr (/Users/yantianyu/Documents/repo/my-blazing-fast-site/node_modules/bin-build/node_modules/execa/index.js:231:11)</span><br><span class="line">    at process._tickCallback (internal/process/next_tick.js:68:7)</span><br><span class="line">npm ERR! code ELIFECYCLE</span><br><span class="line">npm ERR! errno 1</span><br><span class="line">npm ERR! pngquant-bin@5.0.2 postinstall: `node lib/install.js`</span><br><span class="line">npm ERR! Exit status 1</span><br><span class="line">npm ERR!</span><br><span class="line">npm ERR! Failed at the pngquant-bin@5.0.2 postinstall script.</span><br><span class="line">npm ERR! This is probably not a problem with npm. There is likely additional logging output above.</span><br></pre></td></tr></table></figure><ul><li>解决：</li></ul><p><a href="https://github.com/gatsbyjs/gatsby/issues/20389" target="_blank" rel="noopener">https://github.com/gatsbyjs/gatsby/issues/20389</a></p><p><a href="https://gist.github.com/XYShaoKang/ae657eb81279528cca718c678be28215" target="_blank" rel="noopener">https://gist.github.com/XYShaoKang/ae657eb81279528cca718c678be28215</a></p><p><a href="https://pngquant.org/install.html" target="_blank" rel="noopener">https://pngquant.org/install.html</a></p>]]></content>
      
      
      <categories>
          
          <category> tech </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gatsby </tag>
            
            <tag> pngquant </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo next github page 性能优化记录</title>
      <link href="/2020/06/26/hexo-next-github-page-performance/"/>
      <url>/2020/06/26/hexo-next-github-page-performance/</url>
      
        <content type="html"><![CDATA[<img src="/2020/06/26/hexo-next-github-page-performance/rocky.gif" alt="rocky.gif" title><a id="more"></a><h2 id="step1"><a href="#step1" class="headerlink" title="step1"></a>step1</h2><p>站点使用 hexo next 主题，配置文件中已经带了使用 jsDelivr cdn 的资源配置实例，用户启用便可</p><p>根目录下<code>themes\next\_config.yml</code>文件中，vendors 项下，所有资源皆可配置使用 <code>jsDelivr cdn</code></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">vendors:</span><br><span class="line">  # Internal path prefix. Please do not edit it.</span><br><span class="line">  _internal: lib</span><br><span class="line"></span><br><span class="line">  # Internal version: 3.4.1</span><br><span class="line">  # Example:</span><br><span class="line">  jquery: <span class="comment">//cdn.jsdelivr.net/npm/jquery@3/dist/jquery.min.js</span></span><br><span class="line">  # jquery: //cdnjs.cloudflare.com/ajax/libs/jquery/3.4.1/jquery.min.js</span><br><span class="line">  # jquery:</span><br></pre></td></tr></table></figure><h2 id="step2"><a href="#step2" class="headerlink" title="step2"></a>step2</h2><p>站点静态资源，也使用 jsDelivr cdn</p><p>根目录下<code>themes\next\_config.yml</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># Assets</span><br><span class="line"># css: css</span><br><span class="line"># js: js</span><br><span class="line"># images: images</span><br><span class="line">css: https:<span class="comment">//cdn.jsdelivr.net/gh/evanhongyousan/evanhongyousan.github.io/css</span></span><br><span class="line">js: https:<span class="comment">//cdn.jsdelivr.net/gh/evanhongyousan/evanhongyousan.github.io/js</span></span><br><span class="line">images: https:<span class="comment">//cdn.jsdelivr.net/gh/evanhongyousan/evanhongyousan.github.io/images</span></span><br></pre></td></tr></table></figure><h2 id="step3"><a href="#step3" class="headerlink" title="step3"></a>step3</h2><p>使用图片懒加载，减少首屏加载时间</p><p>项目根目录下，执行 <code>npm install hexo-lazyload-image --save</code></p><p>根目录下<code>_config.yml</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 图片懒加载</span><br><span class="line">lazyload:</span><br><span class="line">  enable: <span class="literal">true</span></span><br><span class="line">  onlypost: <span class="literal">false</span></span><br></pre></td></tr></table></figure><h2 id="step4"><a href="#step4" class="headerlink" title="step4"></a>step4</h2><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>博客开启了 post_asset_folder 选项</p><p>根目录下<code>_config.yml</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">post_asset_folder: <span class="literal">true</span>;</span><br></pre></td></tr></table></figure><p>并在文章中使用 <code></code>这种方式引用图片，则打包出来的图片，会是这种形式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:<span class="comment">//evanhongyousan.github.io/2020/05/23/landing-page-builder-introduct/image2020-5-14_17-40-17.png</span></span><br></pre></td></tr></table></figure><p>可以看到图片并不在 <code>images</code> 文件夹中，则文章图片并未使用 cdn 加速</p><h3 id="处理"><a href="#处理" class="headerlink" title="处理"></a>处理</h3><p>执行 <code>npm install hexo-tag-asset-img --save</code></p><p>根目录下<code>_config.yml</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">asset_img_url: https:<span class="comment">//cdn.jsdelivr.net/gh/evanhongyousan/evanhongyousan.github.io</span></span><br></pre></td></tr></table></figure><p>打包发布后，可以看到文章对图片的引用已经变更：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:<span class="comment">//cdn.jsdelivr.net/gh/evanhongyousan/evanhongyousan.github.io/2020/05/23/landing-page-builder-introduct/image2020-5-14_17-40-17.png</span></span><br></pre></td></tr></table></figure><h2 id="step-5"><a href="#step-5" class="headerlink" title="step 5"></a>step 5</h2><p>完成上述步骤后，可以看到页面加载仍有资源阻塞</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 404</span><br><span class="line">https://fonts.googleapis.com/css?family=Lato:300,300italic,400,400italic,700,700italic&amp;display=swap&amp;subset=latin,latin-ext</span><br></pre></td></tr></table></figure><img src="/2020/06/26/hexo-next-github-page-performance/step5.png" alt="step5.png" title><p>则使用 fonts.googleapis.com 镜像处理字体资源文件加载失败的问题</p><p>根目录下<code>_config.yml</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">font:</span><br><span class="line">  # Use custom fonts families or not.</span><br><span class="line">  # Depended options: `external` and `family`.</span><br><span class="line">  enable: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  # Uri of fonts host, e.g. //fonts.googleapis.com (Default).</span><br><span class="line">  host: <span class="comment">//fonts.loli.net</span></span><br></pre></td></tr></table></figure><h2 id="使用的-cdn、插件、镜像"><a href="#使用的-cdn、插件、镜像" class="headerlink" title="使用的 cdn、插件、镜像"></a>使用的 cdn、插件、镜像</h2><ul><li><a href="https://www.jsdelivr.com/" target="_blank" rel="noopener">jsDelivr</a></li><li><a href="https://www.npmjs.com/package/hexo-lazyload-image" target="_blank" rel="noopener">hexo-lazyload-image</a></li><li><a href="https://github.com/victor-fdez/hexo-tag-asset-img" target="_blank" rel="noopener">hexo-tag-asset-img</a></li><li><a href="https://sb.sb/blog/css-cdn/" target="_blank" rel="noopener">fonts.loli.net</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> tech </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 性能 </tag>
            
            <tag> cdn </tag>
            
            <tag> 部署 </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记录一份统一登陆注册前端组件与bff层开发方案</title>
      <link href="/2020/06/22/sso-dev-program/"/>
      <url>/2020/06/22/sso-dev-program/</url>
      
        <content type="html"><![CDATA[<img src="/2020/06/22/sso-dev-program/1.png" alt="1.png" title><p>对公司而言，需要一个统一用户管理体系，其用户后续可根据相关法规协议应用于公司品牌下的其他业务。<br>统一登录组件基础搭建，实现用户的登录、注册功能。此标准组件可以应用在品牌下下所有需要用户登录、注册的场景。</p><a id="more"></a><h2 id="需求详情"><a href="#需求详情" class="headerlink" title="需求详情"></a>需求详情</h2><ul><li>针对各个业务线的登陆注册行为，提供弹窗型登陆注册组件，以下是组件具体描述：</li></ul><h3 id="统一登陆注册模块–手机登陆注册"><a href="#统一登陆注册模块–手机登陆注册" class="headerlink" title="统一登陆注册模块–手机登陆注册"></a>统一登陆注册模块–手机登陆注册</h3><ul><li>目标用户：持有香港手机号码用户</li><li>场景：<ul><li>移动端浏览器</li><li>桌面端浏览器</li></ul></li><li>页面内容：<ul><li>可配置图片</li><li>手机号输入</li><li>SMS 验证码输入</li><li>获取验证码按钮</li><li>邮箱输入</li><li>昵称输入</li><li>用户协议勾选 checkbox</li><li>登陆/注册按钮</li></ul></li><li>交互点<ul><li>页面语言根据 与登录前的页面语言一致</li><li>手机号校验</li><li>SMS 验证码校验</li><li>点击验证码按钮 60 秒倒计时，弹出 toast 提示‘SMS 验证码已发送至你的手机’</li><li>根据手机号是否为已注册手机号，区分用户行为为‘登陆行为’、‘注册行为’</li><li>登陆行为<ul><li>点击登陆按钮校验手机号、sms 验证码</li><li>完成校验后登陆成功</li></ul></li><li>注册行为<ul><li>显示邮箱输入、昵称输入、用户协议勾选 checkbox</li><li>邮箱后缀联想，输入@字符后，快速带出常用邮箱后缀，常用邮箱为：@gmail.com;@yahoo.com;@yahoo.com.hk; @hotmail.com</li><li>点击注册按钮，校验手机号、sms 验证码、邮箱输入、昵称输入、用户协议勾选 checkbox</li><li>完成校验后登陆成功</li></ul></li></ul></li><li>可配置项<ul><li>banner 图（图片 url）</li><li>完成登陆后的跳转链接（url），无此项配置则默认跳转 zati 首页</li><li>渠道来源 sourceType</li></ul></li></ul><h3 id="统一登陆注册模块–邮箱登陆注册"><a href="#统一登陆注册模块–邮箱登陆注册" class="headerlink" title="统一登陆注册模块–邮箱登陆注册"></a>统一登陆注册模块–邮箱登陆注册</h3><ul><li>目标用户：持有香港手机号码用户</li><li>场景:<ul><li>移动端浏览器</li><li>桌面端浏览器</li></ul></li><li>页面内容：<ul><li>可配置图片</li><li>邮箱输入</li><li>邮箱验证码输入</li><li>获取验证码按钮</li><li>手机号输入 这里手机号是否要验证码校验/是否要输入手机号</li><li>昵称输入</li><li>用户协议勾选 checkbox</li><li>登陆/注册按钮</li></ul></li><li>交互点:<ul><li>页面语言根据 与登录前的页面语言一致</li><li>手机号校验</li><li>SMS 验证码校验</li><li>点击验证码按钮 60 秒倒计时，弹出 toast 提示‘SMS 验证码已发送至你的手机’</li><li>根据手机号是否为已注册手机号，区分用户行为为‘登陆行为’、‘注册行为’</li><li>登陆行为<ul><li>点击登陆按钮校验手机号、sms 验证码</li><li>完成校验后登陆成功</li></ul></li><li>注册行为<ul><li>显示邮箱输入、昵称输入、用户协议勾选 checkbox</li><li>邮箱后缀联想，输入@字符后，快速带出常用邮箱后缀，常用邮箱为：@gmail.com;@yahoo.com;@yahoo.com.hk; @hotmail.com</li><li>点击注册按钮，校验手机号、sms 验证码、邮箱输入、昵称输入、用户协议勾选 checkbox</li><li>完成校验后登陆成功</li></ul></li></ul></li><li>可配置项<ul><li>banner 图（图片 url）</li><li>完成登陆后的跳转链接（url），无此项配置则默认跳转 zati 首页</li><li>渠道来源 sourceType</li></ul></li></ul><h3 id="设置安全密码模块"><a href="#设置安全密码模块" class="headerlink" title="设置安全密码模块"></a>设置安全密码模块</h3><ul><li>目标用户：已登陆用户</li><li>场景：<ul><li>移动端浏览器</li><li>桌面端浏览器</li></ul></li><li>页面内容：<ul><li>title</li><li>用户手机号</li><li>手机验证码输入</li><li>获取验证码按钮</li><li>安全密码输入框</li><li>密码描述</li><li>重设密码按钮</li></ul></li><li>交互点<ul><li>页面语言国际化</li><li>SMS 验证码校验</li><li>点击验证码按钮 60 秒倒计时，弹出 toast 提示‘SMS 验证码已发送至你的手机’</li><li>校验安全密码格式</li><li>设置完毕传递完成事件</li></ul></li></ul><h3 id="安全密码验证模块"><a href="#安全密码验证模块" class="headerlink" title="安全密码验证模块"></a>安全密码验证模块</h3><ul><li>目标用户：已登陆用户</li><li>场景：<ul><li>移动端浏览器</li><li>桌面端浏览器</li></ul></li><li>页面内容：<ul><li>title</li><li>安全密码输入框</li><li>确定按钮</li></ul></li><li>交互点<ul><li>页面语言国际化</li><li>密码校验</li></ul></li></ul><h3 id="登出"><a href="#登出" class="headerlink" title="登出"></a>登出</h3><ul><li>目标用户：已登陆用户</li><li>场景：<ul><li>移动端浏览器</li><li>桌面端浏览器</li></ul></li><li>功能：<ul><li>调用登出接口</li><li>清除登陆态相关 cookie</li></ul></li></ul><h2 id="分析与设计"><a href="#分析与设计" class="headerlink" title="分析与设计"></a>分析与设计</h2><h3 id="关键点"><a href="#关键点" class="headerlink" title="关键点"></a>关键点</h3><ul><li>统一登陆注册逻辑收拢，则鉴权行为需要被 统一登陆注册组件/buff/服务 收拢，各业务站点不再关注登陆注册逻辑，只关注通过登陆注册组件获取到的票据（token/ticket）</li><li>各业务站点在不同的网络策略下，其服务层（node）无法直接调用综合金融注册服务</li><li>需要满足“弹窗登陆注册”体验，避免“页面跳转型登陆注册”</li></ul><h3 id="方案选型"><a href="#方案选型" class="headerlink" title="方案选型"></a>方案选型</h3><h4 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h4><ul><li>构建统一登陆站点，收拢登陆注册逻辑</li><li>统一登陆站点提供登陆注册页面，此页面可实现常见的跳转型登陆注册行为</li><li>向各业务线提供登陆注册 ui 组件，组件通过 iframe 载入统一登陆站点登陆注册页</li><li>登陆注册组件与 iframe 中的页面，通过 postmessage api 实现通信</li><li>各业务线站点引用登陆注册组件获取到票据，业务线站点及后端服务凭借票据至综合金融注册服务获取数据</li></ul><img src="/2020/06/22/sso-dev-program/2.png" alt="2.png" title><h4 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h4><ul><li>构建统一登陆站点，收拢登陆注册逻辑</li><li>统一登陆站点提供登陆注册相关接口，接口配置允许跨域调用 header 头</li><li>向各业务线提供登陆注册 ui 组件，ui 组件跨域调用统一登陆站点登陆注册相关接口</li><li>各业务线站点引用登陆注册组件获取到票据，业务线站点及后端服务凭借票据至综合金融注册服务获取数据</li></ul><img src="/2020/06/22/sso-dev-program/3.png" alt="3.png" title><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><ul><li>方案一和方案二都需要统一登陆 bff 层作为支撑，且两方案需要的 bff 层实现差异不大</li><li>方案一和方案二都可接入国际化文案平台：<ul><li>方案一组件为同源调用文案接口</li><li>方案二组件为跨域调用文案接口</li></ul></li><li>方案一的一个实现细节点为：弹框调用 iframe 载入登陆注册页，这种弹框在 iOS 移动端中可能有样式异常<ul><li>这里会有解决样式异常的成本</li><li>若解决不了，在 ios 移动端可考虑切换为‘页面跳转登陆注册’形式</li></ul></li><li>方案二中组件调用 统一登陆 bff 接口皆为跨域调用</li><li>更新登陆注册模块时<ul><li>采用方案一，大部分情况下更新 统一登陆站点即可</li><li>采用方案二，所有使用组件的业务站点都需要重新发版，以更新组件</li></ul></li><li>方案一和方案二，都依赖 统一登陆 bff 层；一旦 bff 层挂掉，则所有对接了统一登陆注册的业务都挂掉</li><li>postMessage 无法在 ie11 使用，此时需要降级处理</li></ul><h4 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h4><ul><li>采用方案一</li></ul><h4 id="实现拆解"><a href="#实现拆解" class="headerlink" title="实现拆解"></a>实现拆解</h4><ul><li>构建 统一登陆 站点项目，提供登陆注册页面、登陆注册相关接口支持</li><li>构建 passport ui 组件，供各业务站点调用登陆注册</li></ul><h2 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h2><ul><li>react hooks：前端代码编程范式</li><li>next：ssr 架构</li><li>express：服务层架构</li></ul><h2 id="引入的组件与服务"><a href="#引入的组件与服务" class="headerlink" title="引入的组件与服务"></a>引入的组件与服务</h2><ul><li>前端项目脚手架</li><li>组件</li><li>antd 组件库</li><li>服务<ul><li>国际化文案服务</li><li>注册服务</li></ul></li><li>发布平台<ul><li>私有 npm</li><li>容器云 boom（docker 技术线）</li></ul></li><li>注意<ul><li>脚手架中 sentry 部分需要拆掉（有安全风险）</li></ul></li></ul><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><h3 id="bff-层"><a href="#bff-层" class="headerlink" title="bff 层"></a>bff 层</h3><ul><li>国际化文案接口</li><li>获取验证码</li><li>注册/登录接口</li><li>账户升级接口</li></ul><p>以上接口参数与 page path 和下面服务参数保持一致</p><h3 id="国际化文案平台服务"><a href="#国际化文案平台服务" class="headerlink" title="国际化文案平台服务"></a>国际化文案平台服务</h3><ul><li>国际化文案接口</li></ul><h3 id="注册服务"><a href="#注册服务" class="headerlink" title="注册服务"></a>注册服务</h3><ul><li>获取验证码</li><li>注册/登录接口</li><li>账户升级接口</li><li>用户退出登录</li><li>查询用户信息接口</li></ul><h2 id="关键逻辑流程"><a href="#关键逻辑流程" class="headerlink" title="关键逻辑流程"></a>关键逻辑流程</h2><h3 id="登陆注册页整体逻辑"><a href="#登陆注册页整体逻辑" class="headerlink" title="登陆注册页整体逻辑"></a>登陆注册页整体逻辑</h3><p><a href="https://mermaid-js.github.io/mermaid-live-editor/#/edit/eyJjb2RlIjoiZ3JhcGggVERcbuW8gOWniyAgLS0-IGxvZ2luRGlhbG9nW-iwg-i1t-eZu-mZhuazqOWGjOW8ueahhl1cbmxvZ2luRGlhbG9nIC0tPiB86YCJ5oup5omL5py6dGFifCBwaG9uZVRhYlvmiYvmnLp0YWJdXG5sb2dpbkRpYWxvZyAtLT4gfOmAieaLqemCrueusXRhYnwgZW1haWxUYWJb6YKu566xdGFiXVxucGhvbmVUYWIgLS0-IHNlbmRQaG9uZUNvZGVb6aqM6K-B56CB5o6l5Y-jXVxuc2VuZFBob25lQ29kZSAtLT4gaXNQaG9uZUxvZ2lue-aJi-acuuaYr-WQpuW3suazqOWGjH1cbmlzUGhvbmVMb2dpbiAtLT4gfHllc3wgcGhvbmVMb2dpblvmiYvmnLrnmbvpmYbmtYHnqItdXG5pc1Bob25lTG9naW4gLS0-IHxub3wgaXNaQVRJT1JaQUxJRkV75piv5ZCmIFpBVEkg55So5oi35oiWWkEgbGlmZeeUqOaIt31cbmlzWkFUSU9SWkFMSUZFIC0tPiB8bm98IHBob25lUmVnaXN0ZXJb5omL5py65rOo5YaM5rWB56iLXVxuaXNaQVRJT1JaQUxJRkUgLS0-IHx5ZXN8IHVwR3JhZGVQYWdlW-i0puaIt-WNh-e6p-aooeWdl11cbnVwR3JhZGVQYWdlIC0tPiB856Gu6K6k5Y2H57qnfCBnZXRUb2tlblvojrflj5bnmbvpmYbnpajmja5dXG5waG9uZVJlZ2lzdGVyIC0tPiBnZXRUb2tlblxucGhvbmVMb2dpbiAtLT4gZ2V0VG9rZW5cbmVtYWlsVGFiIC0tPiBzZW5kRW1haWxDb2RlW-mqjOivgeeggeaOpeWPo11cbnNlbmRFbWFpbENvZGUgLS0-IGlzRW1haWxMb2dpbnvpgq7nrrHmmK_lkKblt7Lms6jlhox9XG5pc0VtYWlsTG9naW4gLS0-IHx5ZXN8IGVtYWlsTG9naW5b6YKu566x55m76ZmG5rWB56iLXVxuZW1haWxMb2dpbiAtLT4gZ2V0VG9rZW5cbmlzRW1haWxMb2dpbiAtLT4gfG5vfCBpc1pBVElPUlpBTElGRTJ75piv5ZCmIFpBVEkg55So5oi35oiWWkEgbGlmZeeUqOaIt31cbmlzWkFUSU9SWkFMSUZFMiAtLT4gfG5vfCBlbWFpbFJlZ2lzdGVyW-mCrueuseazqOWGjOa1geeoi11cbmlzWkFUSU9SWkFMSUZFMiAtLT4gfHllc3wgdXBHcmFkZVBhZ2UyW-i0puaIt-WNh-e6p-aooeWdl11cbmVtYWlsUmVnaXN0ZXIgIC0tPiBnZXRUb2tlblxudXBHcmFkZVBhZ2UyIC0tPiB856Gu6K6k5Y2H57qnfCBnZXRUb2tlblxuZ2V0VG9rZW4gLS0-IOe7k-adnyIsIm1lcm1haWQiOnsidGhlbWUiOiJkZWZhdWx0In0sInVwZGF0ZUVkaXRvciI6ZmFsc2V9" target="_blank" rel="noopener">登陆注册页整体逻辑 mermaid 图</a></p><img src="/2020/06/22/sso-dev-program/4.png" alt="4.png" title><h3 id="登陆注册行为时序图"><a href="#登陆注册行为时序图" class="headerlink" title="登陆注册行为时序图"></a>登陆注册行为时序图</h3><p><a href="https://mermaid-js.github.io/mermaid-live-editor/#/edit/eyJjb2RlIjoic2VxdWVuY2VEaWFncmFtXG4gICAg55So5oi3IC0-PiDkuJrliqHnur93ZWJwYWdlOiDlkK_liqjnmbvpmYbms6jlhoxcblx05Lia5Yqh57q_d2VicGFnZS0tPj4r55m76ZmG5rOo5YaM57uE5Lu2OiDosIPotbdcbiAgICDnmbvpmYbms6jlhoznu4Tku7YgLS0-PitpZnJhbWU6IOiwg-i1t1xuICAgIGlmcmFtZSAtPj4gLXphaWYuemEuZ3JvdXAg55m76ZmG5rOo5YaM6aG16Z2iOiDovb3lhaVcbiAgICDnlKjmiLcgLT4-IHphaWYuemEuZ3JvdXAg55m76ZmG5rOo5YaM6aG16Z2iOiDov5vooYznmbvpmYbms6jlhozooYzkuLpcbiAgICBhbHQg55m76ZmG5rOo5YaM5o6l5Y-j6LCD55So5aSx6LSlXG4gICAgICAgIHphaWYuemEuZ3JvdXAg55m76ZmG5rOo5YaM6aG16Z2iIC0-PiDnmbvpmYbms6jlhoznu4Tku7Y6IHBvc3RtZXNzYWdlIGFwaSDkvKDpgJLlpLHotKXkuovku7ZcbiAgICAgICAg55m76ZmG5rOo5YaM57uE5Lu2IC0-PiDkuJrliqHnur93ZWJwYWdlOiDnmbvpmYbms6jlhozlpLHotKXkuovku7ZcbiAgICAgICAg5Lia5Yqh57q_d2VicGFnZSAtPj4g55So5oi3OiDmmL7npLrnmbvpmYblpLHotKXnirbmgIFcbiAgICBlbHNlIOeZu-mZhuazqOWGjOaOpeWPo-iwg-eUqOaIkOWKn1xuICAgICAgICB6YWlmLnphLmdyb3VwIOeZu-mZhuazqOWGjOmhtemdoiAtPj4g55m76ZmG5rOo5YaM57uE5Lu2OiBwb3N0bWVzc2FnZSBhcGkg5Lyg6YCS5oiQ5Yqf5LqL5Lu244CB55m76ZmG5oCB56Wo5o2uXG4gICAgICAgIOeZu-mZhuazqOWGjOe7hOS7tiAtPj4g5Lia5Yqh57q_d2VicGFnZTog55m76ZmG5rOo5YaM5oiQ5Yqf5LqL5Lu244CB55m76ZmG5oCB56Wo5o2u77yM5ZCM5pe25oqK55m76ZmG5oCB56Wo5o2u5YaZ5YWlY29va2llXG4gICAgICAgIOS4muWKoee6v3dlYnBhZ2UgLT4-IOeUqOaItzog5pi-56S655m76ZmG5oiQ5Yqf54q25oCBXG4gICAgZW5kIiwibWVybWFpZCI6eyJ0aGVtZSI6ImRlZmF1bHQifSwidXBkYXRlRWRpdG9yIjpmYWxzZX0" target="_blank" rel="noopener">登陆注册行为时序图</a></p><img src="/2020/06/22/sso-dev-program/5.png" alt="5.png" title><h3 id="安全密码设置页展示逻辑"><a href="#安全密码设置页展示逻辑" class="headerlink" title="安全密码设置页展示逻辑"></a>安全密码设置页展示逻辑</h3><p><a href="https://mermaid-js.github.io/mermaid-live-editor/#/edit/eyJjb2RlIjoiZ3JhcGggVERcbnN0YXJ0IC0tPiBnZXRVc2VySW5mb1vosIPnlKjojrflj5bnlKjmiLfkv6Hmga_mjqXlj6NdXG5nZXRVc2VySW5mbyAtLT5pc0xvZ2lue-aYr-WQpuacieeZu-mZhuaAgX1cbmlzTG9naW4gLS0-IHxub3wganVtcExvZ2luW-i3s-i9rOiHs-eZu-mZhuazqOWGjOmhtV1cbmp1bXBMb2dpbiAtLT4gb3ZlclxuaXNMb2dpbiAtLT4gaXNTZWN1cml0eVvmmK_lkKbnu4_ov4flronlhajlr4bnoIHpqozor4FdXG5pc1NlY3VyaXR5IC0tPiB8bm98IGp1bXBTZWN1cml0eVvot7Povazoh7Plronlhajlr4bnoIHpqozor4FdXG5qdW1wU2VjdXJpdHkgLS0-IG92ZXJcbmlzU2VjdXJpdHkgLS0-IHx5ZXN8IHNob3dOb3JtYWxb5bGV56S65a6J5YWo5a-G56CB6L6T5YWl5qGGXVxuc2hvd05vcm1hbCAtLT4gb3ZlclxuIiwibWVybWFpZCI6eyJ0aGVtZSI6ImRlZmF1bHQifSwidXBkYXRlRWRpdG9yIjpmYWxzZX0" target="_blank" rel="noopener">安全密码设置页展示逻辑</a></p><img src="/2020/06/22/sso-dev-program/6.png" alt="6.png" title><h3 id="安全密码设置时序图"><a href="#安全密码设置时序图" class="headerlink" title="安全密码设置时序图"></a>安全密码设置时序图</h3><p><a href="https://mermaid-js.github.io/mermaid-live-editor/#/edit/eyJjb2RlIjoic2VxdWVuY2VEaWFncmFtXG4gICAg55So5oi3IC0-PiDkuJrliqHnur93ZWJwYWdlOiDlkK_liqjlronlhajlr4bnoIHorr7nva5cblx05Lia5Yqh57q_d2VicGFnZS0tPj4remFwYXNzcG9ydOe7hOS7tjog6LCD6LW3XG4gICAgemFwYXNzcG9ydOe7hOS7tiAtLT4-K2lmcmFtZTog6LCD6LW3XG4gICAgaWZyYW1lIC0-PiB6YWlmLnphLmdyb3VwIOWuieWFqOWvhueggeiuvue9rumhtemdojog6L295YWlXG4gICAg55So5oi3IC0-PiB6YWlmLnphLmdyb3VwIOWuieWFqOWvhueggeiuvue9rumhtemdojog6L-b6KGM5a6J5YWo5a-G56CB6K6-572u6KGM5Li6XG4gICAgYWx0IOWuieWFqOWvhueggeiuvue9ruaOpeWPo-iwg-eUqOWksei0pVxuICAgICAgICB6YWlmLnphLmdyb3VwIOWuieWFqOWvhueggeiuvue9rumhtemdoiAtPj4gemFwYXNzcG9ydOe7hOS7tjogcG9zdG1lc3NhZ2UgYXBpIOS8oOmAkuWksei0peS6i-S7tlxuICAgICAgICB6YXBhc3Nwb3J057uE5Lu2IC0-PiDkuJrliqHnur93ZWJwYWdlOiDlronlhajlr4bnoIHorr7nva7lpLHotKXkuovku7ZcbiAgICAgICAg5Lia5Yqh57q_d2VicGFnZSAtPj4g55So5oi3OiDmmL7npLrlronlhajlr4bnoIHorr7nva7lpLHotKXnirbmgIFcbiAgICBlbHNlIOWuieWFqOWvhueggeiuvue9ruaOpeWPo-iwg-eUqOaIkOWKn1xuICAgICAgICB6YWlmLnphLmdyb3VwIOWuieWFqOWvhueggeiuvue9rumhtemdoiAtPj4gemFwYXNzcG9ydOe7hOS7tjogcG9zdG1lc3NhZ2UgYXBpIOS8oOmAkuaIkOWKn-S6i-S7tlxuICAgICAgICB6YXBhc3Nwb3J057uE5Lu2IC0-PiDkuJrliqHnur93ZWJwYWdlOiDlronlhajlr4bnoIHorr7nva7miJDlip_kuovku7ZcbiAgICAgICAg5Lia5Yqh57q_d2VicGFnZSAtPj4g55So5oi3OiDmmL7npLrlronlhajlr4bnoIHorr7nva7miJDlip_nirbmgIFcbiAgICBlbmQiLCJtZXJtYWlkIjp7InRoZW1lIjoiZGVmYXVsdCJ9LCJ1cGRhdGVFZGl0b3IiOmZhbHNlfQ" target="_blank" rel="noopener">安全密码设置时序图</a></p><img src="/2020/06/22/sso-dev-program/7.png" alt="7.png" title><h3 id="安全密码验证页展示逻辑"><a href="#安全密码验证页展示逻辑" class="headerlink" title="安全密码验证页展示逻辑"></a>安全密码验证页展示逻辑</h3><p><a href="https://mermaid-js.github.io/mermaid-live-editor/#/edit/eyJjb2RlIjoiZ3JhcGggVERcbnN0YXJ0IC0tPiBnZXRVc2VySW5mb1vosIPnlKjojrflj5bnlKjmiLfkv6Hmga_mjqXlj6NdXG5nZXRVc2VySW5mbyAtLT5pc0xvZ2lue-aYr-WQpuacieeZu-mZhuaAgX1cbmlzTG9naW4gLS0-IHxub3wganVtcExvZ2luW-i3s-i9rOiHs-eZu-mZhuazqOWGjOmhtV1cbmp1bXBMb2dpbiAtLT4gb3ZlclxuaXNMb2dpbiAtLT4gaXNTZWN1cml0eVs15YiG6ZKf5YaF5piv5ZCm57uP6L-H5a6J5YWo5a-G56CB6aqM6K-BXVxuaXNTZWN1cml0eSAtLT4gfG5vfCBzaG93Tm9ybWFsW-WxleekuuWuieWFqOWvhueggei-k-WFpeahhl1cbmlzU2VjdXJpdHkgLS0-IHx5ZXN8IGp1bXBUYXJnZXRb6Lez6L2s6Iez6L-b5YWl5YmN55qE6aG16Z2iXVxuc2hvd05vcm1hbCAtLT4gb3ZlclxuanVtcFRhcmdldCAtLT4gb3ZlclxuIiwibWVybWFpZCI6eyJ0aGVtZSI6ImRlZmF1bHQifSwidXBkYXRlRWRpdG9yIjpmYWxzZX0" target="_blank" rel="noopener">安全密码验证页展示逻辑</a></p><img src="/2020/06/22/sso-dev-program/8.png" alt="8.png" title><h3 id="安全密码验证时序图"><a href="#安全密码验证时序图" class="headerlink" title="安全密码验证时序图"></a>安全密码验证时序图</h3><p><a href="https://mermaid-js.github.io/mermaid-live-editor/#/edit/eyJjb2RlIjoic2VxdWVuY2VEaWFncmFtXG4gICAg55So5oi3IC0-PiDkuJrliqHnur93ZWJwYWdlOiDlkK_liqjlronlhajlr4bnoIHpqozor4Fcblx05Lia5Yqh57q_d2VicGFnZS0tPj4remFwYXNzcG9ydOe7hOS7tjog6LCD6LW3XG4gICAgemFwYXNzcG9ydOe7hOS7tiAtLT4-K2lmcmFtZTog6LCD6LW3XG4gICAgaWZyYW1lIC0-PiB6YWlmLnphLmdyb3VwIOWuieWFqOWvhueggemqjOivgemhtemdojog6L295YWlXG4gICAg55So5oi3IC0-PiB6YWlmLnphLmdyb3VwIOWuieWFqOWvhueggemqjOivgemhtemdojog6L-b6KGM5a6J5YWo5a-G56CB6aqM6K-B6KGM5Li6XG4gICAgYWx0IOWuieWFqOWvhueggemqjOivgeaOpeWPo-iwg-eUqOWksei0pVxuICAgICAgICB6YWlmLnphLmdyb3VwIOWuieWFqOWvhueggemqjOivgemhtemdoiAtPj4gemFwYXNzcG9ydOe7hOS7tjogcG9zdG1lc3NhZ2UgYXBpIOS8oOmAkuWksei0peS6i-S7tlxuICAgICAgICB6YXBhc3Nwb3J057uE5Lu2IC0-PiDkuJrliqHnur93ZWJwYWdlOiDlronlhajlr4bnoIHpqozor4HlpLHotKXkuovku7ZcbiAgICAgICAg5Lia5Yqh57q_d2VicGFnZSAtPj4g55So5oi3OiDmmL7npLrlronlhajlr4bnoIHpqozor4HlpLHotKXnirbmgIFcbiAgICBlbHNlIOWuieWFqOWvhueggemqjOivgeaOpeWPo-iwg-eUqOaIkOWKn1xuICAgICAgICB6YWlmLnphLmdyb3VwIOWuieWFqOWvhueggemqjOivgemhtemdoiAtPj4gemFwYXNzcG9ydOe7hOS7tjogcG9zdG1lc3NhZ2UgYXBpIOS8oOmAkuaIkOWKn-S6i-S7tlxuICAgICAgICB6YXBhc3Nwb3J057uE5Lu2IC0-PiDkuJrliqHnur93ZWJwYWdlOiDlronlhajlr4bnoIHpqozor4HmiJDlip_kuovku7ZcbiAgICAgICAg5Lia5Yqh57q_d2VicGFnZSAtPj4g55So5oi3OiDmmL7npLrlronlhajlr4bnoIHpqozor4HmiJDlip_nirbmgIFcbiAgICBlbmQiLCJtZXJtYWlkIjp7InRoZW1lIjoiZGVmYXVsdCJ9LCJ1cGRhdGVFZGl0b3IiOmZhbHNlfQ" target="_blank" rel="noopener">安全密码验证时序图</a></p><img src="/2020/06/22/sso-dev-program/9.png" alt="9.png" title><h2 id="打包方案"><a href="#打包方案" class="headerlink" title="打包方案"></a>打包方案</h2><ul><li>略</li></ul><h2 id="资源缓存处理方案"><a href="#资源缓存处理方案" class="headerlink" title="资源缓存处理方案"></a>资源缓存处理方案</h2><ul><li>略</li></ul><h2 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h2><h3 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h3><h4 id="国际化文案获取"><a href="#国际化文案获取" class="headerlink" title="国际化文案获取"></a>国际化文案获取</h4><ul><li>原获取方式：JSONP 调用接口方式获取文案：需要防止参数注入</li><li>新方式：暂无</li></ul>]]></content>
      
      
      <categories>
          
          <category> tech </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iframe </tag>
            
            <tag> javascript </tag>
            
            <tag> sso </tag>
            
            <tag> node </tag>
            
            <tag> express </tag>
            
            <tag> postMessage </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>landing page builder 工作流描述与landing page builder 选型</title>
      <link href="/2020/05/23/landing-page-builder-introduct/"/>
      <url>/2020/05/23/landing-page-builder-introduct/</url>
      
        <content type="html"><![CDATA[<img src="/2020/05/23/landing-page-builder-introduct/image2020-5-14_17-40-17.png" alt="image2020-5-14_17-40-17.png" title><ul><li>在后续的工作推进中，运营、推广类业务会占据较大比重</li><li>从团队分工的角度：开发侧会逐渐从提供具体业务页面，过度到提供运营页生产工具</li><li>可定制化程度高、功能齐备、和团队业务有更强契合的运营平台搭建工作，目前仍处于准备阶段</li></ul><a id="more"></a><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><ul><li>在运营、推广类业务中，有相当部分针对非大陆地区的需求，实际就是生产纯广告类、静态类页面，用于承载渠道流量、广告流量</li><li>针对这类需求，在当前团队自身运营平台还未构建起来的情况下，可考虑直接使用第三方 landing page builder，其最大优势是“充钱即用”</li></ul><h2 id="工作流描述"><a href="#工作流描述" class="headerlink" title="工作流描述"></a>工作流描述</h2><img src="/2020/05/23/landing-page-builder-introduct/image2020-5-14_17-40-17.png" alt="image2020-5-14_17-40-17.png" title><h2 id="选型"><a href="#选型" class="headerlink" title="选型"></a>选型</h2><h3 id="工具初选"><a href="#工具初选" class="headerlink" title="工具初选"></a>工具初选</h3><ul><li>Leadpages</li><li>Unbounce</li></ul><h3 id="价格"><a href="#价格" class="headerlink" title="价格"></a>价格</h3><ul><li>Leadpages：25 刀/月 &lt; Unbounce：79 刀/月</li></ul><h3 id="易用性"><a href="#易用性" class="headerlink" title="易用性"></a>易用性</h3><ul><li>Leadpages &gt; Unbounce</li></ul><h3 id="模版"><a href="#模版" class="headerlink" title="模版"></a>模版</h3><ul><li>丰富度：Leadpages &lt; Unbounce</li><li>皆可以可视化编辑页面</li></ul><h3 id="基本需求契合度"><a href="#基本需求契合度" class="headerlink" title="基本需求契合度"></a>基本需求契合度</h3><ul><li>团队对 landing page 的基本需求：可通过可视化编辑，生产出静态页</li><li>leadpages 和 unbounce 都可满足基本需求</li></ul><h3 id="初步结论"><a href="#初步结论" class="headerlink" title="初步结论"></a>初步结论</h3><ul><li>针对 landing page builder 工具，及其配套工作流，仍处于未实践过的阶段，有很多问题未暴露出来</li><li>工具本就是按月充钱，可考虑先选择较便宜、较易用的 leadpages 先用起来，在实践中总结问题，逐步完善方案</li></ul><h2 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h2><ul><li>leadpage: <a href="https://www.youtube.com/watch?v=vfGXVEA6hrM" target="_blank" rel="noopener">https://www.youtube.com/watch?v=vfGXVEA6hrM</a></li><li>unbounce: <a href="https://www.youtube.com/watch?v=XnLNQ2yrNCU" target="_blank" rel="noopener">https://www.youtube.com/watch?v=XnLNQ2yrNCU</a></li></ul><h2 id="投入"><a href="#投入" class="headerlink" title="投入"></a>投入</h2><ul><li>第三方 landing page builder 使用费用</li><li>业务、产品、设计方对 landing page builder 的学习成本</li><li>开发侧提供技术支持，收集各方在使用过程中产生的问题、痛点，帮助团队 自研运营平台/深入对接的运营平台 产生迭代方向</li></ul>]]></content>
      
      
      <categories>
          
          <category> tech </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 用户增长 </tag>
            
            <tag> landing page builder </tag>
            
            <tag> ga </tag>
            
            <tag> gtm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>禁止移动端右滑触发回退 &amp; 禁止浏览器下拉刷新</title>
      <link href="/2020/04/15/prevent-back-slide/"/>
      <url>/2020/04/15/prevent-back-slide/</url>
      
        <content type="html"><![CDATA[<img src="/2020/04/15/prevent-back-slide/slide.gif" alt="slide.gif" title><p>在移动端场景中，‘滑动’交互已经是个常见的交互。而在移动端浏览器下，对页面的滑动又有可能触发 <code>浏览器回退/浏览器下拉刷新</code>，影响交互结果</p><a id="more"></a><h3 id="禁止移动端右滑触发回退"><a href="#禁止移动端右滑触发回退" class="headerlink" title="禁止移动端右滑触发回退"></a>禁止移动端右滑触发回退</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xPos = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">var</span> yPos = <span class="literal">null</span>;</span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">"touchmove"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> touch = event.originalEvent.touches[<span class="number">0</span>];</span><br><span class="line">  oldX = xPos;</span><br><span class="line">  oldY = yPos;</span><br><span class="line">  xPos = touch.pageX;</span><br><span class="line">  yPos = touch.pageY;</span><br><span class="line">  <span class="keyword">if</span> (oldX == <span class="literal">null</span> &amp;&amp; oldY == <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Math</span>.abs(oldX - xPos) &gt; <span class="built_in">Math</span>.abs(oldY - yPos)) &#123;</span><br><span class="line">      event.preventDefault();</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>压缩版：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xPos = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">var</span> yPos = <span class="literal">null</span>;</span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">"touchmove"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> touch = event.originalEvent.touches[<span class="number">0</span>];</span><br><span class="line">  oldX = xPos;</span><br><span class="line">  oldY = yPos;</span><br><span class="line">  xPos = touch.pageX;</span><br><span class="line">  yPos = touch.pageY;</span><br><span class="line">  <span class="keyword">if</span> (oldX == <span class="literal">null</span> &amp;&amp; oldY == <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Math</span>.abs(oldX - xPos) &gt; <span class="built_in">Math</span>.abs(oldY - yPos)) &#123;</span><br><span class="line">      event.preventDefault();</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="禁止浏览器下拉刷新"><a href="#禁止浏览器下拉刷新" class="headerlink" title="禁止浏览器下拉刷新"></a>禁止浏览器下拉刷新</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span>,</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="comment">/* Disables pull-to-refresh but allows overscroll glow effects. */</span></span><br><span class="line">  <span class="attribute">overscroll-behavior-y</span>: contain;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果样式设置不生效：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> touchStartHandler, touchMoveHandler, touchPoint;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Only needed for touch events on chrome.</span></span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    (<span class="built_in">window</span>.chrome || navigator.userAgent.match(<span class="string">"CriOS"</span>)) &amp;&amp;</span><br><span class="line">    <span class="string">"ontouchstart"</span> <span class="keyword">in</span> <span class="built_in">document</span>.documentElement</span><br><span class="line">  ) &#123;</span><br><span class="line">    touchStartHandler = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// Only need to handle single-touch cases</span></span><br><span class="line">      touchPoint = event.touches.length === <span class="number">1</span> ? event.touches[<span class="number">0</span>].clientY : <span class="literal">null</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    touchMoveHandler = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> newTouchPoint;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Only need to handle single-touch cases</span></span><br><span class="line">      <span class="keyword">if</span> (event.touches.length !== <span class="number">1</span>) &#123;</span><br><span class="line">        touchPoint = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// We only need to defaultPrevent when scrolling up</span></span><br><span class="line">      newTouchPoint = event.touches[<span class="number">0</span>].clientY;</span><br><span class="line">      <span class="keyword">if</span> (newTouchPoint &gt; touchPoint) &#123;</span><br><span class="line">        event.preventDefault();</span><br><span class="line">      &#125;</span><br><span class="line">      touchPoint = newTouchPoint;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">document</span>.addEventListener(<span class="string">"touchstart"</span>, touchStartHandler, &#123;</span><br><span class="line">      passive: <span class="literal">false</span>,</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">document</span>.addEventListener(<span class="string">"touchmove"</span>, touchMoveHandler, &#123;</span><br><span class="line">      passive: <span class="literal">false</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://stackoverflow.com/questions/30636930/disable-web-page-navigation-on-swipeback-and-forward" target="_blank" rel="noopener">Disable web page navigation on swipe(back and forward)</a></p><p><a href="https://stackoverflow.com/questions/36212722/how-to-prevent-pull-down-to-refresh-of-mobile-chrome" target="_blank" rel="noopener">How to prevent pull-down-to-refresh of mobile chrome</a></p>]]></content>
      
      
      <categories>
          
          <category> tech </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ga、gtm介绍与接入说明</title>
      <link href="/2020/03/26/introduce-ga-gtm/"/>
      <url>/2020/03/26/introduce-ga-gtm/</url>
      
        <content type="html"><![CDATA[<p>Google Analytics Solution 是一个完整的数据解决方案，从数据的收集、管理、分析、可视化、优化、到终极目的转化，一气呵成，其中各个产品相互依赖，构成了强大的企业级数字营销整合工具。</p><img src="/2020/03/26/introduce-ga-gtm/1.png" alt="1.png" title><a id="more"></a><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><p>谷歌分析，是 Google 发布的一款免费的网站分析服务，包括多个报告，可对整个网站的访问者进行多角度的跟踪，并能持续跟踪营销广告系列的效果，GA 默认提供的报告如下：</p><ul><li>行为分析：帮助用户了解网站的哪些部分效果理想、哪些页面比较受欢迎，并据此为网站营造更佳的体验</li><li>社交分析：可衡量社交媒体计划的成效，分析访问者如何与网站上的分享功能（如 Google +1 按钮）进行互动，如何在不同的社交平台上使用网站内容</li><li>转化分析：确定吸引了多少客户、销量有多高，以及用户如何与网站互动</li><li>广告分析：了解社交广告、移动广告、搜索广告和展示广告的效果，以最大限度地发挥广告的作用</li></ul><h2 id="Google-Analytics-Solution-产品线"><a href="#Google-Analytics-Solution-产品线" class="headerlink" title="Google Analytics Solution 产品线"></a>Google Analytics Solution 产品线</h2><p>Google Analytics Solution 是一个完整的数据解决方案，从数据的收集、管理、分析、可视化、优化、到终极目的转化，一气呵成，其中各个产品相互依赖，构成了强大的企业级数字营销整合工具。</p><img src="/2020/03/26/introduce-ga-gtm/1.png" alt="1.png" title><ul><li>udience Center：整合海量数据的数据管理平台</li><li>Google Tag Manager：代码管理工具，前身是 GA 中的数据埋点功能，简化了数据采集的工作流量</li><li>Google Analytics：Google Analytics Solution 的核心部件</li><li>Data Studio：企业级数据分析和可视化的产品，能够整合不同产品和资源的数据</li><li>Survey：问卷调查工具，获得消费者的信息和看法</li><li>Google Optimize：网页测试和产品优化工具，可以做 AB 测试和多变量测试</li><li>Attribution：市场归因工具，可以帮助企业分析广告是否有效</li></ul><h2 id="开发定位"><a href="#开发定位" class="headerlink" title="开发定位"></a>开发定位</h2><p>作为开发，在这项工作流中，属于数据的第一道经手人，一般关注 Google analysis 和 Google tag manager 即可</p><h2 id="ga（Google-Analytics）基本概念"><a href="#ga（Google-Analytics）基本概念" class="headerlink" title="ga（Google Analytics）基本概念"></a>ga（Google Analytics）基本概念</h2><ul><li>Sessions（会话）：是指在指定的时间段内在网站上发生的一系列互动，互动可以是页面浏览，事件，社交互动或电子商务等。一个用户可以同时开启多个会话，这些会话可以发生在同一天，也可以在不同的时间</li><li>数据的 3 个层级：用户、会话、交互。一个会话可以有多个交互，一个用户可以有多个会话。当用户的行为（例如，用户在网站上加载网页或在移动应用上加载屏幕）触发跟踪代码时，GA 就会记录该活动。系统会将每次互动打包为一项匹配（Hits）发送至 GA 的服务器。常见的互动类型有页面跟踪匹配，事件跟踪匹配，电子商务跟踪匹配和社交互动匹配。</li><li>用户识别：Client ID-表示的是唯一的浏览器或设备；User ID-表示的是唯一用户，只有用户登录的时候才会识别到</li><li>新用户、回访用户、用户和访客<ul><li>新用户（New User）：用户首次访问站点就被记录为新用户</li><li>回访用户（Returning Users）：非首次的访问都是回访用户</li><li>用户（Users）：用户数，是新用户和回访用户的去重</li><li>新访客（New Visitor）：新用户和新访客在数值相等的，但在技术上的实现是不同的，新访客是一个维度，新用户是字段。</li></ul></li><li>跳出率和退出率<ul><li>跳出率（Bounce Rate）是指该网页是会话中“唯一网页”的会话占由该网页开始的所有会话的百分比。(基于会话)</li><li>退出率（Exit）是指该网页是会话中“最后一页”的浏览占该网页总浏览量的百分比。(基于 PV)</li></ul></li><li>时长：页面时长&amp;会话时长</li><li>来源、媒介和广告（流量来源追踪）：来源、媒介和广告系列对应的是 Source、Medium 和 Campaign，主要用于标记流量来源，表示从哪个站点过来的流量，经常用于付费推广，要重点关注</li><li>事件：「事件」是指使用者與內容的互動，可針對單一網頁或畫面載入個別進行評估。像是下載、連結點擊、表單提交及影片播放這類動作，都可以做為「事件」來分析，要重点关注</li></ul><p>对于上述概念，网上有很丰富的资料，可以使用 Google 搜索“ga+概念名称”，通过更详细的图文或视频进行理解，这边就不做详细描述了。</p><p>对于开发，需要重点理解【事件】概念与【来源、媒介和广告（流量来源追踪）】概念，这是开发做相关对接涉及到最多的概念。</p><h2 id="ga-常见对接场景归纳与对接方式"><a href="#ga-常见对接场景归纳与对接方式" class="headerlink" title="ga 常见对接场景归纳与对接方式"></a>ga 常见对接场景归纳与对接方式</h2><img src="/2020/03/26/introduce-ga-gtm/ga_tag_script.png" alt="ga_tag_script.png" title><ul><li>跟踪代码部署：对接 ga 的基础，此项工作各个站点目前已经默认处理<ul><li>在 GA 里选择“管理”→“跟踪信息”→“跟踪代码”，把代码复制到站点中</li></ul></li><li>事件上报：对用户的特性交互进行上报<ul><li>这种上报一般由产品/市场人员提出，并给出上报代码。开发这边把上报代码写入对应事件回调中即可</li></ul></li><li>跟踪邮件打开：评估邮件的打开情况，具体邮件中按钮点击的追踪就通过 UTM 跟踪<ul><li>使用 Measurement Protocol 协议，原理是使用 img 标签发出 get 请求，具体可看 <a href="https://evanhongyousan.github.io/2019/08/29/edm-ga/">https://evanhongyousan.github.io/2019/08/29/edm-ga/</a></li></ul></li><li>UTM 跟踪（流量来源追踪）：标记流量来源（比如产品、市场人员经常让开发在 banner 跳转链接中加上 utm_source、utm_medium 等参数），经常用于付费推广（sem 竞价排名、广告 banner 等）；<ul><li>在原有链接的基础上，添加对应参数即可，一般使用工具：<a href="https://ga-dev-tools.appspot.com/campaign-url-builder/" target="_blank" rel="noopener">https://ga-dev-tools.appspot.com/campaign-url-builder/</a></li></ul></li></ul><h2 id="ga-后台简单使用"><a href="#ga-后台简单使用" class="headerlink" title="ga 后台简单使用"></a>ga 后台简单使用</h2><h3 id="三个主要纬度"><a href="#三个主要纬度" class="headerlink" title="三个主要纬度"></a>三个主要纬度</h3><table><thead><tr><th>字段</th><th>说明</th></tr></thead><tbody><tr><td>账号</td><td>ga 的入口，整个组织的最高层级，一个 google 账号可以有 100 个 ga 账号</td></tr><tr><td>媒体资源和应用</td><td>网站、移动应用或设备。一个账号可以包含多个媒体资源，上限 50。一个媒体资源对应一个网站或应用</td></tr><tr><td>数据视图</td><td>报告的入口。通过这种定义的视图可以查看媒体资源中的数据。一个媒体资源可以有 25 个数据视图</td></tr></tbody></table><img src="/2020/03/26/introduce-ga-gtm/three_w.png" alt="three_w.png" title><p>可以在左上方做三个纬度的切换，在左下方（管理按钮）做三个纬度的管理</p><img src="/2020/03/26/introduce-ga-gtm/three_w_s.png" alt="three_w_s.png" title><h3 id="报告"><a href="#报告" class="headerlink" title="报告"></a>报告</h3><img src="/2020/03/26/introduce-ga-gtm/report_nav.png" alt="report_nav.png" title><ul><li>实时:主要是从不同角度预览目前有多少人在访问网站<ul><li>具体六种实时报告请看 ga 说明文档：<a href="https://support.google.com/analytics/answer/1638637" target="_blank" rel="noopener">https://support.google.com/analytics/answer/1638637</a></li></ul></li><li>受众群体:有关用户属性的报告，从各不同的维度去展示用户画像，通过受众群体的数据能更深入的分析网站的访客<ul><li><a href="https://support.google.com/analytics/answer/7162572?hl=zh-Hans" target="_blank" rel="noopener">https://support.google.com/analytics/answer/7162572?hl=zh-Hans</a></li><li><a href="https://support.google.com/analytics/answer/1012034?hl=zh-Hans" target="_blank" rel="noopener">https://support.google.com/analytics/answer/1012034?hl=zh-Hans</a></li></ul></li><li>流量获取：流量获取模块主要是流量是从哪些渠道获取的角度去展示数据<ul><li>之前提到的 utm_source、utm_media 等 utm 流量追踪参数，可以在 流量获取 → 所有流量 → 来源/媒介 中看到体现</li></ul></li><li>行为：主要是展现用户行为<ul><li>之前提到的事件上报，可以在 行为 → 事件 中看到体现</li><li>另外，站点页面的 pvuv 数据也是在“行为”中看到</li></ul></li><li>转化：包含目标、电子商务、多渠道路径和归因</li></ul><h2 id="gtm（Google-Tag-Manager）基本概念"><a href="#gtm（Google-Tag-Manager）基本概念" class="headerlink" title="gtm（Google Tag Manager）基本概念"></a>gtm（Google Tag Manager）基本概念</h2><p>gtm 属于代码管理工具，对于开发的影响：接入 gtm 后，事件上报相关代码就可以不再由开发在项目代码中插入，改为在 gtm 后台中处理。</p><ul><li>代码（Tag）代码指的是向第三方（比如 Google）发送信息的 JavaScript 代码段。如果您不使用诸如 GTM 这样的代码管理解决方案，则需要将这些 JavaScript 代码段直接添加到网站的源代码中。</li><li>触发器（Trigger）触发器是指在运行时结果为“true”或“false”的条件，用于控制该代码在何时触发或不触发。代码必须至少有一个触发器才能触发。</li><li>变量（Variable）变量分为内置变量和用户自定义变量，内置变量是指一系列预先设定且不可自定义的特殊变量，要使用的时候，您需要将其勾选开启，不同容器类型的内置变量不同的；自定义变量是 GTM 提供一些变量的格式，根据根据自己的需要去创建。</li></ul><h2 id="gtm-常见对接场景归纳与对接方式"><a href="#gtm-常见对接场景归纳与对接方式" class="headerlink" title="gtm 常见对接场景归纳与对接方式"></a>gtm 常见对接场景归纳与对接方式</h2><ul><li>gtm 跟踪代码部署：对接 gtm 的基础，预计会逐步在各站点完成</li><li>ga 跟踪代码部署：原来直接部署到项目中的 ga 代码，改为写入 gtm 代码容器中，站点接入 gtm 代码容器</li><li>ga 事件上报：ga 中的事件上报代码不再写入项目代码中，而是写到 gtm 的容器中<ul><li>具体步骤就是在 gtm 代码容器中选择对应元素，绑定事件，并在事件回调中写入 ga 上报代码</li></ul></li><li>接入其他第三方代码：设定各项事件，然后执行第三方代码</li></ul><h2 id="gtm-触发器详细说明"><a href="#gtm-触发器详细说明" class="headerlink" title="gtm 触发器详细说明"></a>gtm 触发器详细说明</h2><table><thead><tr><th>场景</th><th>触发器</th><th>说明</th></tr></thead><tbody><tr><td>网页浏览</td><td>网页浏览</td><td>在网络浏览器开始加载网页时立即触发</td></tr><tr><td></td><td>DOM 已准备就绪</td><td>在浏览器在 HTML 中完成整页构建且文档对象模型 (DOM) 做好解析准备后触发</td></tr><tr><td></td><td>窗口已加载</td><td>在页面（包括图片和脚本等嵌入资源）完全加载后触发</td></tr><tr><td>点击</td><td>所有元素</td><td>跟踪网页上任何元素（例如链接、图片、按钮等）获得的点击</td></tr><tr><td></td><td>仅链接</td><td>仅跟踪使用 <a> 元素的 HTML 链接（如 <a href="www.google.com">Google.com</a>）获得的点击。</a></td></tr><tr><td>其他</td><td>元素可见性</td><td>当网络浏览器视口显示所选元素时，就会触发 Google 跟踪代码管理器的元素可见性触发器。</td></tr><tr><td></td><td>表单提交</td><td>在发送表单时触发</td></tr><tr><td></td><td>历史记录更改</td><td>网址片段（井号后面部分）发生更改或网站使用的是 HTML5 pushstate API，那么基于历史记录更改事件的触发器将会触发</td></tr><tr><td></td><td>JavaScript 错误</td><td>发生未捕获的 JavaScript 异常 (window.onError) 时触发</td></tr><tr><td></td><td>滚动深度</td><td>根据用户向下滚动网页的距离来触发</td></tr><tr><td></td><td>计时器</td><td>定时间隔向跟踪代码管理器发送事件</td></tr><tr><td></td><td>YouTube 视频</td><td>根据用户与嵌入网页中的 YouTube 视频进行的互动来触发代码</td></tr><tr><td></td><td>自定义事件</td><td>跟踪您的网站或移动应用上发生的、未按标准方法处理的互动</td></tr><tr><td></td><td>触发器组</td><td>将两个或多个触发器的条件作为一个进行评估</td></tr></tbody></table><p>更详细的说明，请看触发器说明文档：<a href="https://support.google.com/tagmanager/answer/7679319?hl=zh-Hans&amp;ref_topic=7679108" target="_blank" rel="noopener">https://support.google.com/tagmanager/answer/7679319?hl=zh-Hans&amp;ref_topic=7679108</a></p><h2 id="gtm-后台简单使用"><a href="#gtm-后台简单使用" class="headerlink" title="gtm 后台简单使用"></a>gtm 后台简单使用</h2><h3 id="gtm-后台两个主要纬度"><a href="#gtm-后台两个主要纬度" class="headerlink" title="gtm 后台两个主要纬度"></a>gtm 后台两个主要纬度</h3><table><thead><tr><th>字段</th><th>说明</th></tr></thead><tbody><tr><td>账号</td><td>gtm 的入口，整个组织的最高层级</td></tr><tr><td>容器</td><td>网站、移动应用或设备。</td></tr></tbody></table><h3 id="代码、触发器、变量管理"><a href="#代码、触发器、变量管理" class="headerlink" title="代码、触发器、变量管理"></a>代码、触发器、变量管理</h3><img src="/2020/03/26/introduce-ga-gtm/gtm_back_end.png" alt="gtm_back_end.png" title><h3 id="接入实例"><a href="#接入实例" class="headerlink" title="接入实例"></a>接入实例</h3><ul><li>获取 gtm 跟踪代码</li></ul><img src="/2020/03/26/introduce-ga-gtm/e1.png" alt="e1.png" title><img src="/2020/03/26/introduce-ga-gtm/e2.png" alt="e2.png" title><ul><li>部署入站点，部署成功：</li></ul><img src="/2020/03/26/introduce-ga-gtm/e3.png" alt="e3.png" title><img src="/2020/03/26/introduce-ga-gtm/e4.png" alt="e4.png" title><ul><li>建个触发器:</li></ul><img src="/2020/03/26/introduce-ga-gtm/e5.png" alt="e5.png" title><img src="/2020/03/26/introduce-ga-gtm/e6.png" alt="e6.png" title><img src="/2020/03/26/introduce-ga-gtm/e7.png" alt="e7.png" title><ul><li>在容器中建立代码:</li></ul><img src="/2020/03/26/introduce-ga-gtm/e8.png" alt="e8.png" title><img src="/2020/03/26/introduce-ga-gtm/e9.png" alt="e9.png" title><img src="/2020/03/26/introduce-ga-gtm/e10.png" alt="e10.png" title><img src="/2020/03/26/introduce-ga-gtm/e11.png" alt="e11.png" title><img src="/2020/03/26/introduce-ga-gtm/e12.png" alt="e12.png" title><ul><li>完成后提交:</li></ul><img src="/2020/03/26/introduce-ga-gtm/e13.png" alt="e13.png" title><ul><li>查看效果:</li></ul><img src="/2020/03/26/introduce-ga-gtm/e14.png" alt="e14.png" title><p>以上，就是 gtm 的基本接入实例</p><h3 id="点击上报实例"><a href="#点击上报实例" class="headerlink" title="点击上报实例"></a>点击上报实例</h3><ul><li>目的：期望统计访问站点的人点击文章目录的事件数：</li></ul><img src="/2020/03/26/introduce-ga-gtm/ce1.png" alt="ce1.png" title><ul><li>变量-》配置-》点击相关选项全部勾选</li></ul><img src="/2020/03/26/introduce-ga-gtm/ce2.png" alt="ce2.png" title><ul><li>然后新建触发器</li></ul><img src="/2020/03/26/introduce-ga-gtm/ce3.png" alt="ce3.png" title><img src="/2020/03/26/introduce-ga-gtm/ce4.png" alt="ce4.png" title><img src="/2020/03/26/introduce-ga-gtm/ce5.png" alt="ce5.png" title><ul><li>其中，‘nav-text’可以这样拿到：</li></ul><img src="/2020/03/26/introduce-ga-gtm/ce6.png" alt="ce6.png" title><ul><li>右键目录下的小标题‘ga 常见对接场景归纳与对接方式’，点击检查</li></ul><img src="/2020/03/26/introduce-ga-gtm/ce7.png" alt="ce7.png" title><ul><li>触发器建立好后，建立代码：</li></ul><img src="/2020/03/26/introduce-ga-gtm/ce8.png" alt="ce8.png" title><ul><li>触发条件选择刚才建立的触发器</li></ul><img src="/2020/03/26/introduce-ga-gtm/ce9.png" alt="ce9.png" title><img src="/2020/03/26/introduce-ga-gtm/ce10.png" alt="ce10.png" title><ul><li>代码配置选择 google analytics（熟练后可选择其他第三方 tag 或自定义 html）</li></ul><img src="/2020/03/26/introduce-ga-gtm/ce11.png" alt="ce11.png" title><img src="/2020/03/26/introduce-ga-gtm/ce12.png" alt="ce12.png" title><ul><li>其中，跟踪 ID 就是 google analysis 媒体资源</li></ul><img src="/2020/03/26/introduce-ga-gtm/ce13.png" alt="ce13.png" title><ul><li>代码和触发器设置好后，回到概览点击“预览”</li></ul><img src="/2020/03/26/introduce-ga-gtm/ce14.png" alt="ce14.png" title><img src="/2020/03/26/introduce-ga-gtm/ce15.png" alt="ce15.png" title><ul><li>这时候重新访问 blog，可以看到 blog 已经进入 gtm debug 模式</li></ul><img src="/2020/03/26/introduce-ga-gtm/ce16.png" alt="ce16.png" title><ul><li>点击几下目录下的小标题，然后回到 google analysis 查看实时事件</li></ul><img src="/2020/03/26/introduce-ga-gtm/ce17.png" alt="ce17.png" title><img src="/2020/03/26/introduce-ga-gtm/ce18.png" alt="ce18.png" title><ul><li>可以看到事件已经上报上来</li><li>提交版本变动，正式生效代码和触发器</li></ul><img src="/2020/03/26/introduce-ga-gtm/ce19.png" alt="ce19.png" title><img src="/2020/03/26/introduce-ga-gtm/ce20.png" alt="ce20.png" title><ul><li>发布后，访问站点的用户点击目录下的小标题，就会有事件上报到 Google analysis 中</li></ul><h3 id="动态配置流量来源追踪实例"><a href="#动态配置流量来源追踪实例" class="headerlink" title="动态配置流量来源追踪实例"></a>动态配置流量来源追踪实例</h3><p>营销推广人员通常使用 ‘<a href="https://evanhongyousan.github.io/?utm_source=googleTagManager&amp;utm_medium=fragment&amp;utm_campaign=fragmentTest’">https://evanhongyousan.github.io/?utm_source=googleTagManager&amp;utm_medium=fragment&amp;utm_campaign=fragmentTest’</a> 这样的链接进行流量追踪，但链接完全可以做到‘<a href="https://evanhongyousan.github.io/#agency1’">https://evanhongyousan.github.io/#agency1’</a> 这样的形式，以动态化配置各项 utm 参数</p><ul><li>完成 ga 通过 gtm 引入的配置</li></ul><img src="/2020/03/26/introduce-ga-gtm/utm1.png" alt="utm1.png" title><ul><li>建立两个对照表变量</li></ul><img src="/2020/03/26/introduce-ga-gtm/utm2.png" alt="utm2.png" title><img src="/2020/03/26/introduce-ga-gtm/utm3.png" alt="utm3.png" title><img src="/2020/03/26/introduce-ga-gtm/utm4.png" alt="utm4.png" title><ul><li>在引入 ga 的配置中（网页浏览事件），加入这几个 url-fragment 变量</li></ul><img src="/2020/03/26/introduce-ga-gtm/utm5.png" alt="utm5.png" title><ul><li>‘预览’gtm 的变动后，访问‘<a href="https://evanhongyousan.github.io/#agency2’，可以看到">https://evanhongyousan.github.io/#agency2’，可以看到</a></li></ul><img src="/2020/03/26/introduce-ga-gtm/utm6.png" alt="utm6.png" title><ul><li>再看看 ga 后台的实时流量来源追踪</li></ul><img src="/2020/03/26/introduce-ga-gtm/utm7.png" alt="utm7.png" title><ul><li>设置完成。把 gtm 的改动发布后，便会正式生效</li><li>营销推广人员可以提前在各个入口，规划预留好 agency1~agency99，后续的流量追踪配置变动就不用再依赖开发人员了，可以自行配置。</li></ul>]]></content>
      
      
      <categories>
          
          <category> tech </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 用户增长 </tag>
            
            <tag> google analytics solution </tag>
            
            <tag> ga </tag>
            
            <tag> gtm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>google analytics过滤器简单使用说明</title>
      <link href="/2020/02/08/ga-filter/"/>
      <url>/2020/02/08/ga-filter/</url>
      
        <content type="html"><![CDATA[<img src="/2020/02/08/ga-filter/1.gif" alt="1.gif" title><p>身担运营、推广职责的人员，通常会对特定的运营类、推广类页面有较为精准的数据统计需求，因为他们在制定相关报表时，经常会以单个运营活动为中心进行数据组织</p><p>则上述人员在使用 ga 时，会希望数据视图只展示某个特定活动的数据，故他们在提相关活动需求时，每个活动都会给出新的 ga 埋点需求。</p><p>但其实，ga 本身已经给出了更为优雅的使用方式</p><a id="more"></a><h2 id="ga-过滤器的使用"><a href="#ga-过滤器的使用" class="headerlink" title="ga 过滤器的使用"></a>ga 过滤器的使用</h2><p>下面以一个实例进行说明</p><p>blog 站点 <a href="https://evanhongyousan.github.io/">https://evanhongyousan.github.io/</a> 整站都进行了 ga 埋点，故可以在 ga 后台中看到相关上报数据：</p><img src="/2020/02/08/ga-filter/2.png" alt="2.png" title><p>blog 站点以 blog 生成时间来组织相关 url，其文章页面 url 皆以下面这样的格式生成：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https://evanhongyousan.github.io/2019/12/29/load-img-step-by-step/</span><br><span class="line">https://域名/年/月/日/文章名称/</span><br></pre></td></tr></table></figure><p>站点运营人员希望后续专门统计 2019 年 7 月下所有文章报表数据，可以这么做：</p><ol><li>管理-&gt;blog 站点媒体资源 -&gt; 创建数据视图，新数据视图命名为<code>2019-07&#39;s page</code><img src="/2020/02/08/ga-filter/3.png" alt="3.png" title></li><li>选择视图<code>2019-07&#39;s page</code>，过滤器-&gt;添加过滤条件<img src="/2020/02/08/ga-filter/4.png" alt="4.png" title><img src="/2020/02/08/ga-filter/5.png" alt="5.png" title></li><li>2019 年 7 月下所有文章的 URL 中都带有<code>/2019/07/</code>(比如<a href="https://evanhongyousan.github.io/2019/07/09/redis-transaction/">https://evanhongyousan.github.io/2019/07/09/redis-transaction/</a> )，故过滤条件可以这么设置<img src="/2020/02/08/ga-filter/6.png" alt="6.png" title></li></ol><p>创建了新数据视图并设置好过滤器后，再过几小时，可以看到 ga 后台中会有相应数据：</p><img src="/2020/02/08/ga-filter/1.gif" alt="1.gif" title><blockquote><p>ps：google 的说明文档 <a href="https://support.google.com/analytics/answer/6046990?hl=zh-Hans&ref_topic=1032939" target="_blank" rel="noopener">验证数据视图过滤器</a> 中，新创建的过滤器需要等待 24 小时才能产生效果。本次实践只需要几小时即看到效果，原因可能是数据量小。</p></blockquote><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://support.google.com/analytics/answer/6046990?hl=zh-Hans" target="_blank" rel="noopener">创建和管理数据视图过滤器</a></p><p><a href="https://support.google.com/analytics/answer/6046990?hl=zh-Hans&ref_topic=1032939" target="_blank" rel="noopener">验证数据视图过滤器</a></p>]]></content>
      
      
      <categories>
          
          <category> tech </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 用户增长 </tag>
            
            <tag> google analytics </tag>
            
            <tag> google analytics solution </tag>
            
            <tag> ga过滤器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>项目交接注意事项</title>
      <link href="/2019/12/31/project-switch-notes/"/>
      <url>/2019/12/31/project-switch-notes/</url>
      
        <content type="html"><![CDATA[<p>今天接手老项目，因为环境问题、配置问题浪费了很多时间，于是花了 30 秒考虑该如何尽量杜绝此类问题：</p><ul><li>要求老项目交接人提供清晰的配置文档、环境说明文档（比如 node、npm 的版本号）</li><li>要求老项目交接人提供各项环境都配置完成的 docker</li><li>建立好持续集成，在持续集成机制中有保留完成的环境配置</li></ul>]]></content>
      
      
      <categories>
          
          <category> tech </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github action </tag>
            
            <tag> 项目交接 </tag>
            
            <tag> docker </tag>
            
            <tag> gitlab CI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>命令行中设置NODE_ENV时mac与windows的差异</title>
      <link href="/2019/12/31/different-between-window-and-mac-of-set-NODE-ENV/"/>
      <url>/2019/12/31/different-between-window-and-mac-of-set-NODE-ENV/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h2 id="差异"><a href="#差异" class="headerlink" title="差异"></a>差异</h2><ul><li>windows</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set NODE_ENV=production node xxx.js</span><br></pre></td></tr></table></figure><ul><li>mac</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export NODE_ENV=production node xxx.js</span><br></pre></td></tr></table></figure><h2 id="set-node-env-cross-platform"><a href="#set-node-env-cross-platform" class="headerlink" title="set node_env cross platform"></a>set node_env cross platform</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install --save-dev cross-env</span></span><br></pre></td></tr></table></figure><a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"build"</span>: <span class="string">"cross-env NODE_ENV=production webpack --config build/webpack.config.js"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> tech </category>
          
      </categories>
      
      
        <tags>
            
            <tag> npm </tag>
            
            <tag> NODE_ENV </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web性能优化--图片部分之逐步加载图像</title>
      <link href="/2019/12/29/load-img-step-by-step/"/>
      <url>/2019/12/29/load-img-step-by-step/</url>
      
        <content type="html"><![CDATA[<img src="/2019/12/29/load-img-step-by-step/gif.gif" alt="gif.gif" title><p>在<a href="https://evanhongyousan.github.io/2019/12/28/img-optimizer/">web 性能优化之图片部分</a>中收集了一个把图片转换为低质量 base64code 的工具： lqip-loader。但具体如何将低质量图片占位符和图片逐步加载相结合，就需要自行实践。以下是一次实践探索。</p><a id="more"></a><h2 id="引入-lqip-loader"><a href="#引入-lqip-loader" class="headerlink" title="引入 lqip-loader"></a>引入 lqip-loader</h2><ul><li>创建一个 react 项目 <code>npx create-react-app lqip-loader-demo</code></li><li><code>npm run eject</code> 暴露 webpack 构建配置</li><li><code>npm install --save-dev lqip-loader</code></li><li>在<code>config\webpack.config.js</code>中添加 lqip-loader 配置<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * default file-loader fallback</span></span><br><span class="line"><span class="comment">    **/</span></span><br><span class="line">    test: <span class="regexp">/\.jpe?g$/</span>,</span><br><span class="line">    loaders: [</span><br><span class="line">    &#123;</span><br><span class="line">        loader: <span class="built_in">require</span>.resolve(<span class="string">'lqip-loader'</span>),</span><br><span class="line">        options: &#123;</span><br><span class="line">        path: <span class="string">'/public'</span>, <span class="comment">// your image going to be in media folder in the output dir</span></span><br><span class="line">        name: <span class="string">'[name][hash].[ext]'</span>, <span class="comment">// you can use [hash].[ext] too if you wish,</span></span><br><span class="line">        base64: <span class="literal">true</span>, <span class="comment">// default: true, gives the base64 encoded image</span></span><br><span class="line">        palette: <span class="literal">true</span>, <span class="comment">// default: false, gives the dominant colours palette</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li></ul><p>上述步骤完成后，webpack 打包输入的图片资源，就会变为一个对象：其中 src 属性为原图片资源，preSrc 属性为不超过 400byte 的低质量图片 base64code，下面是一个实例：</p><ul><li><p>修改<code>src\App.js</code>文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">"./App.css"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div className=<span class="string">"App"</span>&gt;</span><br><span class="line">      &lt;img src=&#123;<span class="built_in">require</span>(<span class="string">"./images/1.jpg"</span>).preSrc&#125; alt=<span class="string">"img"</span>&gt;&lt;<span class="regexp">/img&gt;</span></span><br><span class="line"><span class="regexp">      &lt;img src=&#123;require("./im</span>ages/<span class="number">1.</span>jpg<span class="string">").src&#125; alt="</span>img<span class="string">"&gt;&lt;/img&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">  );</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">export default App;</span></span><br></pre></td></tr></table></figure></li><li><p>于是可以看到第一个 img 标签直接使用低质量 base64code，第二个 img 标签仍然对高质量的图片资源做出请求</p><img src="/2019/12/29/load-img-step-by-step/1.png" alt="1.png" title></li></ul><h2 id="图片逐步加载"><a href="#图片逐步加载" class="headerlink" title="图片逐步加载"></a>图片逐步加载</h2><p>图片逐步加载，就是在页面载入时，先显示低质量 base64code 图片占位符，在页面 onload 事件触发后（就是用户可交互后），再进行高质量图片的载入</p><p>要完成上述需求，需要完成组件<code>src\LqImg.js</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LqImg</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      src: props.img.preSrc,</span><br><span class="line">      className: props.className,</span><br><span class="line">      alt: props.alt,</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">this</span>.loadImg();</span><br><span class="line">  &#125;</span><br><span class="line">  loadImg() &#123;</span><br><span class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">"load"</span>, () =&gt; &#123;</span><br><span class="line">      <span class="keyword">let</span> img = <span class="keyword">new</span> Image();</span><br><span class="line">      img.src = <span class="keyword">this</span>.props.img.src;</span><br><span class="line">      img.onload = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123; <span class="attr">src</span>: <span class="keyword">this</span>.props.img.src &#125;);</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;img</span><br><span class="line">        src=&#123;<span class="keyword">this</span>.state.src&#125;</span><br><span class="line">        className=&#123;<span class="keyword">this</span>.state.className&#125;</span><br><span class="line">        alt=&#123;<span class="keyword">this</span>.state.alt&#125;</span><br><span class="line">      /&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> LqImg;</span><br></pre></td></tr></table></figure><p>然后改写<code>src\App.js</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">"./App.css"</span>;</span><br><span class="line"><span class="keyword">import</span> LqImg <span class="keyword">from</span> <span class="string">"./LqImg"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div className=<span class="string">"App"</span>&gt;</span><br><span class="line">      &lt;LqImg img=&#123;<span class="built_in">require</span>(<span class="string">"./images/1.jpg"</span>)&#125; /&gt;</span><br><span class="line">      &lt;LqImg img=&#123;<span class="built_in">require</span>(<span class="string">"./images/2.jpg"</span>)&#125; /&gt;</span><br><span class="line">      &lt;LqImg img=&#123;<span class="built_in">require</span>(<span class="string">"./images/3.jpg"</span>)&#125; /&gt;</span><br><span class="line">      &lt;LqImg img=&#123;<span class="built_in">require</span>(<span class="string">"./images/4.jpg"</span>)&#125; /&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default App;</span></span><br></pre></td></tr></table></figure><p>完成后，可以看到</p><img src="/2019/12/29/load-img-step-by-step/gif.gif" alt="gif.gif" title><blockquote><p>上述 demo 可看 <a href="https://github.com/EvanHongYousan/lqip-loader-demo" target="_blank" rel="noopener">lqip-loader-demo</a></p></blockquote><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://github.com/zouhir/lqip-loader" target="_blank" rel="noopener">lqip-loader</a></p>]]></content>
      
      
      <categories>
          
          <category> tech </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
            <tag> 图片压缩 </tag>
            
            <tag> 性能 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web性能优化之图片部分</title>
      <link href="/2019/12/28/img-optimizer/"/>
      <url>/2019/12/28/img-optimizer/</url>
      
        <content type="html"><![CDATA[<img src="/2019/12/28/img-optimizer/cover.png" alt="cover.png" title><p>一般而言，在静态资源中，图片大小占比远大于 js、css 大小占比。对图片压缩的一些体积，可能已经比完整的 js、css 文件要大。故在 web 性能优化范畴中，图片优化是非常重要的组成部分。</p><a id="more"></a><h2 id="图⽚格式和应用场景"><a href="#图⽚格式和应用场景" class="headerlink" title="图⽚格式和应用场景"></a>图⽚格式和应用场景</h2><h3 id="JPEG"><a href="#JPEG" class="headerlink" title="JPEG"></a>JPEG</h3><ul><li>特性：不支持透明度</li><li>非常适合：颜色丰富的照片、彩色图大焦点图、通栏 banner 图；结构不规则的图形。</li><li>不适合：线条图形和文字、图标图形，因为它的压缩算法不太这些类型的图形；</li></ul><h3 id="PNG"><a href="#PNG" class="headerlink" title="PNG"></a>PNG</h3><ul><li>特性：无损压缩，支持透明度</li><li>非常适合：纯色、透明、线条绘图，图标；边缘清晰、有大块相同颜色区域；颜色数较少<br>但需要半透明。</li><li>不适合：彩色图像（体积太大）</li></ul><h3 id="GIF"><a href="#GIF" class="headerlink" title="GIF"></a>GIF</h3><ul><li>特性：仅支持完全透明和完全不透明</li><li>非常适合：动画，图标</li><li>不适合：存储彩色图片（每个像素只有 8 比特）</li></ul><h3 id="Webp"><a href="#Webp" class="headerlink" title="Webp"></a>Webp</h3><ul><li>特性：无损的 Webp 比 PNG 小 26%，有损的 Webp 比 JPEG 小 25-34％，比 GIF 有更好的动画</li><li>非常适合：适用于图形和半透明图像</li><li>不适合：最多处理 256 色，不适合于彩色图片</li></ul><h2 id="图片优化细则"><a href="#图片优化细则" class="headerlink" title="图片优化细则"></a>图片优化细则</h2><h3 id="压缩"><a href="#压缩" class="headerlink" title="压缩"></a>压缩</h3><p>根据自身项目所属工作流，比如 webpack 或 gulp，搜索<code>webpack images compress</code>或<code>gulp images compress</code>便可</p><h3 id="图片尺寸随网络环境变化"><a href="#图片尺寸随网络环境变化" class="headerlink" title="图片尺寸随网络环境变化"></a>图片尺寸随网络环境变化</h3><p>不同网络环境（Wifi/4G/3G）下，加载不同尺寸和像素的图片</p><h3 id="响应式图片"><a href="#响应式图片" class="headerlink" title="响应式图片"></a>响应式图片</h3><ul><li><p>JavaScript 绑定事件检测窗口大小</p></li><li><p>CSS 媒体查询</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width:</span> <span class="number">640px</span>) &#123;</span><br><span class="line">  <span class="selector-tag">my_image</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">640px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>img 标签属性</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span></span></span><br><span class="line"><span class="tag">  <span class="attr">srcset</span>=<span class="string">"img-320w.jpg, img-640w.jpg 2x, img-960w.jpg 3x"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">src</span>=<span class="string">"img-960w.jpg"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">alt</span>=<span class="string">"img"</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br><span class="line">（x 描述符：表示图像的设备像素比）</span><br></pre></td></tr></table></figure></li></ul><h3 id="逐步加载图像"><a href="#逐步加载图像" class="headerlink" title="逐步加载图像"></a>逐步加载图像</h3><p>在清晰的图像加载完成前，先使用统一占位符</p><ul><li>把图片转换为低质量 base64code：lqip-loader</li><li>把图片转换为低质量 svg：sqip</li></ul><h3 id="其余方式"><a href="#其余方式" class="headerlink" title="其余方式"></a>其余方式</h3><ul><li>小于 10kb 的图片：转换为 base64code：url-loader</li><li>单一颜色小图标可使用 web font 代替</li><li>Image spriting（雪碧图）</li></ul>]]></content>
      
      
      <categories>
          
          <category> tech </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
            <tag> 图片压缩 </tag>
            
            <tag> 性能 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>github action配置记录</title>
      <link href="/2019/12/27/github-action-config-log/"/>
      <url>/2019/12/27/github-action-config-log/</url>
      
        <content type="html"><![CDATA[<img src="/2019/12/27/github-action-config-log/gif.gif" alt="gif.gif" title><p>前两天看到个关键词是“github action”，经查询了解到是 github 的持续集成服务，今天来进行配置尝试</p><a id="more"></a><h2 id="配置项目说明"><a href="#配置项目说明" class="headerlink" title="配置项目说明"></a>配置项目说明</h2><table><thead><tr><th>项目</th><th>说明</th></tr></thead><tbody><tr><td><a href="https://github.com/EvanHongYousan/blog" target="_blank" rel="noopener">https://github.com/EvanHongYousan/blog</a></td><td>blog 源码</td></tr><tr><td><a href="https://github.com/EvanHongYousan/EvanHongYousan.github.io" target="_blank" rel="noopener">https://github.com/EvanHongYousan/EvanHongYousan.github.io</a></td><td>静态文件</td></tr></tbody></table><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ul><li>执行 <code>ssh-keygen -f blog-deploy-key</code>,在 <code>.ssh/</code>文件中 生成一组 公钥(blog-deploy-key.pub)与私钥（blog-deploy-key）</li><li>进入 EvanHongYousan.github.io 项目，<code>setting -&gt; deploy keys -&gt; add deploy key</code>,命名<code>p_rsa</code>，把 blog-deploy-key.pub 中的内容填入<blockquote><p>这里注意，需要把<code>Allow write access</code>选项钩上</p></blockquote></li><li>进入 blog 项目，<code>setting -&gt; Secrets -&gt; add a new secret</code>,命名<code>s_rsa</code>,把 blog-deploy-key 中的内容填入</li><li>hexo 中的发布配置，改为 ssh 形式</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">git@github.com:EvanHongYousan/EvanHongYousan.github.io.git</span> <span class="comment">#https://bitbucket.org/JohnSmith/johnsmith.bitbucket.io</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span> <span class="comment">#published</span></span><br><span class="line">  <span class="attr">message:</span></span><br></pre></td></tr></table></figure><ul><li>最后在 blog 项目，新建 <code>.github/workflows/main.yml</code> 文件</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Deploy</span> <span class="string">Blog</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span> <span class="string">[push]</span> <span class="comment"># 当有新push时运行</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span> <span class="comment"># 一项叫做build的任务</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span> <span class="comment"># 在最新版的Ubuntu系统下运行</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="comment"># 将仓库内master分支的内容下载到工作目录</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v1</span> <span class="comment"># 脚本来自 https://github.com/actions/checkout</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Use</span> <span class="string">Node.js</span> <span class="number">10.</span><span class="string">x</span> <span class="comment"># 配置Node环境</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/setup-node@v1</span> <span class="comment"># 配置脚本来自 https://github.com/actions/setup-node</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">node-version:</span> <span class="string">"10.x"</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Setup</span> <span class="string">Hexo</span> <span class="string">env</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="attr">ACTION_DEPLOY_KEY:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.s_rsa</span> <span class="string">&#125;&#125;</span> <span class="comment">#s_rsa就是填入私钥时的命名</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">          <span class="comment"># set up private key for deploy</span></span><br><span class="line">          <span class="string">mkdir</span> <span class="string">-p</span> <span class="string">~/.ssh/</span></span><br><span class="line">          <span class="string">echo</span> <span class="string">"$ACTION_DEPLOY_KEY"</span> <span class="string">|</span> <span class="string">tr</span> <span class="string">-d</span> <span class="string">'\r'</span> <span class="string">&gt;</span> <span class="string">~/.ssh/id_rsa</span> <span class="comment"># 配置秘钥</span></span><br><span class="line">          <span class="string">chmod</span> <span class="number">600</span> <span class="string">~/.ssh/id_rsa</span></span><br><span class="line">          <span class="string">ssh-keyscan</span> <span class="string">github.com</span> <span class="string">&gt;&gt;</span> <span class="string">~/.ssh/known_hosts</span></span><br><span class="line">          <span class="comment"># set git infomation</span></span><br><span class="line">          <span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">user.name</span> <span class="string">'XXXXXX'</span> <span class="comment"># 换成你自己的邮箱和名字</span></span><br><span class="line">          <span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">user.email</span> <span class="string">'XXXXXX'</span></span><br><span class="line">          <span class="comment"># install dependencies</span></span><br><span class="line">          <span class="string">npm</span> <span class="string">i</span> <span class="string">-g</span> <span class="string">hexo-cli</span> <span class="comment"># 安装hexo</span></span><br><span class="line">          <span class="string">npm</span> <span class="string">i</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">          <span class="comment"># publish</span></span><br><span class="line">          <span class="string">hexo</span> <span class="string">generate</span> <span class="string">&amp;&amp;</span> <span class="string">hexo</span> <span class="string">deploy</span> <span class="comment"># 执行部署程序</span></span><br></pre></td></tr></table></figure><ul><li>至此，任意 blog 项目任意 push 后，都会出发 github action<img src="/2019/12/27/github-action-config-log/gif.gif" alt="gif.gif" title></li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://hdj.me/github-actions-hexo-cicd/" target="_blank" rel="noopener">如何正确的使用 GitHub Actions 实现 Hexo 博客的 CICD</a></p>]]></content>
      
      
      <categories>
          
          <category> tech </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github action </tag>
            
            <tag> 自动化 </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>处理跑roadhog开发构建时抛出的“端口已被占用”提示</title>
      <link href="/2019/12/26/roadhog-already-running-port-bug-fix/"/>
      <url>/2019/12/26/roadhog-already-running-port-bug-fix/</url>
      
        <content type="html"><![CDATA[<p>跑 roadhog 开发环境构建时，roadhog 抛出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">? Something is already running on port 8000.</span><br><span class="line">Would you like to run the app on another port instead? (Y/n)</span><br></pre></td></tr></table></figure><p>但我检查后发现 8000 端口并未被占用</p><a id="more"></a><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>添加 host：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1 localhost</span><br></pre></td></tr></table></figure><p>于是 roadhog 的服务可正常监听 8000 了</p><h2 id="原理猜测"><a href="#原理猜测" class="headerlink" title="原理猜测"></a>原理猜测</h2><p>我把上面那个 host 取消，在命令行中 ping 了一下 localhost</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ping localhost</span><br><span class="line">ping: cannot resolve localhost: Unknown host</span><br></pre></td></tr></table></figure><p>发现解析失败</p><p>估计是 roadhog 内部执行某操作时，直接使用了“localhost”，但 localhost 在 mac 上会解析失败，于是导致问题出现</p>]]></content>
      
      
      <categories>
          
          <category> tech </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bug fix </tag>
            
            <tag> webpack </tag>
            
            <tag> roadhog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>处理git无法检测文件名大小写变动问题</title>
      <link href="/2019/12/25/how-to-change-file-name-case/"/>
      <url>/2019/12/25/how-to-change-file-name-case/</url>
      
        <content type="html"><![CDATA[<p>windows 和 os x 默认不区分文件名大小写</p><p>linux 是默认区分文件名大小写</p><p>另外观察到，至少在 os x 下，git 默认也不区分文件名大小写</p><p>这就很容易带来问题</p><blockquote><p>估计和文件系统有关，先不深究</p><a id="more"></a></blockquote><h2 id="问题回溯"><a href="#问题回溯" class="headerlink" title="问题回溯"></a>问题回溯</h2><p>代码中，对 api.js 的引用是这么写的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; xxxMethod &#125; <span class="keyword">from</span> <span class="string">"./Api"</span>;</span><br></pre></td></tr></table></figure><p>在 os x 中运行正常，未报错</p><p>部署至 linux 服务器时，就报典型的“can’t resolve ./Api ……” 这样的错误</p><p>解决方式很明显：文件<code>api.js</code> 改名为 <code>Api.js</code></p><p>不过，在本地通过编辑器做了文件名更改后，发现 git 未检测到文件名变动，于是要对此进行解决</p><h2 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h2><p>经搜索后，发现有下面几个方法</p><ol><li><code>git mv -f OldFileNameCase newfilenamecase</code></li><li><code>git config core.ignorecase false</code></li><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Rename FILE.ext to whatever.ext</span><br><span class="line">Stage that file</span><br><span class="line">Now rename whatever.ext to file.ext</span><br><span class="line">Stage that file again</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>方法 2 也会引来问题，具体请看<a href="https://www.jianshu.com/p/df0b0e8bcf9b" target="_blank" rel="noopener">解决 Git 默认不区分文件名大小写的问题</a></p></blockquote><p>最后选择了方法 1，问题解决</p><h2 id="延伸"><a href="#延伸" class="headerlink" title="延伸"></a>延伸</h2><p>本次问题出现，说明”文件名建议只使用小写字母，不使用大写字母。”这种规范果然有其出现的原因。</p><p>后续制定相关规范时，若无特别原因，都要将其纳入</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://stackoverflow.com/questions/17683458/how-do-i-commit-case-sensitive-only-filename-changes-in-git" target="_blank" rel="noopener">How do I commit case-sensitive only filename changes in Git?</a><br><a href="https://www.jianshu.com/p/df0b0e8bcf9b" target="_blank" rel="noopener">解决 Git 默认不区分文件名大小写的问题</a><br><a href="https://www.ruanyifeng.com/blog/2017/02/filename-should-be-lowercase.html" target="_blank" rel="noopener">为什么文件名要小写？</a></p>]]></content>
      
      
      <categories>
          
          <category> tech </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bug fix </tag>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一次web性能优化实施记录</title>
      <link href="/2019/12/23/web-performance-growth/"/>
      <url>/2019/12/23/web-performance-growth/</url>
      
        <content type="html"><![CDATA[<img src="/2019/12/23/web-performance-growth/loading.gif" alt="loading.gif" title><p>当前 web 应用访问速度过慢，用户等待时间过长，对用户体验造成很大影响。而用户访问 web 页面等待时间过长，会降低用户对品牌的信任度，加大了品牌运营工作的困难度</p><p>另外，搜索引擎会降低加载速度过慢站点的权重，使站点曝光率下降</p><a id="more"></a><h3 id="项目部署配置检查"><a href="#项目部署配置检查" class="headerlink" title="项目部署配置检查"></a>项目部署配置检查</h3><ul><li>检查当前 cdn 节点部署地区</li><li>构建出来的文件如何与 cdn 节点部署对应上</li><li>图片资源是否有压缩，页面是否有很多小请求</li><li>js、css 打包是否有优化空间</li></ul><h3 id="图片解析压缩优化"><a href="#图片解析压缩优化" class="headerlink" title="图片解析压缩优化"></a>图片解析压缩优化</h3><h4 id="压缩"><a href="#压缩" class="headerlink" title="压缩"></a>压缩</h4><p>工具选型</p><ul><li>gulp-imagemin</li><li>gulp-smushit</li><li>gulp-tinypng-compress</li></ul><p>压缩率对比</p><ul><li>gulp-imagemin:<ul><li>可处理 jpg、png、svg、gif</li><li>整体压缩率 27.5%，针对 svg 压缩率为 44.9%</li><li>压缩时间短：2 分钟内</li></ul></li><li>gulp-smushit:<ul><li>只能处理 jpg、png、gif，不能处理 svg</li><li>压缩率高，57.1%</li><li>仔细扣图片细节，能看到一点点色差</li><li>压缩时间长：半小时左右<ul><li>原因：使用 resmush.it 的 api 压缩图片</li></ul></li><li>网络请求断开会直接显示压缩完成，无异常抛出</li></ul></li><li>gulp-tinypng-compress<ul><li>压缩时间长：半小时左右</li><li>原因：使用<a href="https://tinypng.com/的api压缩图片" target="_blank" rel="noopener">https://tinypng.com/的api压缩图片</a></li><li>以使用 API 的方式，每月只能压 500 张</li><li>网络请求断开时会有异常抛出</li></ul></li></ul><p>结论</p><ul><li>最后决定使用 gulp-imagemin 做本地图片压缩</li></ul><h4 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h4><p>改动背景</p><ul><li>由 webpack 对资源做统一解析输出管理，可减少开发人员对资源发布目录的管理工作量</li></ul><p>目标</p><ul><li>小图片皆转为 base64 code，以减少 http 请求</li><li>新的图片解析方式不影响原有图片引用方式</li></ul><p>工具确认</p><ul><li>url-loader</li><li>svg-url-loader</li><li>image-webpack-plugin</li></ul><p>解析输出 hash name 的影响</p><ul><li>对同一张图片做解析输出，其 hash name 会保持不变，故浏览器缓存对同一图片可生效</li></ul><p>改动说明</p><ul><li>webpack 输出文件夹改为 cdn 文件夹</li><li>gulp 中的 clean task 取消</li><li>gulp 只负责压缩图片，并把图片复制至 cdn 文件夹</li><li>被 webpack 解析到的图片（jpg、png、gif、svg）会被压缩</li></ul><p>对开发的影响</p><ul><li>后续静态资源（比如图片），可和对应业务 js、css 文件放到同一业务文件夹中，由 webpack 统一解析处理</li><li>原有图片引用方式仍然生效，但不建议继续使用</li></ul><h3 id="css、js-打包优化"><a href="#css、js-打包优化" class="headerlink" title="css、js 打包优化"></a>css、js 打包优化</h3><p>改动背景</p><ul><li>站点页面在进行载入时，除了当前页面外，也会载入其他页面的 js、css 资源，阻碍了页面的尽快展示</li></ul><p>目标</p><ul><li>在进行页面载入时，只载入页面本身的必须资源</li></ul><p>选型</p><ul><li>多页面架构，每个页面自行引入、管理其资源</li><li>按路由进行动态加载模块，使非必须模块不影响页面渲染</li><li>寻找 webpack loader、插件，在 webpack 进行打包时自动按路由对资源做切分</li></ul><p>分析</p><ul><li>当前项目是单页面+ssr 架构项目，已经有一定的代码积累</li><li>多页面架构控制资源简单，但对当前项目改动太大</li><li>按路由进行模块动态加载，需要在业务代码中的模块引入处做处理，对当前项目改动也非常大 – import() 语法</li><li>在查询 webpack 代码分割相关信息过程中，发现业界偏向于以代码功能、类库作为代码分割点，未发现以路由作为代码分割点的解决方案</li></ul><p>决策</p><ul><li>故本次对 css、js 的打包优化，便先遵循业界常用做法：把经常变动的业务代码与不大变动的第三方类库代码分割</li></ul><p>改动说明</p><ul><li>目前，react、react-dom、react-intl、mirrorx、intl、antd、antd-mobile、svgo 这些类库已在项目中被锁死版本号，故这部分类库的 js、css 会被单独抽出合并为 common-vendors.js、common-vendors.css，属于长时间不变动的缓存</li><li>其余 node_modules 中的类库会被抽出合并为 vendor.js、vendor.css，属于较长时间不变动的缓存</li><li>剩余业务代码被合并为 app.js、app.css，变动较为频繁</li></ul><p>改动影响</p><ul><li>对用户：在已经访问过站点后，站点若有变动，则只需重新载入变动过的业务代码即可</li><li>对开发：无影响</li></ul><h3 id="按需加载-polyfill"><a href="#按需加载-polyfill" class="headerlink" title="按需加载 polyfill"></a>按需加载 polyfill</h3><p>改动背景</p><ul><li>目前站点打包 js，把整个 polyfill 打入。但项目实际并未用到所有 polyfill 提供的特性。</li></ul><p>选型</p><ul><li>方案一：babel6 升级至 babel 7，使用 babel 7 提供的新特性：静态分析项目中的代码，开发者使用到相关特性，再把对应 polyfill 打入</li><li>方案二：使用第三方 polyfill 服务，引入第三方 polyfill 时，会自动根据浏览器特性针对性注入 polyfill，我们不再把 polyfill 打包进去</li><li>方案三：方案二改进版 – 自建 polyfill 服务</li></ul><p>分析</p><ul><li>方案一：项目使用 babel 6 及其配套插件，需要升级到 babel 7，升级过程估计有不少问题，且有些问题可能比较难被发现</li><li>方案二：工作量小，不易出错。不做静态代码分析，按浏览器特性补齐 polyfill。依赖于第三方服务，第三方服务出问题，我们的站点马上就会挂掉</li><li>方案三：稳定性比方案二高，其余特性与方案二一致</li></ul><p>决策</p><ul><li>业务对稳定性有高要求的选方案一，否则选方案二</li><li>本次选方案一</li></ul><p>改动说明</p><ul><li>使用 babel-upgrade 执行 babel 6 到 babel 7 的升级</li><li>webpack 中 babel 相关配置项被改动</li></ul><p>改动影响</p><ul><li>使用 babel 6 打包出来的 js 代码，总大小为 3415KB, 使用 babel 7 且使用 useBuiltIns: usage 配置打包出来的 js 代码，总大小为 2662Kb – js 体积减少 22%</li><li>对开发：无影响</li></ul>]]></content>
      
      
      <categories>
          
          <category> tech </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
            <tag> 性能 </tag>
            
            <tag> cdn </tag>
            
            <tag> 部署 </tag>
            
            <tag> gulp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack config</title>
      <link href="/2019/08/30/webpack-config/"/>
      <url>/2019/08/30/webpack-config/</url>
      
        <content type="html"><![CDATA[<p>想让源文件加入到构建流程中去被 Webpack 控制，配置 entry。<br>想自定义输出文件的位置和名称，配置 output。<br>想自定义寻找依赖模块时的策略，配置 resolve。<br>想自定义解析和转换文件的策略，配置 module，通常是配置 module.rules 里的 Loader。<br>其它的大部分需求可能要通过 Plugin 去实现，配置 plugin。</p><a id="more"></a><img src="/2019/08/30/webpack-config/overview.png" alt="overview.png" title>]]></content>
      
      
      <categories>
          
          <category> tech </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用ga进行邮件营销跟踪</title>
      <link href="/2019/08/29/edm-ga/"/>
      <url>/2019/08/29/edm-ga/</url>
      
        <content type="html"><![CDATA[<p>在非大陆环境下的营销活动中，邮件营销（edm）是不可或缺的一环。而邮件营销的效果，基本可由邮件打开率、邮件链接追踪情况得出。</p><img src="/2019/08/29/edm-ga/7.png" alt="7.png" title><a id="more"></a><h3 id="ga-准备"><a href="#ga-准备" class="headerlink" title="ga 准备"></a>ga 准备</h3><ol><li>注册 google 账号，然后进入<a href="https://analytics.google.com/analytics/web/#/" target="_blank" rel="noopener">https://analytics.google.com/analytics/web/#/</a></li><li>创建媒体资源<ol><li>如果是新账号，则需要先新建 ga 账号<img src="/2019/08/29/edm-ga/1.png" alt="1.png" title></li><li>创建媒体资源<img src="/2019/08/29/edm-ga/2.png" alt="2.png" title></li><li>进入媒体资源设置，获取到跟踪 ID<img src="/2019/08/29/edm-ga/3.png" alt="3.png" title></li><li>点击“跟踪信息”，再点击“跟踪代码”，得到代码<img src="/2019/08/29/edm-ga/4.png" alt="4.png" title></li></ol></li></ol><p>至此，准备完成</p><h3 id="邮件打开率"><a href="#邮件打开率" class="headerlink" title="邮件打开率"></a>邮件打开率</h3><p>通过 img 标签，使用 ga 的<a href="https://developers.google.com/analytics/devguides/collection/protocol/v1/reference" target="_blank" rel="noopener">Measurement Protocal Reference</a>协议，把数据上报至 ga server。下面是一个 img 标签例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=<span class="string">"https://www.google-analytics.com/collect?v=1&amp;tid=UA-XXXXXXXX-1&amp;cid=CLIENT_ID_NUMBER&amp;t=event&amp;ec=email&amp;ea=open&amp;el=recipient_id&amp;cs=newsletter&amp;cm=email&amp;cn=Campaign_Name&amp;z=123456"</span> /&gt;</span><br></pre></td></tr></table></figure><p>各个参数含义</p><table><thead><tr><th>key</th><th>value 说明</th></tr></thead><tbody><tr><td>v</td><td>ga 版本号码，值为 1。必填</td></tr><tr><td>tid</td><td>ga 跟踪 ID， 用于区分是要向哪个 Google Analytics（分析）媒体资源发送数据。必填</td></tr><tr><td>cid</td><td>每位用户专属的 ID，必填</td></tr><tr><td>t</td><td>针对特定用户收集的互动数据类型，针对当前文档的场景，可考虑设为 emailview。必填</td></tr><tr><td>ec</td><td>事件类别，这裡设 email</td></tr><tr><td>ea</td><td>事件活动，这裡设 open</td></tr><tr><td>el</td><td>事件标籤</td></tr><tr><td>cs</td><td>广告活动来源，这裡设 newsletter</td></tr><tr><td>cm</td><td>广告活动媒介，这裡同样设 email</td></tr><tr><td>cn</td><td>广告活动名称</td></tr><tr><td>z</td><td>缓存无效化随机数字</td></tr></tbody></table><p>更详细的参数参考在<a href="https://developers.google.com/analytics/devguides/collection/protocol/v1/parameters" target="_blank" rel="noopener">这里</a></p><p>下面是一个真实例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:<span class="comment">//www.google-analytics.com/collect?v=1&amp;tid=UA-146663661-1&amp;cid=001&amp;t=event&amp;ec=email&amp;ea=open&amp;el=recipient_id&amp;cs=newsletter&amp;cm=email&amp;cn=Campaign_Name&amp;z=123456</span></span><br></pre></td></tr></table></figure><p>使用浏览器直接做 get 请求</p><img src="/2019/08/29/edm-ga/6.png" alt="6.png" title><p>在 ga 中可以看到</p><img src="/2019/08/29/edm-ga/7.png" alt="7.png" title><blockquote><p>当然，使用 img 标签的缺陷，就在于当邮件系统阻挡图片时，上报会失效</p></blockquote><h3 id="邮件链接追踪情况"><a href="#邮件链接追踪情况" class="headerlink" title="邮件链接追踪情况"></a>邮件链接追踪情况</h3><p>追踪邮件链接，主要使用<a href="https://support.google.com/analytics/answer/1033867?hl=zh-Hant" target="_blank" rel="noopener">网址产生器</a><br>为链接加上 get 参数标识别。<br>比如，给</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:<span class="comment">//act.moomoo.com/invite?code=643273466b693964783047384d452b397054794277773d3d&amp;type=promotion</span></span><br></pre></td></tr></table></figure><p>加上 get 参数标识，变成</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:<span class="comment">//act.moomoo.com/invite?code=643273466b693964783047384d452b397054794277773d3d&amp;type=promotion&amp;utm_source=google&amp;utm_medium=email&amp;utm_campaign=invite_act&amp;utm_term=invite%2Bstock&amp;utm_content=invite_link</span></span><br></pre></td></tr></table></figure><img src="/2019/08/29/edm-ga/5.png" alt="5.png" title><p>若目标页面引入了 ga 跟踪代码，ga 跟踪代码会识别到链接上的 get 参数，进行上报时就会按照参数值进行归类整合</p><p>以下是 google 提供的参数填写说明</p><table><thead><tr><th>key</th><th>value 说明</th><th>example</th></tr></thead><tbody><tr><td>utm_source</td><td>广告活动来源：必须提供，表示搜寻引擎、电子报名称或其他来源。</td><td>utm_source=google</td></tr><tr><td>utm_medium</td><td>广告活动媒介：必须提供，表示媒介，例如电子邮件或单次点击出价。</td><td>utm_medium=cpc</td></tr><tr><td>utm_term</td><td>广告活动字词：用于付费搜寻，表示此广告的关键字。</td><td>utm_term=running+shoes</td></tr><tr><td>utm_content</td><td>广告活动内容：用于 A/B 测试和指定内容广告，表示连到同一个网址的不同广告或连结。</td><td>utm_content=logolink 或 utm_content=textlink</td></tr><tr><td>utm_campaign</td><td>广告活动名称：用于关键字分析，表示某项产品促销或策略性广告活动。</td><td>utm_campaign=spring_sale</td></tr></tbody></table><h3 id="与现有业务结合"><a href="#与现有业务结合" class="headerlink" title="与现有业务结合"></a>与现有业务结合</h3><p>对于业务事件触发的自动邮件推送，开发人员只需要往邮件模板里添加 img 标签、跳转链接添加 ga 参数便可</p><p>对于公司内部产品、运营人员的主动推送的营销邮件，也可请求开发人员协助，望 html 中添加上报。</p><p>所以，加上报并不算麻烦，相关工作重点仍然是营销渠道开发与管理维护。</p><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p><a href="https://www.analyticsdavis.com/2014/05/email-and-edm-tracking-by-google-analytics.html" target="_blank" rel="noopener">追蹤 Email 與 EDM 開信點擊－透過 Google Analytics</a></p>]]></content>
      
      
      <categories>
          
          <category> tech </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 用户增长 </tag>
            
            <tag> google analytics </tag>
            
            <tag> 邮件营销 </tag>
            
            <tag> google analytics solution </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>geohash算法</title>
      <link href="/2019/08/15/geohash/"/>
      <url>/2019/08/15/geohash/</url>
      
        <content type="html"><![CDATA[<p>对于地图元素，通常使用经纬度坐标表示，经度为（-180，180], 纬度为（-90， 90]。对于计算确定几个点互相之间的距离时，使用勾股定理足以。</p><p>但如果要计算距离某点一定范围内有多少个点时，“遍历所有的点计算出距离再做比对”在性能上肯定无法令人接受。<br>所以，这种时候，可以考虑直接使用 sql 划分矩形：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select id from positions where x0-r &lt; x &lt; x0+r and y0-r &lt; y &lt; y0+r</span><br></pre></td></tr></table></figure><p>不过，这种查询方式，在高并发场景，性能可能仍然达不到要求</p><img src="/2019/08/15/geohash/1.png" alt="1.png" title><a id="more"></a><h2 id="geohash"><a href="#geohash" class="headerlink" title="geohash"></a>geohash</h2><p>业界比较通用的地理位置距离排序算法是 GeoHash 算法。</p><p>以一句话总结的话：GeoHash 算法将二维的经纬度数据映射到一维的整数，这样所有的元素都将在挂载到一条线上，距离靠近的二维坐标映射到一维后的点之间距离也会很接近。</p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><img src="/2019/08/15/geohash/2.png" alt="2.png" title><img src="/2019/08/15/geohash/3.png" alt="3.png" title><p>假设有一个点[31.1932993, 121.43960190000007]，则：</p><ol><li>经度在 [-180,0) 范围内的标识为 0，经度范围在 [0, 180) 度的标识为 1;</li><li>继续划分，经度范围在 [0,90) 的标识为 0，经度范围在 [90,180) 的标识为 1;</li><li>这样，我们划分 15 次，得到经度的标识二进制串为 110101100101101;</li><li>对纬度同样划分，得到纬度的标识二进制串为 101011000101110;</li><li>按照“偶数位放经度，奇数位放纬度”的规则，重新组合经度和纬度的二进制串，11100 11001 00011 00111 10110</li><li>转换成十进制是 28 25 28 3 7 22，查表编码得到最终结果，wtw37q;</li></ol><img src="/2019/08/15/geohash/4.png" alt="4.png" title><img src="/2019/08/15/geohash/5.png" alt="5.png" title><img src="/2019/08/15/geohash/6.png" alt="6.png" title><p>之后，作出查询时，就是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select id from positions where geoHash like &quot;wtw37%&quot;;</span><br></pre></td></tr></table></figure><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><ol><li>Z 阶曲线有一个比较严重的问题，虽然有局部保序性，但是它也有突变性。在每个 Z 字母的拐角，都有可能出现顺序的突变。<img src="/2019/08/15/geohash/7.png" alt="7.png" title>看上图中标注出来的蓝色的点点。每两个点虽然是相邻的，但是距离相隔很远。看右下角的图，两个数值邻近红色的点两者距离几乎达到了整个正方形的边长。两个数值邻近绿色的点也达到了正方形的一半的长度。</li></ol><blockquote><p>获取到的点都按勾股定理算一算，排除不合理的点</p></blockquote><ol start="2"><li>Geohash 的另外一个缺点是，如果选择不好合适的网格大小，判断邻近点可能会比较麻烦。<img src="/2019/08/15/geohash/8.png" alt="8.png" title></li></ol><img src="/2019/08/15/geohash/9.png" alt="9.png" title><blockquote><p>仔细观察相邻方格，我们会发现两个小方格会在 经度或纬度的二进制码上相差 1；我们通过 GeoHash 码反向解析出二进制码后，将其经度或纬度（或两者）的二进制码加一、减一，再次组合为 GeoHash 码。然后获取到的点都按勾股定理算一算，排除不合理的点</p></blockquote><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><img src="/2019/08/15/geohash/10.png" alt="10.png" title>]]></content>
      
      
      <categories>
          
          <category> tech </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>增长黑客小结</title>
      <link href="/2019/08/15/growth-hacker/"/>
      <url>/2019/08/15/growth-hacker/</url>
      
        <content type="html"><![CDATA[<p>“增长黑客”这一概念近年来兴起于美国互联网创业圈，最早是由互联网创业者 Sean Ellis 提出。增长黑客是介于技术和市场之间的新型团队角色，主要依靠技术和数据的力量来达成各种营销目标，而非传统意义上靠砸钱来获取用户的市场推广角色。他们能从单线思维者时常忽略的角度和难以企及的高度通盘考虑影响产品发展的因素，提出基于产品本身的改造和开发策略，以切实的依据、低廉的成本、可控的风险来达成用户增长、活跃度上升、收入额增加等商业目的。简单来说，就是低成本甚至零成本地用“技术”来让产品获得有效增长。</p><a id="more"></a><img src="/2019/08/15/growth-hacker/growthhacker.png" alt="growthhacker.png" title><p><a href="https://book.douban.com/subject/26541801/" target="_blank" rel="noopener">增长黑客</a></p>]]></content>
      
      
      <categories>
          
          <category> tech </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 用户增长 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>node.js 内存泄漏排查小结</title>
      <link href="/2019/07/11/node-memory-leak/"/>
      <url>/2019/07/11/node-memory-leak/</url>
      
        <content type="html"><![CDATA[<p>内存泄漏（Memory Leak）指由于疏忽或错误造成程序未能释放已经不再使用的内存的情况。如果内存泄漏的位置比较关键，那么随着处理的进行可能持有越来越多的无用内存，这些无用的内存变多会引起服务器响应速度变慢，严重的情况下导致内存达到某个极限（可能是进程的上限，如 v8 的上限；也可能是系统可提供的内存上限）会使得应用程序崩溃。</p><a id="more"></a><img src="/2019/07/11/node-memory-leak/1.png" alt="1.png" title>]]></content>
      
      
      <categories>
          
          <category> tech </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bug fix </tag>
            
            <tag> node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于redis的一些总结</title>
      <link href="/2019/07/07/redis-summarize/"/>
      <url>/2019/07/07/redis-summarize/</url>
      
        <content type="html"><![CDATA[<p>Redis（Remote Dictionary Server )，即远程字典服务，是一个开源的使用 ANSI C 语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value 数据库，并提供多种语言的 API。</p><a id="more"></a><h2 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h2><img src="/2019/07/07/redis-summarize/redis-datapersistence.png" alt="redis-datapersistence.png" title><h2 id="线程-io-模型"><a href="#线程-io-模型" class="headerlink" title="线程 io 模型"></a>线程 io 模型</h2><img src="/2019/07/07/redis-summarize/redis-io.png" alt="redis-io.png" title><h2 id="主从同步"><a href="#主从同步" class="headerlink" title="主从同步"></a>主从同步</h2><img src="/2019/07/07/redis-summarize/redis-master-slave.png" alt="redis-master-slave.png" title><h2 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h2><img src="/2019/07/07/redis-summarize/redis-pipe.png" alt="redis-pipe.png" title><h2 id="通信协议"><a href="#通信协议" class="headerlink" title="通信协议"></a>通信协议</h2><img src="/2019/07/07/redis-summarize/redis-protocol.png" alt="redis-protocol.png" title><h2 id="PubSub"><a href="#PubSub" class="headerlink" title="PubSub"></a>PubSub</h2><img src="/2019/07/07/redis-summarize/redis-PubSub.png" alt="redis-PubSub.png" title><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><img src="/2019/07/07/redis-summarize/redis-transaction.png" alt="redis-transaction.png" title><h2 id="小对象压缩"><a href="#小对象压缩" class="headerlink" title="小对象压缩"></a>小对象压缩</h2><img src="/2019/07/07/redis-summarize/redis-ziplist.png" alt="redis-ziplist.png" title>]]></content>
      
      
      <categories>
          
          <category> tech </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>沟通技巧小结</title>
      <link href="/2019/03/20/talking-tricks/"/>
      <url>/2019/03/20/talking-tricks/</url>
      
        <content type="html"><![CDATA[<p>沟通技巧：用事实说话，用数据说话，结论先行</p><a id="more"></a><img src="/2019/03/20/talking-tricks/1.png" alt="1.png" title><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p><a href="https://book.douban.com/subject/27021786/" target="_blank" rel="noopener">《靠谱-顶尖咨询师教你的工作基本功》</a></p>]]></content>
      
      
      <categories>
          
          <category> tech </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 沟通技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue.js@2.x 基础使用点提取</title>
      <link href="/2018/12/04/vuejs2.x-xmind/"/>
      <url>/2018/12/04/vuejs2.x-xmind/</url>
      
        <content type="html"><![CDATA[<p>官方文档基础要点</p><a id="more"></a><img src="/2018/12/04/vuejs2.x-xmind/1.png" alt="1.png" title>]]></content>
      
      
      <categories>
          
          <category> tech </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iframe踩坑记录</title>
      <link href="/2018/10/11/iframe-bug/"/>
      <url>/2018/10/11/iframe-bug/</url>
      
        <content type="html"><![CDATA[<p>以现代 web 页面最佳实践而言，iframe 是属于应该尽量避免使用的东西。</p><p>不过，在人力资源和产出需求相矛盾的情况下，iframe 又是解决这一矛盾的利器。</p><a id="more"></a><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>在一个纯展示推广页中，有个区域，固定展示之前已经做好的另一页面里的部分内容，且此区域不可滚动。</p><p>之前已做好的页面实际上在另一站点，逻辑较为复杂，业务耦合度高，很多业务并未抽出做成公用服务。</p><p>当前推广站点若要重构相关内容，花费的代价会比较大。经讨论，决定使用 iframe 载入相关需要展示的页面。</p><h2 id="问题记录"><a href="#问题记录" class="headerlink" title="问题记录"></a>问题记录</h2><h4 id="使用-html2canvas-生成长图用于分享无法实现"><a href="#使用-html2canvas-生成长图用于分享无法实现" class="headerlink" title="使用 html2canvas 生成长图用于分享无法实现"></a>使用 html2canvas 生成长图用于分享无法实现</h4><ul><li><p>问题背景：产品希望实时根据页面内容生成长图，引导用户分享长图</p></li><li><p>结论：iframe 里面的内容无法被解析，所以这个需求点只能放弃</p></li></ul><h4 id="iOS-webview-中无法对-iframe-的高度进行设置"><a href="#iOS-webview-中无法对-iframe-的高度进行设置" class="headerlink" title="iOS webview 中无法对 iframe 的高度进行设置"></a>iOS webview 中无法对 iframe 的高度进行设置</h4><ul><li>问题背景：iframe 载入的目标页面有很多内容，而我们需要的只是其中一小部分。所以我们要根据推广页的宽度，计算出可展示内容的高度，然后对 iframe 的高度作出限制，且 iframe 不可被滚动</li><li>原因：对 iframe 的 height 属性做设置，在 iOS 中会失效。</li><li>结论：另行生成一个 style 标签（高度需要实时计算，所以 style 标签由 javascript 生成），里面有 iframe 的高度限制，再插入 head 标签中</li></ul><h4 id="安卓-webview-中，iframe-onload-事件失效"><a href="#安卓-webview-中，iframe-onload-事件失效" class="headerlink" title="安卓 webview 中，iframe onload 事件失效"></a>安卓 webview 中，iframe onload 事件失效</h4><ul><li>问题背景：产品希望 iframe 载入相关内容时，未载入完全时，展示 loading 动画</li><li>原因：某些安卓 webview 中，iframe onload 事件失效。iframe 实际已经加载完毕，但一只不触发 onload 事件，于是页面相关区域就一直 loading 中。在用户看来，iframe 区域一直 loading，感觉就是“明显有 bug”。</li><li>结论：牺牲掉这个 loading 动画，让 webview 一直展示。</li></ul>]]></content>
      
      
      <categories>
          
          <category> tech </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iframe </tag>
            
            <tag> bug fix </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>活动页可配置化的一点探索 -- 组合模式的构建与使用</title>
      <link href="/2018/09/03/composite-pattern/"/>
      <url>/2018/09/03/composite-pattern/</url>
      
        <content type="html"><![CDATA[<p>就 2018 年而言，小组的工作重点，在于承接公司因「用户增长」战略而产生的大量需求。</p><p>经过这半年的满负荷和之前几年的半负荷「活动页」项目运载，不论是产品侧还是开发侧，都可以明显察觉到 – 大部分的活动推广页，其实都有着相似的流程、逻辑，当中有很多明显可复用的模块在等待被抽象提取。</p><a id="more"></a><p>对于这些可复用的模块，目前可抽取出这么一些：</p><ol><li>分享模块<ol><li>分享活动页本身</li><li>分享出特殊分享页（被分享人和分享人可通过此分享页建立关系）</li></ol></li><li>上报模块<ol><li>产品侧使用<ol><li>用户事件上报：主要是点击事件上报，上报至 BI 组负责维护的罗盘系统</li><li>页面 pvuv 上报：同样上报至罗盘系统</li><li>香港地区活动的 google sem 上报</li></ol></li><li>开发侧使用<ol><li>错误事件上报：上报至 monitor 系统进行打点累计、监控，超过告警值则发出警告短信</li><li>普通事件上报：同样上报至 monitor 系统进行打点累计、监控，开发人员对页面各种事件触发量有个整体了解</li><li>错误日志上报：错误事件发生时，会有错误日志同时上报至 uls 系统，开发人员可进行事件回溯</li><li>普通日志上报：同样是用于帮助开发人员进行事件回溯</li></ol></li></ol></li><li>送奖励型业务模块，包括<ol><li>注册送奖励、开户送奖励（大部分的开户送奖励都隐藏在「注册送奖励」后，但用户注册后会被告知「实际奖励得开户后才能领到」）</li><li>入金送奖励</li><li>邀请他人注册、开户送奖励（邀请人得到奖励，被邀请人也得到奖励；这里的核心在于邀请人和被邀请人间会建立起一个关系）</li><li>新特性推广期，使用人获得奖励</li></ol></li></ol><h2 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h2><p>根据上面罗列的模块，模块间有一定的层级关系，但同一层级下的不同模块基本互不干涉。而活动推广页的构建，也基本是上述模块的堆砌。</p><p>所以，如果要完成「活动页可配置化」这个需求，基本要做到下面几点：</p><ol><li>可复用模块抽象提取</li><li>同一层级模块互不依赖，可独立运行</li><li>模块可被统一组织、驱动</li></ol><p>按照上述分析，可使用组合模式来满足上述需求</p><h2 id="组合模式介绍"><a href="#组合模式介绍" class="headerlink" title="组合模式介绍"></a>组合模式介绍</h2><p>一句话描述：组合模式就是构建一个树，然后对里面的节点进行深度优先的遍历。</p><img src="/2018/09/03/composite-pattern/2018-09-02-am-11.50.24.png" alt="2018-09-02-am-11.50.24.png" title><h2 id="组合模式使用"><a href="#组合模式使用" class="headerlink" title="组合模式使用"></a>组合模式使用</h2><p>下面是一个简单地例子：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"button"</span>&gt;</span>按我<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> MacroCommand = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line">        commandsList: [],</span><br><span class="line"><span class="actionscript">        add: <span class="function"><span class="keyword">function</span> <span class="params">(command)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">          <span class="keyword">this</span>.commandsList.push(command);</span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="actionscript">        execute: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">          <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, command; (command = <span class="keyword">this</span>.commandsList[i++]); ) &#123;</span></span><br><span class="line">            command.execute();</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> openAcCommand = &#123;</span></span><br><span class="line"><span class="actionscript">      execute: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">"打开空调"</span>);</span></span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">/**********家里的电视和音响是连接在一起的，所以可以用一个宏命令来组合打开电视和打开音响的命令 *********/</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> openTvCommand = &#123;</span></span><br><span class="line"><span class="actionscript">      execute: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">"打开电视"</span>);</span></span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> openSoundCommand = &#123;</span></span><br><span class="line"><span class="actionscript">      execute: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">"打开音响"</span>);</span></span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> macroCommand1 = MacroCommand();</span></span><br><span class="line">    macroCommand1.add(openTvCommand);</span><br><span class="line">    macroCommand1.add(openSoundCommand);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">/*********关门、打开电脑和打登录 QQ 的命令****************/</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> closeDoorCommand = &#123;</span></span><br><span class="line"><span class="actionscript">      execute: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">"关门"</span>);</span></span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> openPcCommand = &#123;</span></span><br><span class="line"><span class="actionscript">      execute: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">"开电脑"</span>);</span></span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> openQQCommand = &#123;</span></span><br><span class="line"><span class="actionscript">      execute: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">"登录 QQ"</span>);</span></span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> macroCommand2 = MacroCommand();</span></span><br><span class="line">    macroCommand2.add(closeDoorCommand);</span><br><span class="line">    macroCommand2.add(openPcCommand);</span><br><span class="line">    macroCommand2.add(openQQCommand);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">/*********现在把所有的命令组合成一个“超级命令”**********/</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> macroCommand = MacroCommand();</span></span><br><span class="line">    macroCommand.add(openAcCommand);</span><br><span class="line">    macroCommand.add(macroCommand1);</span><br><span class="line">    macroCommand.add(macroCommand2);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">/*********最后给遥控器绑定“超级命令”**********/</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> setCommand = (<span class="function"><span class="keyword">function</span> <span class="params">(command)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">document</span>.getElementById(<span class="string">"button"</span>).onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line">        command.execute();</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;)(macroCommand);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="组合模式与活动页业务的结合"><a href="#组合模式与活动页业务的结合" class="headerlink" title="组合模式与活动页业务的结合"></a>组合模式与活动页业务的结合</h2><p>组合模式解决的问题，主要是模块的统一组织、驱动问题。这里面的前提条件有两个：</p><ol><li>模块必须暴露出统一的接口</li><li>模块间必须互不影响、互不依赖</li></ol><p>初步来看，上面提取出的上报模块、大部分奖励业务模块可以很好地和组合模式结合，而分享模块和奖励模块中的邀请小模块有一定的联系，目前还不好处理。</p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>因为不了解后端业务情况，上述模块抽象提取在和后端业务结合后，肯定还有比较大的调整。</p><p>目前先思考这么多，完。</p>]]></content>
      
      
      <categories>
          
          <category> tech </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>命令模式的构建与使用</title>
      <link href="/2018/09/03/command-pattern/"/>
      <url>/2018/09/03/command-pattern/</url>
      
        <content type="html"><![CDATA[<p>设计模式的精髓，就是解耦；而命令模式的所作的事情，就是对请求的发出者和请求的接收者进行解耦。</p><a id="more"></a><h2 id="命令模式使用场景"><a href="#命令模式使用场景" class="headerlink" title="命令模式使用场景"></a>命令模式使用场景</h2><p>有时候需要向某些对象发送请求，但是并不知道请求的接收者是谁，也不知道被请求的操作是什么，此时希望用一种松耦合的方式来设计软件，使得请求发送者和请求接收者能够消除彼此之间的耦合关系。</p><h2 id="一个命令模式的简单例子"><a href="#一个命令模式的简单例子" class="headerlink" title="一个命令模式的简单例子"></a>一个命令模式的简单例子</h2><p>首先是几个按钮的绘制：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;button id=<span class="string">"button1"</span>&gt;点击按钮 <span class="number">1</span>&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">&lt;button id="button2"&gt;点击按钮 2&lt;/</span>button&gt;</span><br><span class="line">&lt;button id=<span class="string">"button3"</span>&gt;点击按钮 <span class="number">3</span>&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">var</span> button1 = <span class="built_in">document</span>.getElementById( <span class="string">'button1'</span> ),</span><br><span class="line"><span class="keyword">var</span> button2 = <span class="built_in">document</span>.getElementById( <span class="string">'button2'</span> ),</span><br><span class="line"><span class="keyword">var</span> button3 = <span class="built_in">document</span>.getElementById( <span class="string">'button3'</span> );</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>然后定义一个 setCommand 函数，setCommand 函数负责往按钮上面安装命令：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> setCommand = <span class="function"><span class="keyword">function</span> (<span class="params">button, command</span>) </span>&#123;</span><br><span class="line">  button.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    command.execute();</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>定义两个功能对象：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> MenuBar = &#123;</span><br><span class="line">  refresh: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"refresh menu"</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> SubMenu = &#123;</span><br><span class="line">  add: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"add menu"</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  del: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"del menu"</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>定义几个命令对象：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">RefreshCommand</span>(<span class="params">receiver</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.receiver = receiver;</span><br><span class="line">&#125;</span><br><span class="line">RefreshCommand.prototype.execute = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.receiver.refresh();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">AddCommand</span>(<span class="params">receiver</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.receiver = receiver;</span><br><span class="line">&#125;</span><br><span class="line">RefreshCommand.prototype.execute = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.receiver.add();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">DelCommand</span>(<span class="params">receiver</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.receiver = receiver;</span><br><span class="line">&#125;</span><br><span class="line">RefreshCommand.prototype.execute = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.receiver.del();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>最后，通过命令对象，把命令接收者（功能对象）和命令请求者（按钮）联系起来：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> refreshMenuBarCommand = <span class="keyword">new</span> RefreshMenuBarCommand(MenuBar);</span><br><span class="line"><span class="keyword">var</span> addSubMenuCommand = <span class="keyword">new</span> AddSubMenuCommand(SubMenu);</span><br><span class="line"><span class="keyword">var</span> delSubMenuCommand = <span class="keyword">new</span> DelSubMenuCommand(SubMenu);</span><br><span class="line">setCommand(button1, refreshMenuBarCommand);</span><br><span class="line">setCommand(button2, addSubMenuCommand);</span><br><span class="line">setCommand(button3, delSubMenuCommand);</span><br></pre></td></tr></table></figure><h2 id="javascript-中的命令模式"><a href="#javascript-中的命令模式" class="headerlink" title="javascript 中的命令模式"></a>javascript 中的命令模式</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> bindClick = <span class="function"><span class="keyword">function</span> (<span class="params">button, func</span>) </span>&#123;</span><br><span class="line">  button.onclick = func;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> MenuBar = &#123;</span><br><span class="line">  refresh: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"refresh menu"</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> SubMenu = &#123;</span><br><span class="line">  add: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"add menu"</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  del: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"del menu"</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">bindClick(button1, MenuBar.refresh);</span><br><span class="line">bindClick(button2, SubMenu.add);</span><br><span class="line">bindClick(button3, SubMenu.del);</span><br></pre></td></tr></table></figure><p>可以看到，上面这段代码中，并没有 command 和 receiver 两个概念。</p><p>原因就是，相对于简单例子中的传统命令模式实现，javascript 版命令模式实现利用了高阶函数特性(函数可作为参数被传递，函数可作为返回值被输出)。</p><h2 id="撤销命令"><a href="#撤销命令" class="headerlink" title="撤销命令"></a>撤销命令</h2><p>首先是一种最简单的撤销：针对上一步的操作，再做一次’反向操作’。下面是一些简单例子的罗列：</p><ol><li>移动了一个 dom 元素，则作 undo 操作时，就把 dom 元素移回原来的位置（做移动操作时，需要记录下移动前的位置）</li><li>输入了一段文本，则作 undo 操作时，就把输入的文本删去（做输入操作时，需要记录下当前输入的文本）</li></ol><p>下面是一个例子：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"ball"</span> <span class="attr">style</span>=<span class="string">"position:absolute;background:#000;width:50px;height:50px"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    输入小球移动后的位置:<span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"pos"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"moveBtn"</span>&gt;</span>开始移动<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"cancelBtn"</span>&gt;</span>cancel<span class="tag">&lt;/<span class="name">cancel</span>&gt;</span> <span class="comment">&lt;!--增加取消按钮--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ball = <span class="built_in">document</span>.getElementById(<span class="string">"ball"</span>);</span><br><span class="line"><span class="keyword">var</span> pos = <span class="built_in">document</span>.getElementById(<span class="string">"pos"</span>);</span><br><span class="line"><span class="keyword">var</span> moveBtn = <span class="built_in">document</span>.getElementById(<span class="string">"moveBtn"</span>);</span><br><span class="line"><span class="keyword">var</span> MoveCommand = <span class="function"><span class="keyword">function</span> (<span class="params">receiver, pos</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.receiver = receiver;</span><br><span class="line">  <span class="keyword">this</span>.pos = pos;</span><br><span class="line">&#125;;</span><br><span class="line">MoveCommand.prototype.execute = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.receiver.start(<span class="string">"left"</span>, <span class="keyword">this</span>.pos, <span class="number">1000</span>, <span class="string">"strongEaseOut"</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> moveCommand;</span><br><span class="line">moveBtn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> animate = <span class="keyword">new</span> Animate(ball);</span><br><span class="line">  moveCommand = <span class="keyword">new</span> MoveCommand(animate, pos.value);</span><br><span class="line">  moveCommand.execute();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>添加一个 undo 按钮：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"cancelBtn"</span>&gt;</span>cancel<span class="tag">&lt;/<span class="name">cancel</span>&gt;</span> <span class="comment">&lt;!--增加取消按钮--&gt;</span></span><br></pre></td></tr></table></figure><p>添加 undo 操作：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MoveCommand.prototype.undo = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.receiver.start(<span class="string">"left"</span>, <span class="keyword">this</span>.oldPos, <span class="number">1000</span>, <span class="string">"strongEaseOut"</span>); <span class="comment">// 回到小球移动前记录的位置</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>移动操作(execute 方法)也需要改写：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">MoveCommand.prototype.execute = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.receiver.start(<span class="string">"left"</span>, <span class="keyword">this</span>.pos, <span class="number">1000</span>, <span class="string">"strongEaseOut"</span>);</span><br><span class="line">  <span class="keyword">this</span>.oldPos = <span class="keyword">this</span>.receiver.dom.getBoundingClientRect()[</span><br><span class="line">    <span class="keyword">this</span>.receiver.propertyName</span><br><span class="line">  ];</span><br><span class="line">  <span class="number">11</span>; <span class="comment">// 记录小球开始移动前的位置</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>关联 undo 按钮和 undo 操作：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> cancelBtn = <span class="built_in">document</span>.getElementById(<span class="string">"cancelBtn"</span>);</span><br><span class="line">cancelBtn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  moveCommand.undo();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="撤销和重做"><a href="#撤销和重做" class="headerlink" title="撤销和重做"></a>撤销和重做</h2><p>针对撤销功能的实现，上面的是对上一步操作做反向操作，但其实我们也可以换一种思路：把整个环境初始化，然后把做过的操作重新执行一遍，执行到准备撤销的前一步操作为止。</p><p>下面是一个利用重做功能去完成撤销功能的例子：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"replay"</span>&gt;</span>播放录像<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"undo"</span>&gt;</span>撤销上一步<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> Ryu = &#123;</span></span><br><span class="line"><span class="actionscript">      attack: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">"攻击"</span>);</span></span><br><span class="line">      &#125;,</span><br><span class="line"><span class="actionscript">      defense: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">"防御"</span>);</span></span><br><span class="line">      &#125;,</span><br><span class="line"><span class="actionscript">      jump: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">"跳跃"</span>);</span></span><br><span class="line">      &#125;,</span><br><span class="line"><span class="actionscript">      crouch: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">"蹲下"</span>);</span></span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> makeCommand = <span class="function"><span class="keyword">function</span> <span class="params">(receiver, state)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">      <span class="comment">// 创建命令</span></span></span><br><span class="line">      if (!state) &#123;</span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line">      &#125;</span><br><span class="line"><span class="actionscript">      <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line">        receiver[state]();</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> commands = &#123;</span></span><br><span class="line"><span class="actionscript">      <span class="number">119</span>: <span class="string">"jump"</span>, <span class="comment">//w</span></span></span><br><span class="line"><span class="actionscript">      <span class="number">115</span>: <span class="string">"crouch"</span>, <span class="comment">//s</span></span></span><br><span class="line"><span class="actionscript">      <span class="number">97</span>: <span class="string">"defense"</span>, <span class="comment">//a</span></span></span><br><span class="line"><span class="actionscript">      <span class="number">100</span>: <span class="string">"attack"</span>, <span class="comment">//d</span></span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> commandStack = []; <span class="comment">// 保存命令的堆栈</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.onkeypress = <span class="function"><span class="keyword">function</span> (<span class="params">ev</span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> keyCode = ev.keyCode;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> command = makeCommand(Ryu, commands[keyCode]);</span></span><br><span class="line">      if (command) &#123;</span><br><span class="line">        command();</span><br><span class="line">        commandStack.push(command);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.getElementById(<span class="string">"replay"</span>).onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">      <span class="comment">// 点击播放录像</span></span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> command;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">while</span> ((command = commandStack.shift())) &#123;</span></span><br><span class="line">        command();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.getElementById(<span class="string">"undo"</span>).onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> command;</span></span><br><span class="line"><span class="actionscript">      commandStack.pop(); <span class="comment">//删掉最后一步</span></span></span><br><span class="line"><span class="actionscript">      <span class="keyword">while</span> ((command = commandStack.shift())) &#123;</span></span><br><span class="line">        command();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> tech </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>迭代器的构建和使用</title>
      <link href="/2018/09/03/interator-pattern/"/>
      <url>/2018/09/03/interator-pattern/</url>
      
        <content type="html"><![CDATA[<p>目前绝大部分语言都内置了迭代器，而当前开发中对于迭代器的使用也很是频繁。今天刚好看到迭代器相关文档，索性对此做下归纳和总结。</p><a id="more"></a><h2 id="迭代器模式的含义"><a href="#迭代器模式的含义" class="headerlink" title="迭代器模式的含义"></a>迭代器模式的含义</h2><p>迭代器模式是指提供一种方法顺序访问一个聚合对象中的各个元素，而又不需要暴露该对象的内部表示。所以，迭代器模式可以把迭代的过程从业务逻辑中分离出来，完成一次解耦。</p><h2 id="迭代器模式的简单实现"><a href="#迭代器模式的简单实现" class="headerlink" title="迭代器模式的简单实现"></a>迭代器模式的简单实现</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> each = <span class="function"><span class="keyword">function</span> (<span class="params">ary, callback</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; ary.length; i++) &#123;</span><br><span class="line">    callback(ary[i], i);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">each([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="function"><span class="keyword">function</span> (<span class="params">item, index</span>) </span>&#123;</span><br><span class="line">  dosomething(item, index);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="内部迭代器和外部迭代器"><a href="#内部迭代器和外部迭代器" class="headerlink" title="内部迭代器和外部迭代器"></a>内部迭代器和外部迭代器</h2><h3 id="内部迭代器"><a href="#内部迭代器" class="headerlink" title="内部迭代器"></a>内部迭代器</h3><p>上面的 each 函数属于内部迭代器，each 函数的内部已经定义好了迭代规则，它完全接手整个迭代过程，外部只需要一次初始调用。</p><p>内部迭代器在调用的时候非常方便，外界不用关心迭代器内部的实现，跟迭代器的交互也仅仅是一次初始调用，但这也刚好是内部迭代器的缺点。由于内部迭代器的迭代规则已经被提前规定，上面的 each 函数就无法同时迭代 2 个数组了。</p><p>比如现在有个需求，要判断 2 个数组里元素的值是否完全相等， 如果不改写 each 函数本身 的代码，我们能够入手的地方似乎只剩下 each 的回调函数了，代码如下:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> compare = <span class="function"><span class="keyword">function</span> (<span class="params">ary1, ary2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (ary1.length !== ary2.length) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"ary1 和 ary2 不相等"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  each(ary1, <span class="function"><span class="keyword">function</span> (<span class="params">i, n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n !== ary2[i]) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"ary1 和 ary2 不相等"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  alert(<span class="string">"ary1 和 ary2 相等"</span>);</span><br><span class="line">&#125;;</span><br><span class="line">compare([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>]); <span class="comment">// throw new Error ( 'ary1和ary2不相等' );</span></span><br></pre></td></tr></table></figure><h3 id="外部迭代器"><a href="#外部迭代器" class="headerlink" title="外部迭代器"></a>外部迭代器</h3><p>外部迭代器必须显式地请求迭代下一个元素，下面是一个外部迭代器的实现：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Iterator = <span class="function"><span class="keyword">function</span> (<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> current = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">var</span> getCurrItem = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> obj[current];</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    next: next,</span><br><span class="line">    isDone: isDone,</span><br><span class="line">    getCurrItem: getCurrItem,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>下面是 compare 函数的改写：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> compare = <span class="function"><span class="keyword">function</span> (<span class="params">iterator1, iterator2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">while</span> (!iterator1.isDone() &amp;&amp; !iterator2.isDone()) &#123;</span><br><span class="line">    <span class="keyword">if</span> (iterator1.getCurrItem() !== iterator2.getCurrItem()) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"iterator1 和 iterator2 不相等"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    iterator1.next();</span><br><span class="line">    iterator2.next();</span><br><span class="line">  &#125;</span><br><span class="line">  alert(<span class="string">"iterator1 和 iterator2 相等"</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> iterator1 = Iterator([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line"><span class="keyword">var</span> iterator2 = Iterator([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line">compare(iterator1, iterator2); <span class="comment">// 输出:iterator1 和 iterator2 相等</span></span><br></pre></td></tr></table></figure><h2 id="倒序迭代器"><a href="#倒序迭代器" class="headerlink" title="倒序迭代器"></a>倒序迭代器</h2><p>针对有一定排列顺序的迭代器，有正序，自然有倒序。如果上面 [迭代器模式的简单实现]一节中的迭代顺序为正序，则倒序会是下面这样：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reverseEach = <span class="function"><span class="keyword">function</span> (<span class="params">ary, callback</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> l = ary.length - <span class="number">1</span>; l &gt;= <span class="number">0</span>; l--) &#123;</span><br><span class="line">    callback(l, ary[l]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">reverseEach([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>], <span class="function"><span class="keyword">function</span> (<span class="params">i, n</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(n); <span class="comment">// 分别输出:2, 1 ,0</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="终止迭代器"><a href="#终止迭代器" class="headerlink" title="终止迭代器"></a>终止迭代器</h2><p>分析下来，迭代器有必要提供一个停止迭代的方式，以避免资源的浪费。下面是一个终止迭代的方式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> each = <span class="function"><span class="keyword">function</span> (<span class="params">ary, callback</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, l = ary.length; i &lt; l; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (callback(i, ary[i]) === <span class="literal">false</span>) &#123;</span><br><span class="line">      <span class="comment">// callback 的执行结果返回 false，提前终止迭代</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">each([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>], <span class="function"><span class="keyword">function</span> (<span class="params">i, n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (n &gt; <span class="number">3</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(n);</span><br><span class="line">  <span class="comment">// n大于3的时候终止循环 // 分别输出:1, 2, 3</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="迭代器模式的一个应用举例"><a href="#迭代器模式的一个应用举例" class="headerlink" title="迭代器模式的一个应用举例"></a>迭代器模式的一个应用举例</h2><p>不同浏览器环境下，获取到上传对象的方式是不同的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> getActiveUploadObj = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ActiveXObject(<span class="string">"TXFTNActiveX.FTNUpload"</span>);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> getFlashUploadObj = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (supportFlash()) &#123;</span><br><span class="line">    <span class="comment">// supportFlash 函数未提供</span></span><br><span class="line">    <span class="comment">// IE 上传控件</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> str = <span class="string">'&lt;object type="application/x-shockwave-flash"&gt;&lt;/object&gt;'</span>;</span><br><span class="line">  <span class="keyword">return</span> $(str).appendTo($(<span class="string">"body"</span>));</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> getFormUpladObj = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> str = <span class="string">'&lt;input name="file" type="file" class="ui-file"/&gt;'</span>; <span class="comment">// 表单上传</span></span><br><span class="line">  <span class="keyword">return</span> $(str).appendTo($(<span class="string">"body"</span>));</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>如果要通过迭代器获取上传对象的话，大概是这个样子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> iteratorUploadObj = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, fn; (fn = <span class="built_in">arguments</span>[i++]); ) &#123;</span><br><span class="line">    <span class="keyword">var</span> uploadObj = fn();</span><br><span class="line">    <span class="keyword">if</span> (uploadObj !== <span class="literal">false</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> uploadObj;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> uploadObj = iteratorUploadObj(</span><br><span class="line">  getActiveUploadObj,</span><br><span class="line">  getFlashUploadObj,</span><br><span class="line">  getFormUpladObj</span><br><span class="line">);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> tech </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>职责链模式</title>
      <link href="/2018/07/03/chain-pattern/"/>
      <url>/2018/07/03/chain-pattern/</url>
      
        <content type="html"><![CDATA[<p>职责链模式使多个对象都有机会处理请求，从而避免请求的发送者和接收者之间 5 的耦合关系，将这些对象连成一条链，并沿着这条链传递该请求，直到有一个对象处理它为止。</p><a id="more"></a><h2 id="一个常见的场景"><a href="#一个常见的场景" class="headerlink" title="一个常见的场景"></a>一个常见的场景</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (type1) &#123;</span><br><span class="line">  <span class="keyword">if</span> (type2 === <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="comment">//do something</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (type2 === <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="comment">//do something</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (type2 === <span class="number">3</span>) &#123;</span><br><span class="line">    <span class="comment">//do something</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (type2 === <span class="number">4</span>) &#123;</span><br><span class="line">    <span class="comment">//dom something</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>增强一点可读性：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (type1 &amp;&amp; type2 === <span class="number">1</span>) &#123;</span><br><span class="line">  <span class="comment">//do something</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (type1 &amp;&amp; type2 === <span class="number">2</span>) &#123;</span><br><span class="line">  <span class="comment">//do something</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (type1 &amp;&amp; type2 === <span class="number">3</span>) &#123;</span><br><span class="line">  <span class="comment">//do something</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!type1 &amp;&amp; type2 === <span class="number">4</span>) &#123;</span><br><span class="line">  <span class="comment">//dom something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的判断逻辑十分常见，是程序后续运营维护的噩梦之一。当业务复杂度开始膨胀后，这样的判断逻辑代码会变得十分难读，修改起来也是非常困难。随着版本的迭代与开发人员的变更，这样的判断逻辑代码最后有可能变成无人敢动的代码块。</p><h2 id="使用职责链模式进行重构"><a href="#使用职责链模式进行重构" class="headerlink" title="使用职责链模式进行重构"></a>使用职责链模式进行重构</h2><p>观察上面的原始代码，可以看到总共有 4 个判断条件。要把这些判断条件都构造成节点，串联成一个职责链，则这些节点，都必须暴露出一个相同的接口。</p><p>先构建 4 个判断函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">condition1</span>(<span class="params">type1, type2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (type1 &amp;&amp; type2 === <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="comment">//do something</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"next"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">condition2</span>(<span class="params">type1, type2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (type1 &amp;&amp; type2 === <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="comment">//do something</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"next"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">condition3</span>(<span class="params">type1, type2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (type1 &amp;&amp; type2 === <span class="number">3</span>) &#123;</span><br><span class="line">    <span class="comment">//do something</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"next"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">condition4</span>(<span class="params">type1, type2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!type1 &amp;&amp; type2 === <span class="number">4</span>) &#123;</span><br><span class="line">    <span class="comment">//do something</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"next"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>建立节点类，用于实例化节点</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Chain</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.fn = fn;</span><br><span class="line">  <span class="keyword">this</span>.nextCall = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">Chain.prototype.setNextCall = <span class="function"><span class="keyword">function</span> (<span class="params">fn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.nextCall = fn;</span><br><span class="line">&#125;;</span><br><span class="line">Chain.prototype.request = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> ret = <span class="keyword">this</span>.fn.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (ret === <span class="string">"next"</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="keyword">this</span>.nextCall &amp;&amp; <span class="keyword">this</span>.nextCall.request.apply(<span class="keyword">this</span>.nextCall, <span class="built_in">arguments</span>)</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>于是，可以构成职责链：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> chain1 = <span class="keyword">new</span> Chain(conditin1);</span><br><span class="line"><span class="keyword">var</span> chain2 = <span class="keyword">new</span> Chain(conditin2);</span><br><span class="line"><span class="keyword">var</span> chain3 = <span class="keyword">new</span> Chain(conditin3);</span><br><span class="line"><span class="keyword">var</span> chain4 = <span class="keyword">new</span> Chain(conditin4);</span><br><span class="line"></span><br><span class="line">chain1.setNextCall(chain2);</span><br><span class="line">chain2.setNextCall(chain3);</span><br><span class="line">chain3.setNextCall(chain4);</span><br><span class="line"></span><br><span class="line">chain1.request(<span class="literal">false</span>, <span class="number">4</span>);</span><br></pre></td></tr></table></figure><h2 id="异步职责链"><a href="#异步职责链" class="headerlink" title="异步职责链"></a>异步职责链</h2><p>当判断函数需要通过异步请求结果才能知道是否调用下一个判断函数时，节点对象自身需要有一个主动调用下一个节点的方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Chain.prototype.next = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.nextCall &amp;&amp; <span class="keyword">this</span>.nextCall.request.apply(<span class="keyword">this</span>.nextCall, <span class="built_in">arguments</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>example:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">condition5</span>(<span class="params">type1, type2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line">  fetch(<span class="string">"/abc.com?type1="</span> + type1 + <span class="string">"&amp;type2="</span> + type2).then(<span class="function"><span class="keyword">function</span> (<span class="params">resp</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (resp.code === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="comment">//do something</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      self.next();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> chain5 = <span class="keyword">new</span> Chain(condition5);</span><br><span class="line">chain5.setNextCall(chain1);</span><br><span class="line">chain5.request(<span class="literal">false</span>, <span class="number">4</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> tech </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TCP/IP协议群和http协议</title>
      <link href="/2018/06/19/tcp-ip-http/"/>
      <url>/2018/06/19/tcp-ip-http/</url>
      
        <content type="html"><![CDATA[<h2 id="关系图"><a href="#关系图" class="headerlink" title="关系图:"></a>关系图:</h2><p>http 协议在 TCP/IP 协议群中的位置:</p><img src="/2018/06/19/tcp-ip-http/tcpip.png" alt="tcpip.png" title><a id="more"></a><p>TCP/IP 协议群的分层：</p><img src="/2018/06/19/tcp-ip-http/tcpip1.png" alt="tcpip1.png" title><p>其中，与 HTTP 关系密切的协议:</p><table><thead><tr><th>名称</th><th>分层结构</th><th>主要作用</th><th>作用描述</th></tr></thead><tbody><tr><td>DNS 服务</td><td>应用层</td><td>负责域名解析</td><td>根据域名查询 IP 地址，或根据 IP 地址反查域名</td></tr><tr><td>TCP 协议</td><td>传输层</td><td>确保可靠性</td><td>提供可靠的字节流服务</td></tr><tr><td>IP 协议</td><td>网络层</td><td>负责传输</td><td>把各种数据包传送给对方</td></tr></tbody></table><h2 id="几个协议的概述"><a href="#几个协议的概述" class="headerlink" title="几个协议的概述"></a>几个协议的概述</h2><h3 id="DNS-服务"><a href="#DNS-服务" class="headerlink" title="DNS 服务"></a>DNS 服务</h3><p>用户通常使用主机名或域名来访问对方的计算机，而不是直接通过 IP 地址访问。因为与 IP 地址的一组纯数字相比，用字母配合数字的表示形式来指定计算机名更符合人类的记忆习惯。但要让计算机去理解名称，相对而言就变得困难了。因为计算机更擅长处理一长串数字。</p><p>为了解决上述的问题，DNS 服务应运而生。DNS 协议提供通过域名查找 IP 地址，或逆向从 IP 地址反查域名的服务。</p><h3 id="TCP-协议"><a href="#TCP-协议" class="headerlink" title="TCP 协议"></a>TCP 协议</h3><p>TCP 协议为了更容易传送大数据，将大块数据分割成以报文段（segment）为单位的数据包进行管理。采用三次握手(three-way handshaking)策略，把数据包送出去后并确认是否成功送达(确保可靠性)。</p><p>握手过程中使用了 TCP 的标志（flag） — SYN（synchronize） 和 ACK（acknowledgement）。发送端首先发送一个带 SYN 标志的数据包给对方。接收端收到后，回传一个带有 SYN/ACK 标志的数据包以示传达确认信息。最后，发送端再回传一个带 ACK 标志的数据包，代表“握手”结束。若在握手过程中某个阶段莫名中断，TCP 协议会再次以相同的顺序发送相同的数据包。</p><h3 id="IP-协议"><a href="#IP-协议" class="headerlink" title="IP 协议"></a>IP 协议</h3><p>IP 协议的作用是把各种数据包传送给对方。而要保证确实传送到对方那里，则需要满足各类条件。其中两个重要的条件是 IP 地址和 MAC 地址（Media Access Control Address）。</p><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>IP 地址</td><td>指明了节点被分配到的地址，容易发生改变</td></tr><tr><td>MAC 地址</td><td>是指网卡所属的固定地址，一般不会发生改变</td></tr></tbody></table><p>IP 间的通讯依赖 MAC 地址，而 IP 地址可以和 MAC 地址进行配对，并且通过 ARP 协议（Address Resolution Protocol）来解析地址，从而通过通信方的 IP 地址反查出对应的 MAC 地址。当主机 A 要与主机 B 通信时，ARP 协议（地址解析协议）可以将主机 B 的 IP 地址（192.168.1.2）解析成主机 B 的 MAC 地址，MAC 地址一旦确定，主机 A 就能向主机 B 发送 IP 通信了。</p><h2 id="这些协议在一次-http-请求中的作用"><a href="#这些协议在一次-http-请求中的作用" class="headerlink" title="这些协议在一次 http 请求中的作用"></a>这些协议在一次 http 请求中的作用</h2><img src="/2018/06/19/tcp-ip-http/tcpip3.png" alt="tcpip3.png" title><h2 id="web-页面性能优化与这几个协议的关系"><a href="#web-页面性能优化与这几个协议的关系" class="headerlink" title="web 页面性能优化与这几个协议的关系"></a>web 页面性能优化与这几个协议的关系</h2><p>web 页面性能优化，主要是以下几个方向：</p><ol><li>尽量合并请求，减少页面总请求数：在 http 1.1 协议下，每次完成一个 http 请求，实际都是建立了一个 tcp 请求，然后又断开；每次建立 tcp 请求，都需要花点时间在‘3 次握手’上；尽量合并请求，可以省下建立 tcp 请求时的多余耗时。</li><li>增加浏览器的同时请求数：资源处于不同域名下，可以增加浏览器的 http 同时请求数；这个主要是对浏览器的策略做出应对。</li><li>资源压缩：体积越小的资源，下载的时间越短。</li><li>缓存：除了对 http 请求响应的缓存，浏览器还有可能对 dns 的解析结果做缓存</li></ol>]]></content>
      
      
      <categories>
          
          <category> tech </category>
          
      </categories>
      
      
        <tags>
            
            <tag> http </tag>
            
            <tag> tcp </tag>
            
            <tag> ip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【翻译】如何让CSS动画更自然</title>
      <link href="/2018/06/08/making-css-animations-feel-natural/"/>
      <url>/2018/06/08/making-css-animations-feel-natural/</url>
      
        <content type="html"><![CDATA[<img src="/2018/06/08/making-css-animations-feel-natural/cover.png" alt="cover.png" title><p>在过去，设计师负责设计，程序员负责编码。他们间互不干涉。但随着 CSS 中 transitions 和 animations 的到来，设计和编码的界限模糊了。设计师描述设计，而程序员把设计师的描述翻译成具体代码–这种合作模式不再像过去那么简单。为了高效地协作，设计师必须懂点代码，而程序员必须懂点设计。</p><a id="more"></a><p>举个例子，假设一位设计师要求开发人员实现一个如下所示的盒子反弹动画，在没有跨界知识和通用标准表述的情况下，设计师和程序员的沟通会有少许信息丢失。程序员没有足够的信息去了解设计师的意图，设计师也不知道他们到底可以选择什么。这样的沟通会有信息缺失，你最后完成的效果可能是下面这样的：</p><iframe height="450" scrolling="no" title="Bouncing Box 1" src="//codepen.io/pulpexploder/embed/apxRbK/?height=265&theme-id=dark&default-tab=result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="https://codepen.io/pulpexploder/pen/apxRbK/" target="_blank" rel="noopener">Bouncing Box 1</a> by Brandon Gregory (<a href="https://codepen.io/pulpexploder" target="_blank" rel="noopener">@pulpexploder</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</iframe><p>这样的效果并不会令人兴奋。虽然这已经符合动画效果的基本标准，但我们绝对可以做得更好。</p><p>首先要看的是 animation-timing-function 属性。在上面的例子中，我们对此属性赋值 linear，这意味着盒子以相同的速度不断运动。在某些情况下，这是可取的；然而，在现实世界中，运动通常不是线性的。</p><p>一个简单的解决方法是改变 animation-timing-function 属性。这使得每个动画的开始部分和结束部分比中间部分稍慢，这会令一些动画更自然。以下是启用了缓动功能的方块：</p><iframe height="450" scrolling="no" title="Bouncing Box 2" src="//codepen.io/pulpexploder/embed/bgJmde/?height=265&theme-id=dark&default-tab=result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="https://codepen.io/pulpexploder/pen/bgJmde/" target="_blank" rel="noopener">Bouncing Box 2</a> by Brandon Gregory (<a href="https://codepen.io/pulpexploder" target="_blank" rel="noopener">@pulpexploder</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</iframe><p>这只是一个小小的改进，所以我们仍有很多工作要做。同一时间内一次又一次地出现相同的动画，令方块看起来仍然机械又僵硬。在反弹之间增加一点点延迟，可让动画看起来更自然些：</p><iframe height="450" scrolling="no" title="Bouncing Box 3" src="//codepen.io/pulpexploder/embed/YNMJXb/?height=265&theme-id=dark&default-tab=result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="https://codepen.io/pulpexploder/pen/YNMJXb/" target="_blank" rel="noopener">Bouncing Box 3</a> by Brandon Gregory (<a href="https://codepen.io/pulpexploder" target="_blank" rel="noopener">@pulpexploder</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</iframe><p>现在这个动画看起来就像盒子自己在跳跃，而不是简单地被上下移动。跳跃之间有一点蓄力和停滞，模仿了活着的生物做同样的事情时会有的表现。尽管我们没有提供盒子跳跃的设计参考，但我们都对生物跳跃的表现有很好的了解。我们知道真实跳跃是什么样子，通过模仿，动画可以更自然。我们可以做更多的事情来让这种感觉变得更加突出。</p><p>如果你看动画片，你会注意到一些现实生活中的动作往往会被夸大、漫画化。做得好的话，这些动作就像在真实世界中一样自然，还带了些特有的魅力和个性。</p><p>在这个阶段，设计师和开发者之间的合作是至关重要的 – 但许多设计师可能都不知道这些选择的存在，所以得提醒开发人员将这些选择提供给设计人员。</p><p>通过在方块上添加一些轻微的变形，我们可以令动画丰满许多：</p><iframe height="450" scrolling="no" title="Bouncing Box 4" src="//codepen.io/pulpexploder/embed/YNMJyb/?height=265&theme-id=dark&default-tab=result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="https://codepen.io/pulpexploder/pen/YNMJyb/" target="_blank" rel="noopener">Bouncing Box 4</a> by Brandon Gregory (<a href="https://codepen.io/pulpexploder" target="_blank" rel="noopener">@pulpexploder</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</iframe><p>现在，盒子是一个活着的角色。仍有很多事情需要调整，但这已经比原来的动画更进一步 – 以一种非常好的方式。</p><p>现在我们更进一步，在跳跃结束时添加一点反弹：</p><iframe height="450" scrolling="no" title="Bouncing Box 5" src="//codepen.io/pulpexploder/embed/MJRPKE/?height=265&theme-id=dark&default-tab=result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="https://codepen.io/pulpexploder/pen/MJRPKE/" target="_blank" rel="noopener">Bouncing Box 5</a> by Brandon Gregory (<a href="https://codepen.io/pulpexploder" target="_blank" rel="noopener">@pulpexploder</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</iframe><p>第二次反弹让盒子看起来更有活着的感觉，但似乎仍然缺失了些东西。与其他成熟动画相比，这个反弹看起来很僵硬。我们需要再添加一点扭动：</p><iframe height="450" scrolling="no" title="Bouncing Box 6" src="//codepen.io/pulpexploder/embed/QdPZNp/?height=265&theme-id=dark&default-tab=result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="https://codepen.io/pulpexploder/pen/QdPZNp/" target="_blank" rel="noopener">Bouncing Box 6</a> by Brandon Gregory (<a href="https://codepen.io/pulpexploder" target="_blank" rel="noopener">@pulpexploder</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</iframe><p>最终的微妙变形使得反弹看起来更加自然。总体而言，第一个例子中我们的基本线性反弹有了巨大的改善。</p><p>这正是我们正在寻找的东西，但我们仍可以用定制的三次 Bézier 曲线进一步调整移动速率：</p><iframe height="450" scrolling="no" title="Bouncing Box 7" src="//codepen.io/pulpexploder/embed/ypYXwb/?height=265&theme-id=dark&default-tab=result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="https://codepen.io/pulpexploder/pen/ypYXwb/" target="_blank" rel="noopener">Bouncing Box 7</a> by Brandon Gregory (<a href="https://codepen.io/pulpexploder" target="_blank" rel="noopener">@pulpexploder</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</iframe><p>如果设计人员和开发人员不都了解基本的动画原理和控制方式，那就不可能做出生动的动画。这篇文章只是抓住了这两个领域一些浅显的地方。如果您是网页设计师或与设计师合作的网页开发人员，我强烈建议您阅读这两个领域的内容。</p><p>对于动画原则，奥利约翰斯顿和弗兰克托马斯的《The Illusion of Life: Disney Animation》是一本伟大的入门书籍。学会关于动画原则的通用语言后，设计人员和开发人员之间的沟通和协作将变得更加容易。</p><p>对于 CSS 动画的控制和变化，其可能性几乎是无止境的，因为延迟和计时很容易调整。如前所述，如果您不喜欢现成的易用的定时功能，则可以使用 cubic-bezier()来创建自己的定时功能。您还可以对动画做出调整，使其更接近于漫画或更接近于现实。重要的是，设计师和开发人员都要考虑这些变化，而不是盲目地沟通且不考虑用户体验。互相共享知识和互相协作可以将简单的动画变成很棒的动画。</p><p>原文：<a href="https://css-tricks.com/making-css-animations-feel-natural/" target="_blank" rel="noopener">https://css-tricks.com/making-css-animations-feel-natural/</a></p><p>作者：<a href="https://css-tricks.com/author/brandongregory/" target="_blank" rel="noopener">Brandon Gregory</a></p><p>译者：<a href="https://futu.im/author/evanyan" target="_blank" rel="noopener">evanyan</a></p>]]></content>
      
      
      <categories>
          
          <category> tech </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
            <tag> html </tag>
            
            <tag> 翻译 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>几款html 5 canvas游戏引擎的调研</title>
      <link href="/2018/05/15/canvas-engine-research/"/>
      <url>/2018/05/15/canvas-engine-research/</url>
      
        <content type="html"><![CDATA[<p>为满足对用户增长的需求，游戏类活动页开发逐渐提上日程，而我们对这方面积累不多。</p><a id="more"></a><h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><h3 id="引入游戏引擎原因"><a href="#引入游戏引擎原因" class="headerlink" title="引入游戏引擎原因"></a>引入游戏引擎原因</h3><p>原生 canvas 只提供了画布实现，在游戏开发角度上，对开发者而言，仍有许多工作要做：</p><ul><li>场景构建（画面中不动的东西）</li><li>物体构建（画面中动的东西）</li><li>动画实现（让画面中的东西动起来）</li><li>物理算法（模拟现实效果）</li><li>游戏业务逻辑</li></ul><p>其中，除游戏业务逻辑外，其余部分皆可重复使用。</p><p>所以，可以认为，引入游戏引擎有一定的必要性。</p><h3 id="面向的业务场景与其带来的要求"><a href="#面向的业务场景与其带来的要求" class="headerlink" title="面向的业务场景与其带来的要求"></a>面向的业务场景与其带来的要求</h3><p>我们的目的是用户增长，具体手段是营销活动页。</p><p>所以，游戏载体是营销活动页，则游戏的业务与体积都必须轻量、小型，便于用户接受、传播。</p><p>另外，微信小游戏在传播方面有其天然的巨大优势，在这方面也要有一定的考虑。</p><h2 id="需求提取"><a href="#需求提取" class="headerlink" title="需求提取"></a>需求提取</h2><p>对于游戏引擎的调研，需要从以下角度调研：</p><ul><li>文档可读性</li><li>开发出来的产品的性能、体积</li><li>其带来的工具链或解决方案是否契合我们的业务场景 – 轻量、小型的营销活动页、微信小游戏</li></ul><h2 id="目标引擎"><a href="#目标引擎" class="headerlink" title="目标引擎"></a>目标引擎</h2><h3 id="hilo"><a href="#hilo" class="headerlink" title="hilo"></a>hilo</h3><p>Hilo 作为一个跨终端的互动小游戏解决方案，同时有称综合解决方案。从它的演变来看，Hilo 属于阿里前端在实践总总结出来的一套工具库。</p><h3 id="Egret"><a href="#Egret" class="headerlink" title="Egret"></a>Egret</h3><p>Egret 不仅仅提供了一个基于 HTML5 技术的游戏引擎，更是提供了原生打包工具和众多周边产品，使其成为“解决方案”</p><h3 id="Cocos"><a href="#Cocos" class="headerlink" title="Cocos"></a>Cocos</h3><p>老牌又流行的解决方案</p><h2 id="cocos-creator"><a href="#cocos-creator" class="headerlink" title="cocos creator"></a>cocos creator</h2><img src="/2018/05/15/canvas-engine-research/cocos-creator.png" alt="cocos-creator.png" title><h2 id="Egret-Engine-2D"><a href="#Egret-Engine-2D" class="headerlink" title="Egret Engine 2D"></a>Egret Engine 2D</h2><img src="/2018/05/15/canvas-engine-research/Egret-Engine-2D.png" alt="Egret-Engine-2D.png" title><h2 id="hilo-1"><a href="#hilo-1" class="headerlink" title="hilo"></a>hilo</h2><img src="/2018/05/15/canvas-engine-research/hilo.png" alt="hilo.png" title><h2 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h2><p>满分 5 星</p><p>比较维度：</p><ul><li>文档</li><li>原型构建(开发速度)</li><li>debug</li><li>与现有开发流程、构建流程、业务体系结合</li><li>后续运营维护(迭代、事件上报、日志上报)</li></ul><h3 id="cocos-creator-1"><a href="#cocos-creator-1" class="headerlink" title="cocos creator"></a>cocos creator</h3><ul><li>文档<ol><li>较完善</li><li>有简单的实例教程</li><li>cocos js 的文档老旧，与当前版本不符</li><li>结论：3 星</li></ol></li><li>原型构建(开发速度)<ol><li>很大一部分是 UI 操作</li><li>快</li><li>结论：5 星</li></ol></li><li>debug<ol><li>报错信息完整</li><li>但要看懂报错信息的话，必须对 cocosjs 有一定了解</li><li>结论：1 星</li></ol></li><li>与现有开发流程、构建流程、业务体系结合<ol><li>当前团队模块化方案为 commonjs, 构建工具为 gulp + webpack, 与后端结合点是后端模版直出+接口调用</li><li>cocos creator 构建封闭程度较高，与现有业务结合有一定的配置工作</li><li>结论：1 星</li></ol></li><li>后续运营维护(迭代、事件上报、日志上报)<ol><li>当前的事件上报、日志上报皆有 commonjs 规范的组件，不能和 creator 无缝结合</li><li>creator 的开发为另一套流程体系，和现有体系需重新磨合，迭代有一定的磨合工作</li><li>结论：1 星</li></ol></li></ul><h3 id="Egret-Engine-2D-1"><a href="#Egret-Engine-2D-1" class="headerlink" title="Egret Engine 2D"></a>Egret Engine 2D</h3><ul><li>文档<ol><li>较完善</li><li>没有简单的实例教程，上手相对麻烦</li><li>结论：2 星</li></ol></li><li>原型构建(开发速度)<ol><li>和当前前端开发形式一致</li><li>结论：3 星</li></ol></li><li>debug<ol><li>报错信息完整</li><li>结论：3 星</li></ol></li><li>与现有开发流程、构建流程、业务体系结合<ol><li>当前团队模块化方案为 commonjs, 构建工具为 gulp + webpack, 与后端结合点是后端模版直出+接口调用</li><li>Egret Engine 2D 构建封闭程度较高，与现有业务结合有一定的配置工作</li><li>结论：1 星</li></ol></li><li>后续运营维护(迭代、事件上报、日志上报)<ol><li>当前的事件上报、日志上报皆有 commonjs 规范的组件，不能和 Egret Engine 2D 无缝结合</li><li>Egret Engine 2D 的开发为另一套流程体系，和现有体系需重新磨合，迭代有一定的磨合工作</li><li>Egret Engine 2D 基于 typescript，利于迭代维护</li><li>结论：2 星</li></ol></li></ul><h3 id="hilo-2"><a href="#hilo-2" class="headerlink" title="hilo"></a>hilo</h3><ul><li>文档<ol><li>较完善</li><li>有简单的实例教程</li><li>结论：5 星</li></ol></li><li>原型构建(开发速度)<ol><li>和当前前端开发形式一致</li><li>结论：3 星</li></ol></li><li>debug<ol><li>报错信息完整</li><li>结论：3 星</li></ol></li><li>与现有开发流程、构建流程、业务体系结合<ol><li>当前团队模块化方案为 commonjs, 构建工具为 gulp + webpack, 与后端结合点是后端模版直出+接口调用</li><li>hilo 可使用 commonjs 模块方案加载，可用 gulp + webpack 构建，与后端结合也十分方便</li><li>hilo 是针对运营活动类小游戏而产生的解决方案，和我们当前背景一致</li><li>结论：5 星</li></ol></li><li>后续运营维护(迭代、事件上报、日志上报)<ol><li>当前的事件上报、日志上报皆有 commonjs 规范的组件，可以和 hilo 无缝结合</li><li>hilo 可无缝融入当前开发体系</li><li>结论：5 星</li></ol></li></ul>]]></content>
      
      
      <categories>
          
          <category> tech </category>
          
      </categories>
      
      
        <tags>
            
            <tag> canvas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高階函数特性与装饰者模式</title>
      <link href="/2018/04/03/higher-order-function/"/>
      <url>/2018/04/03/higher-order-function/</url>
      
        <content type="html"><![CDATA[<h2 id="高階函数特性"><a href="#高階函数特性" class="headerlink" title="高階函数特性"></a>高階函数特性</h2><ul><li>函数可以作为参数被传递</li><li>函数可以作为返回值输出<a id="more"></a></li></ul><h2 id="高階函数特性使用场景"><a href="#高階函数特性使用场景" class="headerlink" title="高階函数特性使用场景"></a>高階函数特性使用场景</h2><h3 id="作为参数被传递-回调函数"><a href="#作为参数被传递-回调函数" class="headerlink" title="作为参数被传递: 回调函数"></a>作为参数被传递: 回调函数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">callBack</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">str, callback</span>) </span>&#123;</span><br><span class="line">  callback(str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test(<span class="string">"test"</span>, callBack);</span><br></pre></td></tr></table></figure><h3 id="作为返回值输出-构建闭包"><a href="#作为返回值输出-构建闭包" class="headerlink" title="作为返回值输出: 构建闭包"></a>作为返回值输出: 构建闭包</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> logPick = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> pick = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(pick);</span><br><span class="line">    pick++;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h2 id="装饰者模式介绍"><a href="#装饰者模式介绍" class="headerlink" title="装饰者模式介绍"></a>装饰者模式介绍</h2><p>装饰模式是在不必改变原类文件和使用继承的情况下，动态地扩展一个对象的功能。它是通过创建一个包装对象，也就是装饰来包裹真实的对象。</p><p>当脚本运行时，在子类中增加行为会影响原有类所有的实例，而装饰者却不然，它能给不同对象各自添加新行为。这就是装饰者模式的好处。</p><h2 id="装饰者模式使用场景"><a href="#装饰者模式使用场景" class="headerlink" title="装饰者模式使用场景"></a>装饰者模式使用场景</h2><h3 id="数据统计上报"><a href="#数据统计上报" class="headerlink" title="数据统计上报"></a>数据统计上报</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.after = <span class="function"><span class="keyword">function</span> (<span class="params">afterfn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> _self = <span class="keyword">this</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> ret = _self.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">    afterfn.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> func = <span class="function"><span class="keyword">function</span> (<span class="params">param</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(param);</span><br><span class="line">&#125;;</span><br><span class="line">func = func.after(<span class="function"><span class="keyword">function</span> (<span class="params">param</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"report: "</span> + <span class="built_in">JSON</span>.stringify(param));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="改变参数"><a href="#改变参数" class="headerlink" title="改变参数"></a>改变参数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.before = <span class="function"><span class="keyword">function</span> (<span class="params">beforefn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> _self = <span class="keyword">this</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    beforefn.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">    <span class="keyword">return</span> _self.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> func = <span class="function"><span class="keyword">function</span> (<span class="params">param</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(param);</span><br><span class="line">&#125;;</span><br><span class="line">func = func.before(<span class="function"><span class="keyword">function</span> (<span class="params">param</span>) </span>&#123;</span><br><span class="line">  param.kk = <span class="string">"kk"</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"decorator params"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> tech </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【翻译】display:content; 的工作方式</title>
      <link href="/2018/04/03/how-display-content-works/"/>
      <url>/2018/04/03/how-display-content-works/</url>
      
        <content type="html"><![CDATA[<p>正如我经常提到的那样，<a href="https://bitsofco.de/controlling-the-box-model/" target="_blank" rel="noopener">文档树中的每个元素都是一个矩形盒子(盒模型)</a>。一般来说，这个“矩形盒子”由两部分组成。首先我们有实际的盒子，它由边框，填充和边缘区域组成。其次，我们有盒子的内容-具体内容区域。</p><img src="/2018/04/03/how-display-content-works/Group-3.png" alt="Group-3.png" title><a id="more"></a><p>通过 CSS 的 display 属性，我们可以控制元素及其子元素在页面绘制时的表现。通过 display:inline，我们可以将这个盒子放在其兄弟姐妹中，就像文本一样。通过 display:table，我们可以欺骗盒子，使其表现的像 table 元素一样。</p><p>对于 display 属性，有两个值可以控制元素是否构成盒子。none 值将导致盒子与其内容不在页面上绘制。另一方面，新规则 display:contents; 会令盒子周围的框会被完全省略，但其内容会被正常绘制。</p><h2 id="当你使用-display-content-时会发生什么"><a href="#当你使用-display-content-时会发生什么" class="headerlink" title="当你使用 display:content;时会发生什么"></a>当你使用 display:content;时会发生什么</h2><p>理解 display: contents; 最简单的方法，就是想象元素的开始标签和结束标签被删除，只剩下内容。在<a href="https://www.w3.org/TR/css-display-3/#box-generation" target="_blank" rel="noopener">规范</a>中，它规定 -</p><blockquote><p>For the purposes of box generation and layout, the element must be treated as if it had been replaced in the element tree by its contents</p></blockquote><p>例如下面的标签 -</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"outer"</span>&gt;</span></span><br><span class="line">  I’m some content</span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inner"</span>&gt;</span>I’m some inner content<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>和下面的样式 -</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.outer</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">2px</span> solid lightcoral;</span><br><span class="line">  <span class="attribute">background-color</span>: lightpink;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.inner</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#ffdb3a</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通常情况下，我们期望在页面上绘制元素的方式会是这样 -</p><img src="/2018/04/03/how-display-content-works/Screen-Shot-2018-03-27-at-9.21.56-am.png" alt="Screen-Shot-2018-03-27-at-9.21.56-am.png" title><p>但是，如果我们将 display: contents 添加到.outer 元素样式中，那么它将这样显示 -</p><img src="/2018/04/03/how-display-content-works/Screen-Shot-2018-03-27-at-9.23.20-am.png" alt="Screen-Shot-2018-03-27-at-9.23.20-am.png" title><p>从视觉上而言，上述结果与我们所期望的结果完全相同–元素的开始标签和结束标签被删除的话，的确会是这个样子。</p><h2 id="其他方面的表现"><a href="#其他方面的表现" class="headerlink" title="其他方面的表现"></a>其他方面的表现</h2><p>这个 CSS 规则虽然看似简单，但有很多边界案例和特定行为需要注意。我们必须记住，display: contents; 规则仅仅会令页面在绘制元素时，不绘制它的‘框’，它不会对 html 文档中的标签有其他任何影响。</p><h3 id="对元素-attribute-的影响"><a href="#对元素-attribute-的影响" class="headerlink" title="对元素 attribute 的影响"></a>对元素 attribute 的影响</h3><p>如果元素被其内容替换，那么对于应用于它的 attribute 意味着什么？由于这个替换只是可视化层面上的替换，html 文档中，标签仍然存在，所以我们实际上仍然可以通过它的 attribute 来对元素进行选择、定位和交互。</p><p>我们仍然可以通过它的 ID 来标识元素，例如，使用 aria-labelledby 对其进行引用。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"label"</span> <span class="attr">style</span>=<span class="string">"display: contents;"</span>&gt;</span>Label here!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">aria-labelledby</span>=<span class="string">"label"</span>&gt;</span><span class="tag">&lt;<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p>但是，我发现我们无法再使用元素 id 导航到元素。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"target"</span> <span class="attr">style</span>=<span class="string">"display: contents;"</span>&gt;</span>Target Content<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="built_in">window</span>.location.hash = <span class="string">"target"</span>;</span></span><br><span class="line"><span class="actionscript">  <span class="comment">// =&gt; Nothing happens</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="对-javascript-事件的影响"><a href="#对-javascript-事件的影响" class="headerlink" title="对 javascript 事件的影响"></a>对 javascript 事件的影响</h3><p>正如我们刚刚介绍的，我们仍然可以定位使用 display: contents; 的元素。实际上，我们也可以定位使用 display: none; 的元素，但绑定在上面的事件永远不会被触发，因为我们无法和元素进行交互。但是，由于使用 display: contents; 的元素仍然可见，我们可以通过元素内容与其进行交互。</p><p>例如，我们对一个元素设置点击事件，并打印 this 值。我们仍然可以获取.outer 元素，因为它的标签仍然存在于文档中。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"outer"</span>&gt;</span>I’m some content<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="built_in">document</span>.querySelector(<span class="string">".outer"</span>).addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span></span><br><span class="line"><span class="handlebars"><span class="xml">    // =&gt; <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"outer"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line">  &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="对伪元素的影响"><a href="#对伪元素的影响" class="headerlink" title="对伪元素的影响"></a>对伪元素的影响</h3><p>使用 display: content; 的元素的伪元素被认为是其子元素的一部分，因此显示为正常。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.outer</span> &#123;</span></span><br><span class="line">    display: contents;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="css">  <span class="selector-class">.outer</span><span class="selector-pseudo">::before</span> &#123;</span></span><br><span class="line">    content: "Before";</span><br><span class="line">  &#125;</span><br><span class="line"><span class="css">  <span class="selector-class">.outer</span><span class="selector-pseudo">::after</span> &#123;</span></span><br><span class="line">    content: "After";</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"outer"</span>&gt;</span>I’m some content<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上面的 style 标签会产生下面的样式 -</p><img src="/2018/04/03/how-display-content-works/Screen-Shot-2018-03-27-at-9.44.20-am.png" alt="Screen-Shot-2018-03-27-at-9.44.20-am.png" title><h3 id="对-from-元素、img-元素以及其他替换元素的影响"><a href="#对-from-元素、img-元素以及其他替换元素的影响" class="headerlink" title="对 from 元素、img 元素以及其他替换元素的影响"></a>对 from 元素、img 元素以及其他替换元素的影响</h3><blockquote><p>对于替换元素，请看这里: <a href="https://blog.csdn.net/ruoyiqing/article/details/39011487" target="_blank" rel="noopener">替换元素（replaced element）与非替换元素(non-replaced element)</a></p></blockquote><p>当替换元素与 from 元素使用 display: contents; 时，他们会有不同的表现。</p><h4 id="替换元素"><a href="#替换元素" class="headerlink" title="替换元素"></a>替换元素</h4><p>替换元素，比如 img 元素，其外观与盒模型由外部资源控制。试图删除这样的元素框并没有什么意义，因为程序不清楚此元素的盒模型是什么（此句的原文: Attempting to remove the box for elements like this doesn’t really make sense because it isn’t entirely clear what the “box” is.）。对于这些元素，display: contents 的功能与 display: none 完全相同。元素的整个框和内容都没有绘制在页面上。</p><h4 id="表单元素"><a href="#表单元素" class="headerlink" title="表单元素"></a>表单元素</h4><p>从我们网页作者的角度来看，很多表单元素并不是由一个个“盒子”组成。但在背后，它们由一些较小的元件组成。与被替换的元素类似，删除这些元素的框没有意义，因为他们没有构成盒模型。因此，对于 select，input 和 textarea 等表单元素，display: contents 的功能与 display: none 完全相同。</p><blockquote><p><a href="https://www.w3.org/TR/css-display-3/#unbox-html" target="_blank" rel="noopener">full list of elements that display: contents works differenly fo</a></p></blockquote><h3 id="对于按钮-button-和链接-link-的影响"><a href="#对于按钮-button-和链接-link-的影响" class="headerlink" title="对于按钮(button)和链接(link)的影响"></a>对于按钮(button)和链接(link)的影响</h3><p>当涉及到 display: contents 时，button 和 a 元素似乎都没有任何特殊的行为。然而，了解这条规则如何影响它们是有用的，因为这些影响可能不会立刻表现出来。</p><h4 id="按钮"><a href="#按钮" class="headerlink" title="按钮"></a>按钮</h4><p>按钮不是由其他框组成的表单元素之一。因此，display: contents; 将只删除按钮周围的框，而让按钮的内容正常显示。如果在表单中使用，单击按钮仍然会尝试提交表单，正如我们已经介绍的那样，按钮上的任何事件侦听都将正常运行。</p><h4 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h4><p>对于链接，也是相同的情况。视觉层面上，元素周围的框会被删除，链接的内容会被保留。由于 attribute 通常不受此 CSS 规则的影响，因此该链接仍然可以正常运行，并可用于正常导航。</p><h2 id="display-contents-有何用处？"><a href="#display-contents-有何用处？" class="headerlink" title="display: contents; 有何用处？"></a>display: contents; 有何用处？</h2><p>在过去，我们必须以语义化和 CSS 样式化的方式来设计 HTML。这导致我们要么包装了太多的元素，要么元素太少以至于需要启用兄弟元素选择器。那些需要使用兄弟元素选择器的情况，是引入 CSS Grid Layout 的重要原因。</p><p>举个例子，我们来看这个布局 -</p><img src="/2018/04/03/how-display-content-works/Screen-Shot-2018-03-27-at-10.27.27-am.png" alt="Screen-Shot-2018-03-27-at-10.27.27-am.png" title><p>我们有两张彼此相邻的“卡片”，每张都有一个标题，一个段落和一个页脚。我们想要的是每张卡内的每个部分都是相同的高度，而不管每个部分的内容如何（例如，第一张卡片的标题只有 1 行，而第二张卡片的标题有 3 行，但是第一张卡片的标题部分高度应该与第二张卡片相匹配）。</p><p>我们可以使用 CSS Grid 来实现这种布局，但是我们需要每个“卡片”中的所有元素成为彼此的兄弟元素。所以，我们可能需要像这样布局我们的 HTML -</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"grid"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>This is a heading<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Footer stuff<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>This is a really really really super duper loooong heading<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Footer stuff<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们可以应用以下样式 -</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.grid</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-auto-flow</span>: column;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: auto <span class="number">1</span>fr auto;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(<span class="number">2</span>, <span class="number">1</span>fr);</span><br><span class="line">  <span class="attribute">grid-column-gap</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>虽然这不是一个错误的构建文档方式，但通过 article 元素将每个元素分组可能更有意义。这时候就需要 display:contents; 出场了。我们有了两全的方案 - 通过有意义的语义化方式去组织元素，同时 CSS 也以合理的方式去完成布局。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"grid"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">article</span> <span class="attr">style</span>=<span class="string">"display: contents;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>This is a heading<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Footer stuff<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">article</span> <span class="attr">style</span>=<span class="string">"display: contents;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>This is a really really really super duper loooong heading<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Footer stuff<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用与上面相同的 CSS，我们可以实现我们想要的布局。</p><h2 id="浏览器兼容状况"><a href="#浏览器兼容状况" class="headerlink" title="浏览器兼容状况"></a>浏览器兼容状况</h2><p>在撰写本文时，display:contents; 仅在两个主流浏览器中得到支持，其他支持很快就会到来。</p><img src="/2018/04/03/how-display-content-works/caniuse.png" alt="caniuse.png" title><blockquote><p>2018 年 03 月 27 日浏览器兼容状况</p></blockquote><p>因此，此功能目前仍应被视为渐进式增强功能，并应有适当的降级处理。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">article &#123; display: grid; grid-template-rows: 200px 1fr auto; /* e.g. Use a fixed</span><br><span class="line">height for the header */ &#125; @supports (display: contents) &#123; article &#123; display:</span><br><span class="line">contents; &#125; &#125;</span><br></pre></td></tr></table></figure><hr><p>原文: <a href="https://bitsofco.de/how-display-contents-works/" target="_blank" rel="noopener">How display: contents; Works</a></p><p>作者: <a href="https://ireaderinokun.com/" target="_blank" rel="noopener">Ire Aderinokun</a></p><p>译者: evanyan</p>]]></content>
      
      
      <categories>
          
          <category> tech </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
            <tag> html </tag>
            
            <tag> 翻译 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据绑定方案收集</title>
      <link href="/2018/03/12/data-binding/"/>
      <url>/2018/03/12/data-binding/</url>
      
        <content type="html"><![CDATA[<h2 id="封装属性访问器"><a href="#封装属性访问器" class="headerlink" title="封装属性访问器"></a>封装属性访问器</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Object.defineProperty(obj, prop, descriptor)</span></span><br><span class="line"><span class="comment">//obj ，待修改的对象</span></span><br><span class="line"><span class="comment">//prop ，带修改的属性名称</span></span><br><span class="line"><span class="comment">//descriptor ，待修改属性的相关描述</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj, <span class="string">"a"</span>, &#123;</span><br><span class="line">  <span class="keyword">set</span>: function (newVal) &#123;</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">"a"</span>).value = newVal;</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">"b"</span>).innerHTML = newVal;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">"keyup"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">  obj.a = e.target.value;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><a id="more"></a><blockquote><p>对象里目前存在的属性描述符有两种主要形式：数据描述符和存取描述符。数据描述符是一个具有值的属性，该值可能是可写的，也可能不是可写的。存取描述符是由 getter-setter 函数对描述的属性。描述符必须是这两种形式之一；不能同时是两者。</p></blockquote><h3 id="数据描述符和存取描述符均具有以下可选键值："><a href="#数据描述符和存取描述符均具有以下可选键值：" class="headerlink" title="数据描述符和存取描述符均具有以下可选键值："></a>数据描述符和存取描述符均具有以下可选键值：</h3><ul><li>configurable</li></ul><p>当且仅当该属性的 configurable 为 true 时，该属性描述符才能够被改变，同时该属性也能从对应的对象上被删除。默认为 false。</p><ul><li>enumerable</li></ul><p>当且仅当该属性的 enumerable 为 true 时，该属性才能够出现在对象的枚举属性中。默认为 false。</p><h3 id="数据描述符同时具有以下可选键值："><a href="#数据描述符同时具有以下可选键值：" class="headerlink" title="数据描述符同时具有以下可选键值："></a>数据描述符同时具有以下可选键值：</h3><ul><li>value</li></ul><p>该属性对应的值。可以是任何有效的 JavaScript 值（数值，对象，函数等）。默认为 undefined。</p><ul><li>writable</li></ul><p>当且仅当该属性的 writable 为 true 时，value 才能被赋值运算符改变。默认为 false。</p><h3 id="存取描述符同时具有以下可选键值："><a href="#存取描述符同时具有以下可选键值：" class="headerlink" title="存取描述符同时具有以下可选键值："></a>存取描述符同时具有以下可选键值：</h3><ul><li>get</li></ul><p>一个给属性提供 getter 的方法，如果没有 getter 则为 undefined。该方法返回值被用作属性值。默认为 undefined。</p><ul><li>set</li></ul><p>一个给属性提供 setter 的方法，如果没有 setter 则为 undefined。该方法将接受唯一参数，并将该参数的新值分配给该属性。默认为 undefined。</p><blockquote><p>如果一个描述符不具有 value,writable,get 和 set 任意一个关键字，那么它将被认为是一个数据描述符。如果一个描述符同时有(value 或 writable)和(get 或 set)关键字，将会产生一个异常。</p></blockquote><h2 id="angular-1-x-的数据绑定原理"><a href="#angular-1-x-的数据绑定原理" class="headerlink" title="angular 1.x 的数据绑定原理"></a>angular 1.x 的数据绑定原理</h2><p>在未引入 angluar1.x 的情况下，要实现 angular1.x 的数据绑定设计，大概会是下面这样：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=<span class="string">"utf-8"</span> /&gt;</span><br><span class="line">        &lt;title&gt;two-way binding&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>head&gt;</span><br><span class="line">    &lt;body onload=<span class="string">"init()"</span>&gt;</span><br><span class="line">        &lt;button ng-click=<span class="string">"inc"</span>&gt;</span><br><span class="line">            increase <span class="number">1</span></span><br><span class="line">        &lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">        &lt;button ng-click="inc2"&gt;</span></span><br><span class="line"><span class="regexp">            increase 2</span></span><br><span class="line"><span class="regexp">        &lt;/</span>button&gt;</span><br><span class="line">        &lt;span style=<span class="string">"color:red"</span> ng-bind=<span class="string">"counter"</span>&gt;&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">        &lt;span style="color:blue" ng-bind="counter"&gt;&lt;/</span>span&gt;</span><br><span class="line">        &lt;span style=<span class="string">"color:green"</span> ng-bind=<span class="string">"counter"</span>&gt;&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">        &lt;script type="text/</span>javascript<span class="string">"&gt;</span></span><br><span class="line"><span class="string">            /* 数据模型区开始 */</span></span><br><span class="line"><span class="string">            var counter = 0;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            function inc() &#123;</span></span><br><span class="line"><span class="string">                counter++;</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            function inc2() &#123;</span></span><br><span class="line"><span class="string">                counter+=2;</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">            /* 数据模型区结束 */</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            /* 绑定关系区开始 */</span></span><br><span class="line"><span class="string">            function init() &#123;</span></span><br><span class="line"><span class="string">                bind();</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            function bind() &#123;</span></span><br><span class="line"><span class="string">                var list = document.querySelectorAll("</span>[ng-click]<span class="string">");</span></span><br><span class="line"><span class="string">                for (var i=0; i&lt;list.length; i++) &#123;</span></span><br><span class="line"><span class="string">                    list[i].onclick = (function(index) &#123;</span></span><br><span class="line"><span class="string">                        return function() &#123;</span></span><br><span class="line"><span class="string">                            window[list[index].getAttribute("</span>ng-click<span class="string">")]();</span></span><br><span class="line"><span class="string">                            apply();</span></span><br><span class="line"><span class="string">                        &#125;;</span></span><br><span class="line"><span class="string">                    &#125;)(i);</span></span><br><span class="line"><span class="string">                &#125;</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            function apply() &#123;</span></span><br><span class="line"><span class="string">                var list = document.querySelectorAll("</span>[ng-bind=<span class="string">'counter'</span>]<span class="string">");</span></span><br><span class="line"><span class="string">                for (var i=0; i&lt;list.length; i++) &#123;</span></span><br><span class="line"><span class="string">                    list[i].innerHTML = counter;</span></span><br><span class="line"><span class="string">                &#125;</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">            /* 绑定关系区结束 */</span></span><br><span class="line"><span class="string">        &lt;/script&gt;</span></span><br><span class="line"><span class="string">    &lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure><h2 id="ECMA2015-的新特性-Proxy"><a href="#ECMA2015-的新特性-Proxy" class="headerlink" title="ECMA2015 的新特性 Proxy"></a>ECMA2015 的新特性 Proxy</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> validator = &#123;</span><br><span class="line">  <span class="keyword">set</span>: function (obj, prop, value) &#123;</span><br><span class="line">    <span class="keyword">if</span> (prop === <span class="string">"age"</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!<span class="built_in">Number</span>.isInteger(value)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">"The age is not an integer"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (value &gt; <span class="number">200</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">RangeError</span>(<span class="string">"The age seems invalid"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// The default behavior to store the value</span></span><br><span class="line">    obj[prop] = value;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Indicate success</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person = <span class="keyword">new</span> <span class="built_in">Proxy</span>(&#123;&#125;, validator);</span><br><span class="line"></span><br><span class="line">person.age = <span class="number">100</span>;</span><br><span class="line"><span class="built_in">console</span>.log(person.age); <span class="comment">// 100</span></span><br><span class="line">person.age = <span class="string">"young"</span>; <span class="comment">// Throws an exception</span></span><br><span class="line">person.age = <span class="number">300</span>; <span class="comment">// Throws an exception</span></span><br></pre></td></tr></table></figure><h2 id="几个被废弃的方案"><a href="#几个被废弃的方案" class="headerlink" title="几个被废弃的方案"></a>几个被废弃的方案</h2><h3 id="1"><a href="#1" class="headerlink" title="1"></a>1</h3><p>Object.observe(obj, callback[, acceptList]) 方法对对象（或者其属性）进行监控观察，一旦其发生变化时，将会执行相应的 handler。</p><p>现在 Object.observe 将不加入 es7 <a href="https://mail.mozilla.org/pipermail/es-discuss/2015-November/044684.html" target="_blank" rel="noopener">An update on Object.observe</a></p><h3 id="2"><a href="#2" class="headerlink" title="2"></a>2</h3><p>Object.prototype.watch(prop, handler) 方法对对象属性进行监控观察，一旦其发生变化时，将会执行相应的 handler。</p><p>此方法只在 Firefox 58 之前的 Firefox 中实现，其余浏览器及浏览器版本均不实现此方法 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/watch" target="_blank" rel="noopener">Object.prototype.watch()</a></p>]]></content>
      
      
      <categories>
          
          <category> tech </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>低成本碰撞动画实现</title>
      <link href="/2018/02/11/crashBall-by-css3/"/>
      <url>/2018/02/11/crashBall-by-css3/</url>
      
        <content type="html"><![CDATA[<img src="/2018/02/11/crashBall-by-css3/crash-ball.gif" alt="crash-ball.gif" title><a id="more"></a><h2 id="具体代码"><a href="#具体代码" class="headerlink" title="具体代码"></a>具体代码</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        html,</span><br><span class="line">        body &#123;</span><br><span class="line">            padding: <span class="number">0</span>;</span><br><span class="line">            margin: <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .horizontal &#123;</span><br><span class="line">            display: block;</span><br><span class="line">            position: absolute;</span><br><span class="line">            top: <span class="number">0</span>;</span><br><span class="line">            left: <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            -webkit-animation: horizontal <span class="number">1.4</span>s linear <span class="number">0</span>s infinite alternate;</span><br><span class="line">            -moz-animation: horizontal <span class="number">1.4</span>s linear <span class="number">0</span>s infinite alternate;</span><br><span class="line">            -o-animation: horizontal <span class="number">1.4</span>s linear <span class="number">0</span>s infinite alternate;</span><br><span class="line">            animation: horizontal <span class="number">1.4</span>s linear <span class="number">0</span>s infinite alternate;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .vertical &#123;</span><br><span class="line">            display: block;</span><br><span class="line">            position: absolute;</span><br><span class="line">            top: <span class="number">0</span>;</span><br><span class="line">            left: <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            -webkit-animation: vertical <span class="number">1.1</span>s ease-<span class="keyword">in</span> <span class="number">0</span>s infinite alternate;</span><br><span class="line">            -moz-animation: vertical <span class="number">1.1</span>s ease-<span class="keyword">in</span> <span class="number">0</span>s infinite alternate;</span><br><span class="line">            -o-animation: vertical <span class="number">1.1</span>s ease-<span class="keyword">in</span> <span class="number">0</span>s infinite alternate;</span><br><span class="line">            animation: vertical <span class="number">1.1</span>s ease-<span class="keyword">in</span> <span class="number">0</span>s infinite alternate;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .ball &#123;</span><br><span class="line">            width: <span class="number">50</span>px;</span><br><span class="line">            height: <span class="number">50</span>px;</span><br><span class="line">            border-radius: <span class="number">50</span>%;</span><br><span class="line">            background-color: red;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;<span class="regexp">/style&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=<span class="string">"horizontal"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">""</span>&gt;</span><br><span class="line">        &lt;div id=<span class="string">"vertical"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">""</span>&gt;</span><br><span class="line">            &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"ball"</span>&gt;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>div&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;script src="https:/</span><span class="regexp">/cdn.bootcss.com/</span>jquery/<span class="number">2.0</span><span class="number">.3</span>/jquery.js<span class="string">"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">    &lt;script&gt;</span></span><br><span class="line"><span class="string">        $ph = $("</span>body<span class="string">").height();</span></span><br><span class="line"><span class="string">        $pw = $("</span>body<span class="string">").width();</span></span><br><span class="line"><span class="string">        $ballR = $("</span>.ball<span class="string">").width();</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        $("</span>&lt;style&gt;&lt;<span class="regexp">/style&gt;").text(</span></span><br><span class="line"><span class="regexp">            "@-webkit-keyframes horizontal &#123;0% &#123;transform: translate(0, 0);&#125;100% &#123;transform: translate(" + ($pw -</span></span><br><span class="line"><span class="regexp">                $ballR) + "px, 0);&#125;&#125;" +</span></span><br><span class="line"><span class="regexp">            "@keyframes horizontal &#123;0% &#123; transform: translate(0, 0);&#125;100% &#123;transform: translate(" + ($pw - $ballR) +</span></span><br><span class="line"><span class="regexp">            "px, 0);&#125;&#125;" +</span></span><br><span class="line"><span class="regexp">            "@-webkit-keyframes vertical &#123;0% &#123;transform: translate(0, 0);&#125;100% &#123;transform: translate(0, " + ($ph -</span></span><br><span class="line"><span class="regexp">                $ballR) + "px);&#125;&#125;" +</span></span><br><span class="line"><span class="regexp">            "@keyframes vertical &#123;0% &#123; transform: translate(0, 0);&#125;100% &#123;transform: translate(0, " + ($ph - $ballR) +</span></span><br><span class="line"><span class="regexp">            "px);&#125;&#125;"</span></span><br><span class="line"><span class="regexp">        ).appendTo($("head"));</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">        $('#horizontal').addClass('horizontal');</span></span><br><span class="line"><span class="regexp">        $('#vertical').addClass('vertical');</span></span><br><span class="line"><span class="regexp">    &lt;/</span>script&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;/</span>html&gt;</span><br></pre></td></tr></table></figure><h2 id="动画解析"><a href="#动画解析" class="headerlink" title="动画解析"></a>动画解析</h2><p>先看 html 结构：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"horizontal"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">""</span>&gt;</span><br><span class="line">  &lt;div id=<span class="string">"vertical"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">""</span>&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"ball"</span>&gt;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure><p>然后看两个动画：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">@-webkit-keyframes horizontal &#123;</span><br><span class="line">    <span class="number">0</span>% &#123;</span><br><span class="line">        transform: translate(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="number">100</span>% &#123;</span><br><span class="line">        transform: translate(<span class="number">290</span>px, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@keyframes horizontal &#123;</span><br><span class="line">    <span class="number">0</span>% &#123;</span><br><span class="line">        transform: translate(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="number">100</span>% &#123;</span><br><span class="line">        transform: translate(<span class="number">290</span>px);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@-webkit-keyframes vertical &#123;</span><br><span class="line">    <span class="number">0</span>% &#123;</span><br><span class="line">        transform: translate(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="number">100</span>% &#123;</span><br><span class="line">        transform: translate(<span class="number">0</span>, <span class="number">630</span>px);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@keyframes vertical &#123;</span><br><span class="line">    <span class="number">0</span>% &#123;</span><br><span class="line">        transform: translate(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="number">100</span>% &#123;</span><br><span class="line">        transform: translate(<span class="number">0</span>, <span class="number">630</span>px);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>显然，包裹 div.ball 的两个元素，div#horizontal 负责 x 轴平移，div#vertical 负责 y 轴平移，x 轴、y 轴两种平移混合，就实现各种斜移。</p><p>接下来是动画属性设置：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">.horizontal &#123;</span><br><span class="line">    display: block;</span><br><span class="line">    position: absolute;</span><br><span class="line">    top: <span class="number">0</span>;</span><br><span class="line">    left: <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    -webkit-animation: horizontal <span class="number">1.4</span>s linear <span class="number">0</span>s infinite alternate;</span><br><span class="line">    -moz-animation: horizontal <span class="number">1.4</span>s linear <span class="number">0</span>s infinite alternate;</span><br><span class="line">    -o-animation: horizontal <span class="number">1.4</span>s linear <span class="number">0</span>s infinite alternate;</span><br><span class="line">    animation: horizontal <span class="number">1.4</span>s linear <span class="number">0</span>s infinite alternate;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.vertical &#123;</span><br><span class="line">    display: block;</span><br><span class="line">    position: absolute;</span><br><span class="line">    top: <span class="number">0</span>;</span><br><span class="line">    left: <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    -webkit-animation: vertical <span class="number">1.1</span>s ease-<span class="keyword">in</span> <span class="number">0</span>s infinite alternate;</span><br><span class="line">    -moz-animation: vertical <span class="number">1.1</span>s ease-<span class="keyword">in</span> <span class="number">0</span>s infinite alternate;</span><br><span class="line">    -o-animation: vertical <span class="number">1.1</span>s ease-<span class="keyword">in</span> <span class="number">0</span>s infinite alternate;</span><br><span class="line">    animation: vertical <span class="number">1.1</span>s ease-<span class="keyword">in</span> <span class="number">0</span>s infinite alternate;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于碰撞运动而言，在 y 轴上，始终有重力的影响。</p><p>所以，y 轴动画 animation-timing-function 属性被设置为 ease-in，从开始到结束逐渐加速(从高处到低处逐渐加速)；然后，animation-direction 设置为 alternate，则动画正向播完后，会反向播出，则反向播出时，结束到开始回事逐渐减速(从低处到高处逐渐减速)；最后，animation-iteration-count 设置为 infinite，动画会无限循环。</p><p>至于 x 轴，其不受其他力的影响，所以在 x 轴方向上，速度不变，所以 animation-timing-function 属性被设置为 linear，从开始到结束速度不变。其余属性，与 y 轴一样。</p><p>另外，x 轴和 y 轴的具体移动距离，这个由 javascript 计算得出:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">$ph = $(<span class="string">"body"</span>).height();</span><br><span class="line">$pw = $(<span class="string">"body"</span>).width();</span><br><span class="line">$ballR = $(<span class="string">".ball"</span>).width();</span><br><span class="line"></span><br><span class="line">$(<span class="string">"&lt;style&gt;&lt;/style&gt;"</span>)</span><br><span class="line">  .text(</span><br><span class="line">    <span class="string">"@-webkit-keyframes horizontal &#123;0% &#123;transform: translate(0, 0);&#125;100% &#123;transform: translate("</span> +</span><br><span class="line">      ($pw - $ballR) +</span><br><span class="line">      <span class="string">"px, 0);&#125;&#125;"</span> +</span><br><span class="line">      <span class="string">"@keyframes horizontal &#123;0% &#123; transform: translate(0, 0);&#125;100% &#123;transform: translate("</span> +</span><br><span class="line">      ($pw - $ballR) +</span><br><span class="line">      <span class="string">"px, 0);&#125;&#125;"</span> +</span><br><span class="line">      <span class="string">"@-webkit-keyframes vertical &#123;0% &#123;transform: translate(0, 0);&#125;100% &#123;transform: translate(0, "</span> +</span><br><span class="line">      ($ph - $ballR) +</span><br><span class="line">      <span class="string">"px);&#125;&#125;"</span> +</span><br><span class="line">      <span class="string">"@keyframes vertical &#123;0% &#123; transform: translate(0, 0);&#125;100% &#123;transform: translate(0, "</span> +</span><br><span class="line">      ($ph - $ballR) +</span><br><span class="line">      <span class="string">"px);&#125;&#125;"</span></span><br><span class="line">  )</span><br><span class="line">  .appendTo($(<span class="string">"head"</span>));</span><br></pre></td></tr></table></figure><p>至此，低成本碰撞动画简述完毕。</p>]]></content>
      
      
      <categories>
          
          <category> tech </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>对&quot;数据变化-&gt;UI变化&quot;间的逻辑进行解耦(2)--发布/订阅模式介绍与简略使用</title>
      <link href="/2018/02/09/publisher-subscriber-pattern/"/>
      <url>/2018/02/09/publisher-subscriber-pattern/</url>
      
        <content type="html"><![CDATA[<p>“数据变化-&gt;UI 变化”间的逻辑解耦已经完成，显而易见，在 web 前端层面，被观察者通常是数据模型，观察者通常是 web ui 组件。</p><p>在交互丰富的页面中（比如各种推广活动页），通常会有多个被观察者（每个 ajax 请求都对应一个被观察者），对应多个观察者（页面 ui 组件）。</p><p>随着数据模型复杂度的提高，这种多对多的关系整理起来会越来越复杂（被观察者会被多个观察者观察，观察者自然也有可能观察多个被观察者），所以，我们需要对此进行解决。</p><a id="more"></a><h2 id="发布-订阅模式介绍"><a href="#发布-订阅模式介绍" class="headerlink" title="发布/订阅模式介绍"></a>发布/订阅模式介绍</h2><p>发布/订阅模式是观察者模式的变体。</p><p>在观察者模式中，观察者需要到被观察中进行注册。</p><p>在发布/订阅模式中，订阅者（观察者）不需要到发布者（被观察者）中注册，他们之间存在一个一个主题/事件频道。代码可以在频道中定义各种事件，发布者可以通过事件广播参数，订阅者可以通过事件接收参数。</p><h2 id="发布-订阅模式实现原理"><a href="#发布-订阅模式实现原理" class="headerlink" title="发布/订阅模式实现原理"></a>发布/订阅模式实现原理</h2><p>我们可以通过一个实例来了解发布/订阅模式的运行原理。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Publisher</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.topics = &#123;&#125;;</span><br><span class="line">  <span class="keyword">this</span>.subUid = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Publisher.prototype.publish = <span class="function"><span class="keyword">function</span> (<span class="params">topic, args</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="keyword">this</span>.topics[topic]) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> subscribers = <span class="keyword">this</span>.topics[topic],</span><br><span class="line">    len = subscribers ? subscribers.length : <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (len--) &#123;</span><br><span class="line">    subscribers[len].func(topic, args);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Publisher.prototype.subscribe = <span class="function"><span class="keyword">function</span> (<span class="params">topic, func</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="keyword">this</span>.topics[topic]) &#123;</span><br><span class="line">    <span class="keyword">this</span>.topics[topic] = [];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> token = (++<span class="keyword">this</span>.subUid).toString();</span><br><span class="line">  <span class="keyword">this</span>.topics[topic].push(&#123;</span><br><span class="line">    token: token,</span><br><span class="line">    func: func,</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> token;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Publisher.prototype.unsubscribe = <span class="function"><span class="keyword">function</span> (<span class="params">token</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> m <span class="keyword">in</span> <span class="keyword">this</span>.topics) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.topics[m]) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, j = <span class="keyword">this</span>.topics[m].length; i &lt; j; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.topics[m][i].token === token) &#123;</span><br><span class="line">          <span class="keyword">this</span>.topics[m].splice(i, <span class="number">1</span>);</span><br><span class="line">          <span class="keyword">return</span> token;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Subscriber = <span class="function"><span class="keyword">function</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Subscriber.prototype.log = <span class="function"><span class="keyword">function</span> (<span class="params">topic, message</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(</span><br><span class="line">    <span class="string">"I am "</span> +</span><br><span class="line">      <span class="keyword">this</span>.name +</span><br><span class="line">      <span class="string">", I receive message from "</span> +</span><br><span class="line">      topic +</span><br><span class="line">      <span class="string">", the message is: "</span> +</span><br><span class="line">      message</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> publisher = <span class="keyword">new</span> Publisher();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> subscriber1 = <span class="keyword">new</span> Subscriber(<span class="string">"subscriber1"</span>);</span><br><span class="line"><span class="keyword">var</span> subscriber2 = <span class="keyword">new</span> Subscriber(<span class="string">"subscriber2"</span>);</span><br><span class="line"><span class="keyword">var</span> subscriber3 = <span class="keyword">new</span> Subscriber(<span class="string">"subscriber3"</span>);</span><br><span class="line"><span class="keyword">var</span> subscriber4 = <span class="keyword">new</span> Subscriber(<span class="string">"subscriber4"</span>);</span><br><span class="line"><span class="keyword">var</span> subscriber5 = <span class="keyword">new</span> Subscriber(<span class="string">"subscriber5"</span>);</span><br><span class="line"></span><br><span class="line">publisher.subscribe(<span class="string">"channer1"</span>, subscriber1.log.bind(subscriber1));</span><br><span class="line">publisher.subscribe(<span class="string">"channer2"</span>, subscriber2.log.bind(subscriber2));</span><br><span class="line">publisher.subscribe(<span class="string">"channer3"</span>, subscriber3.log.bind(subscriber3));</span><br><span class="line">publisher.subscribe(<span class="string">"channer1"</span>, subscriber4.log.bind(subscriber4));</span><br><span class="line">publisher.subscribe(<span class="string">"channer1"</span>, subscriber5.log.bind(subscriber5));</span><br><span class="line"></span><br><span class="line">publisher.publish(<span class="string">"channer1"</span>, <span class="string">"channer1 is big"</span>);</span><br><span class="line">publisher.publish(<span class="string">"channer2"</span>, <span class="string">"channer2 is not big"</span>);</span><br><span class="line">publisher.publish(<span class="string">"channer3"</span>, <span class="string">"channer3 is small"</span>);</span><br></pre></td></tr></table></figure><p>发布/订阅模式使用方式简述完毕。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://book.douban.com/subject/26382780/" target="_blank" rel="noopener">《JavaScript 设计模式与开发实践》</a></p><p><a href="https://addyosmani.com/resources/essentialjsdesignpatterns/book/" target="_blank" rel="noopener">Learning JavaScript Design Patterns</a><br><a href="http://www.oschina.net/translate/learning-javascript-design-patterns#introduction" target="_blank" rel="noopener">Learning JavaScript Design Patterns 中文版</a></p>]]></content>
      
      
      <categories>
          
          <category> tech </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>对&quot;数据变化-&gt;UI变化&quot;间的逻辑进行解耦(1)--观察者模式介绍与简略使用</title>
      <link href="/2018/02/07/observer-pattern/"/>
      <url>/2018/02/07/observer-pattern/</url>
      
        <content type="html"><![CDATA[<p>用户与页面的交互会导致数据状态发生变化，数据状态变化，又需要通过 UI 表现出来。随着页面复杂度的提高，数据变化后要通知的 UI 组件也会变得越来越多。如果不对这一步进行解耦，这部分的代码会变得越来越冗余和复杂，对代码的可读性和可测试性都带来不良的影响。</p><p>所以，我们需要对【数据变化】 -&gt; 【UI 变化】这部分的逻辑进行解耦</p><a id="more"></a><h2 id="观察者模式介绍"><a href="#观察者模式介绍" class="headerlink" title="观察者模式介绍"></a>观察者模式介绍</h2><p>观察者模式（Observer pattern）是一种管理对象及其行为和状态之间的关系的得力工具。</p><p>用 JavaScript 的话来说，这种模式的实质就是对可以对程序中的某个对象的状态进行观察，并且在其发生改变时能够得到通知。</p><p>所以，这个模式可以解决我们现在面对的问题：”对【数据变化】 -&gt; 【UI 变化】这部分的逻辑进行解耦”</p><p>观察者模式中存在两个角色：观察者和被观察者(又名订阅者和发布者)。下面是观察者模式的实现原理。</p><h2 id="观察者模式实现原理"><a href="#观察者模式实现原理" class="headerlink" title="观察者模式实现原理"></a>观察者模式实现原理</h2><p>可以通过一个实例来了解观察者模式的运行原理。</p><p>首先，建立一个描述观察者的类。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Observer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.Update = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后，建立一个描述观察者队列的类。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ObserverList</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.observerList = [];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ObserverList.prototype.Add = <span class="function"><span class="keyword">function</span> (<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.observerList.push(obj);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">ObserverList.prototype.Empty = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.observerList = [];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">ObserverList.prototype.Count = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.observerList.length;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">ObserverList.prototype.Get = <span class="function"><span class="keyword">function</span> (<span class="params">index</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (index &gt; <span class="number">-1</span> &amp;&amp; index &lt; <span class="keyword">this</span>.observerList.length) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.observerList[index];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">ObserverList.prototype.Insert = <span class="function"><span class="keyword">function</span> (<span class="params">obj, index</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> pointer = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (index === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.observerList.unshift(obj);</span><br><span class="line">    pointer = index;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (index === <span class="keyword">this</span>.observerList.length) &#123;</span><br><span class="line">    <span class="keyword">this</span>.observerList.push(obj);</span><br><span class="line">    pointer = index;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> pointer;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">ObserverList.prototype.IndexOf = <span class="function"><span class="keyword">function</span> (<span class="params">obj, startIndex</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> i = startIndex,</span><br><span class="line">    pointer = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (i &lt; <span class="keyword">this</span>.observerList.length) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.observerList[i] === obj) &#123;</span><br><span class="line">      pointer = i;</span><br><span class="line">    &#125;</span><br><span class="line">    i++;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> pointer;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">ObserverList.prototype.RemoveAt = <span class="function"><span class="keyword">function</span> (<span class="params">index</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (index === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.observerList.shift();</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (index === <span class="keyword">this</span>.observerList.length - <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.observerList.pop();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Extend an object with an extension</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">extend</span>(<span class="params">extension, obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> extension) &#123;</span><br><span class="line">    obj[key] = extension[key];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着，建立一个描述被观察者的类。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Subject</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.observers = <span class="keyword">new</span> ObserverList();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Subject.prototype.AddObserver = <span class="function"><span class="keyword">function</span> (<span class="params">observer</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.observers.Add(observer);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Subject.prototype.RemoveObserver = <span class="function"><span class="keyword">function</span> (<span class="params">observer</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.observers.RemoveAt(<span class="keyword">this</span>.observers.IndexOf(observer, <span class="number">0</span>));</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Subject.prototype.Notify = <span class="function"><span class="keyword">function</span> (<span class="params">context</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> observerCount = <span class="keyword">this</span>.observers.Count();</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; observerCount; i++) &#123;</span><br><span class="line">    <span class="keyword">this</span>.observers.Get(i).Update(context);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>注意这里 Subject 类的 Notify 方法。在观察者模式中，观察者可以观察到被观察者，原因就是：被观察者把观察者的引用存储起来，被观察者可以进行”通告”，对所有观察者进行调用(发送信息)。</p></blockquote><p>下面是一个具体的实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;&lt;<span class="regexp">/head&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;body&gt;</span></span><br><span class="line"><span class="regexp">    &lt;button id="addNewObserver"&gt;Add New Observer checkbox&lt;/</span>button&gt;</span><br><span class="line">    &lt;input id=<span class="string">"mainCheckbox"</span> type=<span class="string">"checkbox"</span> /&gt;</span><br><span class="line">    &lt;div id=<span class="string">"observersContainer"</span>&gt;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;script src="./</span>observer-pattern.js<span class="string">"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">    &lt;script&gt;</span></span><br><span class="line"><span class="string">        // 我们DOM 元素的引用</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        var controlCheckbox = document.getElementById("</span>mainCheckbox<span class="string">"),</span></span><br><span class="line"><span class="string">            addBtn = document.getElementById("</span>addNewObserver<span class="string">"),</span></span><br><span class="line"><span class="string">            container = document.getElementById("</span>observersContainer<span class="string">");</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        // 具体的被观察者</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        //Subject 类扩展controlCheckbox 类</span></span><br><span class="line"><span class="string">        extend(new Subject(), controlCheckbox);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        //点击checkbox 将会触发对观察者的通知</span></span><br><span class="line"><span class="string">        controlCheckbox["</span>onclick<span class="string">"] = new Function("</span>controlCheckbox.Notify(controlCheckbox.checked)<span class="string">");</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        addBtn["</span>onclick<span class="string">"] = AddNewObserver;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        // 具体的观察者</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        function AddNewObserver() &#123;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            //建立一个新的用于增加的checkbox</span></span><br><span class="line"><span class="string">            var check = document.createElement("</span>input<span class="string">");</span></span><br><span class="line"><span class="string">            check.type = "</span>checkbox<span class="string">";</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            // 使用Observer 类扩展checkbox</span></span><br><span class="line"><span class="string">            extend(new Observer(), check);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            // 使用定制的Update函数重载</span></span><br><span class="line"><span class="string">            check.Update = function (value) &#123;</span></span><br><span class="line"><span class="string">                this.checked = value;</span></span><br><span class="line"><span class="string">            &#125;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            // 增加新的观察者到我们主要的被观察者的观察者列表中</span></span><br><span class="line"><span class="string">            controlCheckbox.AddObserver(check);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            // 将元素添加到容器的最后</span></span><br><span class="line"><span class="string">            container.appendChild(check);</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure><p>至此，观察者模式使用方式简述完毕。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://book.douban.com/subject/26382780/" target="_blank" rel="noopener">《JavaScript 设计模式与开发实践》</a></p><p><a href="https://addyosmani.com/resources/essentialjsdesignpatterns/book/" target="_blank" rel="noopener">Learning JavaScript Design Patterns</a><br><a href="http://www.oschina.net/translate/learning-javascript-design-patterns#introduction" target="_blank" rel="noopener">Learning JavaScript Design Patterns 中文版</a></p>]]></content>
      
      
      <categories>
          
          <category> tech </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端组件测试构建指引</title>
      <link href="/2017/06/06/test-guide/"/>
      <url>/2017/06/06/test-guide/</url>
      
        <content type="html"><![CDATA[<img src="/2017/06/06/test-guide/test_run.gif" alt="test_run.gif" title><a id="more"></a><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><ol><li>前端组件被业务依赖，需要保证其可靠性</li><li>前端组件需要迭代，则完整、可靠的测试用例可保证迭代安全</li><li>良好的测试可以让开发人员在开发时不再关注测试，提高工作效率</li></ol><h2 id="对业务代码的要求"><a href="#对业务代码的要求" class="headerlink" title="对业务代码的要求"></a>对业务代码的要求</h2><p>要构建良好的测试，对被测代码也有一定的要求。</p><ol><li>保持代码短小精悍，命令型代码块（do something）和查询型代码块（get something）需要分割至不同的函数</li><li>使用代码校验工具，比如 eslint</li><li>圈复杂度，又称代码分支，也就是代码中 if else 的数量，尽量少于 5，有助于提升测试覆盖率</li><li>不出现重复代码</li><li>代码需要注释</li></ol><h2 id="测试工具选型"><a href="#测试工具选型" class="headerlink" title="测试工具选型"></a>测试工具选型</h2><h3 id="测试框架选型："><a href="#测试框架选型：" class="headerlink" title="测试框架选型："></a>测试框架选型：</h3><ol><li>Qunit</li><li>jasmine</li><li>mocha</li></ol><p>前端组件的使用场景中，有大量的异步操作。上述 3 个测试框架，只有 mocha 可以很方便地进行异步测试。所以，测试框架使用 mocha。</p><h3 id="断言库选型："><a href="#断言库选型：" class="headerlink" title="断言库选型："></a>断言库选型：</h3><ol><li>better-assert，C-style TDD 断言库</li><li>should.js，BDD 风格断言库</li><li>expect.js， 追求极简的 BDD 风格断言库，基于 should.js 简化</li><li>chai， BDD/TDD 双模 ，同时支持 should / expect / assert 三种风格的断言库强大插件机制</li></ol><p>google mocha 的使用教程，断言库都是 chai，所以。。。。。。</p><h3 id="代码覆盖率工具"><a href="#代码覆盖率工具" class="headerlink" title="代码覆盖率工具"></a>代码覆盖率工具</h3><ol><li>istanbul</li><li>。。。</li></ol><p>javascript 的代码覆盖率工具中，istanbul 流行度最高。</p><h3 id="UI-测试模式选型："><a href="#UI-测试模式选型：" class="headerlink" title="UI 测试模式选型："></a>UI 测试模式选型：</h3><ol><li>casperjs+phantomjs，phantomjs 是无界面浏览器，casperjs 对 phantomjs api 进行了提高易用性的封装</li><li>Selenium 1，会起一个服务，开发人员给这个服务发布任务，服务会通过给浏览器注入 javascript 的方式驱动浏览器</li><li>webdriver，直接调用浏览器自动化的本地接口，驱动浏览器；可以直接在浏览器中运行。</li><li>Selenium 2，集成了 webdriver。UI 测试时会启动一个服务，开发人员给这个服务发布任务，服务会通过 webdriver 驱动浏览器</li><li>chrome 的 headless 模式，就是 chrome 的无界面模式，可以通过其自身暴露的 api 进行驱动，也可以通过 webdriver 驱动。</li></ol><p>chrome 的 headless 模式发布后，phantomjs 的作者已经宣布不再维护 phantomjs。第一个方案否决。<br>chrome 的 headless 模式目前才发布两个月，还没有多少实践案例，鉴于其可通过 webdriver 驱动，暂时观察之。<br>webdriver 已被 w3c 标准化，各大浏览器都已实现其标准。这种驱动浏览器的方式，使用十分广泛，实践案例很多。<br>Selenium 和 webdriver 目前是合并趋势。<br>综上，使用第四方案。对应至 node.js 平台，使用 selenium-webdriver 模块和 selenium 服务进行通信。</p><h3 id="和-selenium-服务通信的工具选型"><a href="#和-selenium-服务通信的工具选型" class="headerlink" title="和 selenium 服务通信的工具选型"></a>和 selenium 服务通信的工具选型</h3><ol><li>selenium-webdriver，社区活跃，在 npm 上看到下载量最高</li><li>webdriverIO，api 比 selenium-webdriver 友好，但配套测试工具配置起来比 selenium-webdriver 的要麻烦，npm 下载量是 selenium-webdriver 的 0.1 倍</li><li>WD.js，没用过，npm 下载量同样是 selenium-webdriver 的 0.1 倍。<br>selenium-webdriver 的下载量最高，则在搜索具体问题的解决方案时，出来的信息应该也是最多的。此处选择 selenium-webdriver。</li></ol><h2 id="测试的基本概念"><a href="#测试的基本概念" class="headerlink" title="测试的基本概念"></a>测试的基本概念</h2><p>我们可以构建一个简单的项目，在这个过程中了解测试的基本概念</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mkdir fe_tests_example</span><br><span class="line">cd fe_tests_example</span><br><span class="line">npm init</span><br><span class="line">npm install -g mocha</span><br><span class="line">npm install mocha chai --save</span><br></pre></td></tr></table></figure><p>建立文件 ./utils/add.js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">module.exports = function(a, b) &#123;</span><br><span class="line">    return a + b;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>建立文件 ./tests/add.test.js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">var expect = require(&apos;chai&apos;).expect;</span><br><span class="line"></span><br><span class="line">var add = require(&apos;../utils/add&apos;);</span><br><span class="line"></span><br><span class="line">describe(&apos;add 方法测试&apos;, function() &#123;</span><br><span class="line">    it(&apos;2+2=4&apos;, function() &#123;</span><br><span class="line">        expect(add(2, 2)).to.be.equal(4);</span><br><span class="line">    &#125;);</span><br><span class="line">    it(&apos;5+6=11&apos;, function() &#123;</span><br><span class="line">        expect(add(5, 6)).to.be.equal(11);</span><br><span class="line">    &#125;);</span><br><span class="line">    it(&apos;0+(-2)=-2&apos;, function() &#123;</span><br><span class="line">        expect(add(0, -2)).to.be.equal(-2);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>运行指令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mocha tests\*.js</span><br></pre></td></tr></table></figure><p>可以看到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">D:\work\fe_tests_example (master) (fe_tests_example@1.0.0)</span><br><span class="line">λ mocha tests\*.js</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  add 方法测试</span><br><span class="line">    √ 2+2=4</span><br><span class="line">    √ 5+6=11</span><br><span class="line">    √ 0+(-2)=-2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  3 passing (21ms)</span><br></pre></td></tr></table></figure><p>这就是一次单元测试。</p><p>其中，add.test.js 是测试脚本，一个个 it 代码块就是一个个测试用例。</p><p>接下来是在浏览器环境下进行单元测试：<br>首先</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mocha init fe_unit_tests</span><br></pre></td></tr></table></figure><p>可以看到项目下多了个 fe_unit_tests 文件夹</p><img src="/2017/06/06/test-guide/index.jpg" alt="index.jpg" title><p>建立 fe_unit_tests/add.js 文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function add(a, b) &#123;</span><br><span class="line">    return a + b;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>修改 fe_unit_tests/tests.js 文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">var expect = chai.expect;</span><br><span class="line"></span><br><span class="line">describe(&apos;add 方法测试&apos;, function() &#123;</span><br><span class="line">    it(&apos;2+2=4&apos;, function() &#123;</span><br><span class="line">        expect(add(2, 2)).to.be.equal(4);</span><br><span class="line">    &#125;);</span><br><span class="line">    it(&apos;5+6=11&apos;, function() &#123;</span><br><span class="line">        expect(add(5, 6)).to.be.equal(11);</span><br><span class="line">    &#125;);</span><br><span class="line">    it(&apos;0+(-2)=-2&apos;, function() &#123;</span><br><span class="line">        expect(add(0, -2)).to.be.equal(-2);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>修改 fe_unit_tests/index.html 文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;title&gt;Mocha&lt;/title&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;link rel=&quot;stylesheet&quot; href=&quot;mocha.css&quot; /&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;mocha&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;script src=&quot;mocha.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=&quot;http://chaijs.com/chai.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script&gt;mocha.setup(&apos;bdd&apos;);&lt;/script&gt;</span><br><span class="line">    &lt;script src=&quot;add.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=&quot;tests.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">      mocha.run();</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>这就是浏览器环境下的单元测试</p><h2 id="UI-测试"><a href="#UI-测试" class="headerlink" title="UI 测试"></a>UI 测试</h2><p>我们将继续通过实例项目来了解 UI 测试</p><p>下载最新的<a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html" target="_blank" rel="noopener">JDK</a>，安装之。<br>下载最新的<a href="http://selenium-release.storage.googleapis.com/index.html" target="_blank" rel="noopener">selenium</a>，一个 jar 包，不用安装。<br>运行 selenium 服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar selenium-server-standalone-2.45.0.jar</span><br></pre></td></tr></table></figure><p>可以看到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">λ java -jar selenium-server-standalone-3.4.0.jar</span><br><span class="line">15:15:07.198 INFO - Selenium build info: version: &apos;3.4.0&apos;, revision: &apos;unknown&apos;</span><br><span class="line">15:15:07.200 INFO - Launching a standalone Selenium Server</span><br><span class="line">2017-06-06 15:15:07.250:INFO::main: Logging initialized @549ms to org.seleniumhq.jetty9.util.log.StdErrLog</span><br><span class="line">15:15:07.345 INFO - Driver class not found: com.opera.core.systems.OperaDriver</span><br><span class="line">15:15:07.349 INFO - Driver provider com.opera.core.systems.OperaDriver registration is skipped:</span><br><span class="line">Unable to create new instances on this machine.</span><br><span class="line">15:15:07.350 INFO - Driver class not found: com.opera.core.systems.OperaDriver</span><br><span class="line">15:15:07.351 INFO - Driver provider com.opera.core.systems.OperaDriver is not registered</span><br><span class="line">15:15:07.352 INFO - Driver provider org.openqa.selenium.safari.SafariDriver registration is skipped:</span><br><span class="line"> registration capabilities Capabilities [&#123;browserName=safari, version=, platform=MAC&#125;] does not match the current platform VISTA</span><br><span class="line">2017-06-06 15:15:07.453:INFO:osjs.Server:main: jetty-9.4.3.v20170317</span><br><span class="line">2017-06-06 15:15:07.521:INFO:osjsh.ContextHandler:main: Started o.s.j.s.ServletContextHandler@28d25987&#123;/,null,AVAILABLE&#125;</span><br><span class="line">2017-06-06 15:15:07.900:INFO:osjs.AbstractConnector:main: Started ServerConnector@3f49dace&#123;HTTP/1.1,[http/1.1]&#125;&#123;0.0.0.0:4444&#125;</span><br><span class="line">2017-06-06 15:15:07.901:INFO:osjs.Server:main: Started @1200ms</span><br><span class="line">15:15:07.901 INFO - Selenium Server is up and running</span><br></pre></td></tr></table></figure><p>下载对应的浏览器驱动</p><table><thead><tr><th align="left">browser</th><th align="right">component</th></tr></thead><tbody><tr><td align="left">Chrome</td><td align="right"><a href="http://chromedriver.storage.googleapis.com/index.html" target="_blank" rel="noopener">chromedriver(.exe)</a></td></tr><tr><td align="left">Internet Explorer</td><td align="right"><a href="http://selenium-release.storage.googleapis.com/index.html" target="_blank" rel="noopener">IEDriverServer.exe</a></td></tr><tr><td align="left">Edge</td><td align="right"><a href="http://go.microsoft.com/fwlink/?LinkId=619687" target="_blank" rel="noopener">MicrosoftWebDriver.msi</a></td></tr><tr><td align="left">Firefox 47+</td><td align="right"><a href="https://github.com/mozilla/geckodriver/releases/" target="_blank" rel="noopener">geckodriver(.exe)</a></td></tr><tr><td align="left">PhantomJS</td><td align="right"><a href="http://phantomjs.org/" target="_blank" rel="noopener">phantomjs(.exe)</a></td></tr><tr><td align="left">Opera</td><td align="right"><a href="https://github.com/operasoftware/operachromiumdriver/releases" target="_blank" rel="noopener">operadriver(.exe)</a></td></tr><tr><td align="left">Safari</td><td align="right"><a href="https://developer.apple.com/library/prerelease/content/releasenotes/General/WhatsNewInSafari/Articles/Safari_10_0.html#//apple_ref/doc/uid/TP40014305-CH11-DontLinkElementID_28" target="_blank" rel="noopener">safaridriver</a></td></tr></tbody></table><p>在这里，我下载了 chrome、firefox、ie 的驱动，和刚才下好的 selenium jar 包放入同一个文件夹。</p><p>这里有需要注意的几个点：</p><ol><li>chrome 的驱动，最新的是 2.2X 那些，2.4 是很老的版本。</li><li>IE 的 webdriver 驱动 IE 失败的话，尝试下修改注册表：注册表（regedit）中，32 位系统寻找 HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Internet Explorer\Main\FeatureControl\FEATURE_BFCACHE ，64 位系统寻找 HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\Microsoft\Internet<br>Explorer\Main\FeatureControl\FEATURE_BFCACHE ，FEATURE_BFCACHE 项不一定存在，不存在就创建之。然后在这个项里面，创建一个 DWORD 值，name 为 iexplore.exe， value 为 0。</li></ol><p>ps:上面是自行安装配置使用 selenium 服务的方法。还可以通过工具包对 selenium 进行安装配置使用，具体请看<a href="http://gitlab.futunn.com/webpackage/ui-h5-dialog/blob/test/test_guide.md" target="_blank" rel="noopener">ui-h5-dialog 组件 test 分支的 test_guide.md</a></p><p>接下来，回到 fe_tests_example 项目中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install selenium-webdriver --save</span><br></pre></td></tr></table></figure><p>建立 ui_tests/test1.js 文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">var webdriver = require(&apos;selenium-webdriver&apos;),</span><br><span class="line">    By = webdriver.By,</span><br><span class="line">    until = webdriver.until,</span><br><span class="line">    test = require(&apos;selenium-webdriver/testing&apos;);</span><br><span class="line"></span><br><span class="line">test.describe(&apos;百度搜索测试1,firefox浏览器&apos;, function() &#123;</span><br><span class="line">    this.timeout(15000);</span><br><span class="line">    var driver;</span><br><span class="line"></span><br><span class="line">    test.before(function() &#123;</span><br><span class="line">        driver = new webdriver.Builder().forBrowser(&apos;firefox&apos;).usingServer(&apos;http://localhost:4444/wd/hub&apos;).build();</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    test.it(&apos;搜索node.js&apos;, function() &#123;</span><br><span class="line">        driver.get(&apos;http://www.baidu.com&apos;);</span><br><span class="line">        driver.findElement(By.name(&apos;wd&apos;)).sendKeys(&apos;node.js&apos;);</span><br><span class="line">        driver.findElement(By.id(&apos;su&apos;)).click();</span><br><span class="line">        driver.wait(until.titleIs(&apos;node.js_百度搜索&apos;), 10000);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    test.it(&apos;搜索jquery&apos;, function() &#123;</span><br><span class="line">        driver.get(&apos;http://www.baidu.com&apos;);</span><br><span class="line">        driver.findElement(By.name(&apos;wd&apos;)).sendKeys(&apos;jquery&apos;);</span><br><span class="line">        driver.findElement(By.id(&apos;su&apos;)).click();</span><br><span class="line">        driver.wait(until.titleIs(&apos;jquery_百度搜索&apos;), 10000);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    test.it(&apos;搜索angular&apos;, function() &#123;</span><br><span class="line">        driver.get(&apos;http://www.baidu.com&apos;);</span><br><span class="line">        driver.findElement(By.name(&apos;wd&apos;)).sendKeys(&apos;angular&apos;);</span><br><span class="line">        driver.findElement(By.id(&apos;su&apos;)).click();</span><br><span class="line">        driver.wait(until.titleIs(&apos;angular_百度搜索&apos;), 10000);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    test.after(function() &#123;</span><br><span class="line">        driver.quit();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>建立 ui_tests/test2.js 文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">var webdriver = require(&apos;selenium-webdriver&apos;),</span><br><span class="line">    By = webdriver.By,</span><br><span class="line">    until = webdriver.until,</span><br><span class="line">    test = require(&apos;selenium-webdriver/testing&apos;);</span><br><span class="line"></span><br><span class="line">test.describe(&apos;百度搜索测试2,chrome浏览器&apos;, function() &#123;</span><br><span class="line">    this.timeout(15000);</span><br><span class="line">    var driver;</span><br><span class="line"></span><br><span class="line">    test.before(function() &#123;</span><br><span class="line">        driver = new webdriver.Builder().forBrowser(&apos;chrome&apos;).usingServer(&apos;http://localhost:4444/wd/hub&apos;).build();</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    test.it(&apos;搜索sublime&apos;, function() &#123;</span><br><span class="line">        driver.get(&apos;http://www.baidu.com&apos;);</span><br><span class="line">        driver.findElement(By.name(&apos;wd&apos;)).sendKeys(&apos;sublime&apos;);</span><br><span class="line">        driver.findElement(By.id(&apos;su&apos;)).click();</span><br><span class="line">        driver.wait(until.titleIs(&apos;sublime_百度搜索&apos;), 10000);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    test.it(&apos;搜索webstorm&apos;, function() &#123;</span><br><span class="line">        driver.get(&apos;http://www.baidu.com&apos;);</span><br><span class="line">        driver.findElement(By.name(&apos;wd&apos;)).sendKeys(&apos;webstorm&apos;);</span><br><span class="line">        driver.findElement(By.id(&apos;su&apos;)).click();</span><br><span class="line">        driver.wait(until.titleIs(&apos;webstorm_百度搜索&apos;), 10000);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    test.it(&apos;搜索atom&apos;, function() &#123;</span><br><span class="line">        driver.get(&apos;http://www.baidu.com&apos;);</span><br><span class="line">        driver.findElement(By.name(&apos;wd&apos;)).sendKeys(&apos;atom&apos;);</span><br><span class="line">        driver.findElement(By.id(&apos;su&apos;)).click();</span><br><span class="line">        driver.wait(until.titleIs(&apos;atom_百度搜索&apos;), 10000);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    test.after(function() &#123;</span><br><span class="line">        driver.quit();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>建立 ui_tests/test3.js 文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">var webdriver = require(&apos;selenium-webdriver&apos;),</span><br><span class="line">    By = webdriver.By,</span><br><span class="line">    until = webdriver.until,</span><br><span class="line">    test = require(&apos;selenium-webdriver/testing&apos;);</span><br><span class="line"></span><br><span class="line">test.describe(&apos;百度搜索测试3,ie测试&apos;, function() &#123;</span><br><span class="line">    this.timeout(15000);</span><br><span class="line">    var driver;</span><br><span class="line"></span><br><span class="line">    test.before(function() &#123;</span><br><span class="line">        driver = new webdriver.Builder().forBrowser(&apos;internet explorer&apos;).usingServer(&apos;http://localhost:4444/wd/hub&apos;).build();</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    test.it(&apos;搜索webdriver&apos;, function() &#123;</span><br><span class="line">        driver.get(&apos;http://www.baidu.com&apos;);</span><br><span class="line">        driver.findElement(By.name(&apos;wd&apos;)).sendKeys(&apos;webdriver&apos;);</span><br><span class="line">        driver.findElement(By.id(&apos;su&apos;)).click();</span><br><span class="line">        driver.wait(until.titleIs(&apos;webdriver_百度搜索&apos;), 10000);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    test.it(&apos;搜索selenium&apos;, function() &#123;</span><br><span class="line">        driver.get(&apos;http://www.baidu.com&apos;);</span><br><span class="line">        driver.findElement(By.name(&apos;wd&apos;)).sendKeys(&apos;selenium&apos;);</span><br><span class="line">        driver.findElement(By.id(&apos;su&apos;)).click();</span><br><span class="line">        driver.wait(until.titleIs(&apos;selenium_百度搜索&apos;), 10000);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    test.it(&apos;搜索mocha&apos;, function() &#123;</span><br><span class="line">        driver.get(&apos;http://www.baidu.com&apos;);</span><br><span class="line">        driver.findElement(By.name(&apos;wd&apos;)).sendKeys(&apos;mocha&apos;);</span><br><span class="line">        driver.findElement(By.id(&apos;su&apos;)).click();</span><br><span class="line">        driver.wait(until.titleIs(&apos;mocha_百度搜索&apos;), 10000);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    test.after(function() &#123;</span><br><span class="line">        driver.quit();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>然后</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mocha .\ui_tests\*.js</span><br></pre></td></tr></table></figure><p>可以看到</p><img src="/2017/06/06/test-guide/test_run.gif" alt="test_run.gif" title><p>以上就是一次完整的 UI 测试。</p><h2 id="测试覆盖率"><a href="#测试覆盖率" class="headerlink" title="测试覆盖率"></a>测试覆盖率</h2><p>测试覆盖率是针对单元测试的指标，他有下面几个维度：</p><ol><li>行覆盖率（line coverage）：是否每一行都执行了？</li><li>函数覆盖率（function coverage）：是否每个函数都调用了？</li><li>分支覆盖率（branch coverage）：是否每个 if 代码块都执行了？</li><li>语句覆盖率（statement coverage）：是否每个语句都执行了？</li></ol><p>我们来实践一下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install istanbul --save</span><br></pre></td></tr></table></figure><p>建立 utils/ifElseTest.js 文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">module.exports = function(a) &#123;</span><br><span class="line">    if (a &lt; 10) &#123;</span><br><span class="line">        return 666;</span><br><span class="line">    &#125; else if (a &gt;= 10 &amp;&amp; a &lt; 20) &#123;</span><br><span class="line">        return 777;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        return 888;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>建立 test/ifElseTest.test.js 文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">var expect = require(&apos;chai&apos;).expect;</span><br><span class="line"></span><br><span class="line">var ifElseTest = require(&apos;../utils/ifElseTest&apos;);</span><br><span class="line"></span><br><span class="line">describe(&apos;ifElseTest 方法测试&apos;, function() &#123;</span><br><span class="line">    it(&apos;expect(ifElseTest(5)).to.be.equal(666);&apos;, function() &#123;</span><br><span class="line">        expect(ifElseTest(5)).to.be.equal(666);</span><br><span class="line">    &#125;);</span><br><span class="line">    it(&apos;expect(ifElseTest(6)).to.be.equal(666);&apos;, function() &#123;</span><br><span class="line">        expect(ifElseTest(6)).to.be.equal(666);</span><br><span class="line">    &#125;);</span><br><span class="line">    it(&apos;expect(ifElseTest(17)).to.be.equal(777);&apos;, function() &#123;</span><br><span class="line">        expect(ifElseTest(17)).to.be.equal(777);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>改写 package.json 中的 scripts 部分:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;fe_tests_example&quot;,</span><br><span class="line">  &quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class="line">  &quot;description&quot;: &quot;&quot;,</span><br><span class="line">  &quot;main&quot;: &quot;index.js&quot;,</span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;test&quot;: &quot;mocha ./test/*.js&quot;,</span><br><span class="line">    &quot;test-cov&quot;: &quot;./node_modules/.bin/istanbul cover ./node_modules/mocha/bin/_mocha ./test/*.test.js&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;repository&quot;: &#123;</span><br><span class="line">    &quot;type&quot;: &quot;git&quot;,</span><br><span class="line">    &quot;url&quot;: &quot;http://gitlab.futunn.com/evanyan/fe_tests_example.git&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;author&quot;: &quot;&quot;,</span><br><span class="line">  &quot;license&quot;: &quot;ISC&quot;,</span><br><span class="line">  &quot;dependencies&quot;: &#123;</span><br><span class="line">    &quot;chai&quot;: &quot;^4.0.2&quot;,</span><br><span class="line">    &quot;mocha&quot;: &quot;^3.4.2&quot;,</span><br><span class="line">    &quot;selenium-webdriver&quot;: &quot;^3.4.0&quot;,</span><br><span class="line">    &quot;istanbul&quot;: &quot;^0.4.5&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run test-cov</span><br></pre></td></tr></table></figure><p>可以看到：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">λ npm run test-cov</span><br><span class="line"></span><br><span class="line">&gt; fe_tests_example@1.0.0 test-cov D:\work\fe_tests_example</span><br><span class="line">&gt; istanbul cover ./node_modules/mocha/bin/_mocha ./test/*.test.js</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  add 方法测试</span><br><span class="line">    √ 2+2=4</span><br><span class="line">    √ 5+6=11</span><br><span class="line">    √ 0+(-2)=-2</span><br><span class="line"></span><br><span class="line">  ifElseTest 方法测试</span><br><span class="line">    √ expect(ifElseTest(5)).to.be.equal(666);</span><br><span class="line">    √ expect(ifElseTest(6)).to.be.equal(666);</span><br><span class="line">    √ expect(ifElseTest(17)).to.be.equal(777);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  6 passing (199ms)</span><br><span class="line"></span><br><span class="line">=============================================================================</span><br><span class="line">Writing coverage object [D:\work\fe_tests_example\coverage\coverage.json]</span><br><span class="line">Writing coverage reports at [D:\work\fe_tests_example\coverage]</span><br><span class="line">=============================================================================</span><br><span class="line"></span><br><span class="line">=============================== Coverage summary ===============================</span><br><span class="line">Statements   : 87.5% ( 7/8 )</span><br><span class="line">Branches     : 83.33% ( 5/6 )</span><br><span class="line">Functions    : 100% ( 2/2 )</span><br><span class="line">Lines        : 87.5% ( 7/8 )</span><br><span class="line">================================================================================</span><br></pre></td></tr></table></figure><p>此时项目中生成了 coverage 文件夹，打开 coverage/lcov-report/index.html，可以看到：</p><img src="/2017/06/06/test-guide/71873817.jpg" alt="71873817.jpg" title><p>可以看到，ifElseTest.js 中，其中有一个 if-else 代码块没有被测到。<br>我们改写一下 ifElseTest.test.js 文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">var expect = require(&apos;chai&apos;).expect;</span><br><span class="line"></span><br><span class="line">var ifElseTest = require(&apos;../utils/ifElseTest&apos;);</span><br><span class="line"></span><br><span class="line">describe(&apos;ifElseTest 方法测试&apos;, function() &#123;</span><br><span class="line">    it(&apos;expect(ifElseTest(5)).to.be.equal(666);&apos;, function() &#123;</span><br><span class="line">        expect(ifElseTest(5)).to.be.equal(666);</span><br><span class="line">    &#125;);</span><br><span class="line">    it(&apos;expect(ifElseTest(6)).to.be.equal(666);&apos;, function() &#123;</span><br><span class="line">        expect(ifElseTest(6)).to.be.equal(666);</span><br><span class="line">    &#125;);</span><br><span class="line">    it(&apos;expect(ifElseTest(17)).to.be.equal(777);&apos;, function() &#123;</span><br><span class="line">        expect(ifElseTest(17)).to.be.equal(777);</span><br><span class="line">    &#125;);</span><br><span class="line">    it(&apos;expect(ifElseTest(88)).to.be.equal(888);&apos;, function() &#123;</span><br><span class="line">        expect(ifElseTest(88)).to.be.equal(888);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>然后</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run test-cov</span><br></pre></td></tr></table></figure><p>可以看到：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">λ npm run test-cov</span><br><span class="line"></span><br><span class="line">&gt; fe_tests_example@1.0.0 test-cov D:\work\fe_tests_example</span><br><span class="line">&gt; istanbul cover ./node_modules/mocha/bin/_mocha ./test/*.test.js</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  add 方法测试</span><br><span class="line">    √ 2+2=4</span><br><span class="line">    √ 5+6=11</span><br><span class="line">    √ 0+(-2)=-2</span><br><span class="line"></span><br><span class="line">  ifElseTest 方法测试</span><br><span class="line">    √ expect(ifElseTest(5)).to.be.equal(666);</span><br><span class="line">    √ expect(ifElseTest(6)).to.be.equal(666);</span><br><span class="line">    √ expect(ifElseTest(17)).to.be.equal(777);</span><br><span class="line">    √ expect(ifElseTest(88)).to.be.equal(888);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  7 passing (50ms)</span><br><span class="line"></span><br><span class="line">=============================================================================</span><br><span class="line">Writing coverage object [D:\work\fe_tests_example\coverage\coverage.json]</span><br><span class="line">Writing coverage reports at [D:\work\fe_tests_example\coverage]</span><br><span class="line">=============================================================================</span><br><span class="line"></span><br><span class="line">=============================== Coverage summary ===============================</span><br><span class="line">Statements   : 100% ( 8/8 )</span><br><span class="line">Branches     : 100% ( 6/6 )</span><br><span class="line">Functions    : 100% ( 2/2 )</span><br><span class="line">Lines        : 100% ( 8/8 )</span><br><span class="line">================================================================================</span><br></pre></td></tr></table></figure><p><img src="http://oqt9zb1sq.bkt.clouddn.com/17-7-12/61203301.jpg" alt></p><p>可以看到测试覆盖率达到 100%，被测代码的每一行都被测到。</p><h2 id="具体实践的一些建议"><a href="#具体实践的一些建议" class="headerlink" title="具体实践的一些建议"></a>具体实践的一些建议</h2><ol><li>所有测试代码，都应该放在 test 文件夹中</li><li>单元测试测逻辑部分，被测代码的测试覆盖率尽量达到 100%；端对端测试测试主要流程是否能跑通，针对前端 ui 组件，还有查看组件在不同浏览器下表现的任务。所以，单元测试的测试量应该比端对端测试大很多。</li><li>单元测试只测逻辑部分代码，io 操作、dom 操作的代码不纳入单元测试范畴中。</li><li>io 操作、dom 操作的测试由端对端测试来完成。</li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://mochajs.org/" target="_blank" rel="noopener">mocha api 文档</a><br><a href="http://chaijs.com/api/bdd/" title="chai api doc" target="_blank" rel="noopener">chai api 文档</a><br><a href="http://seleniumhq.github.io/selenium/docs/api/javascript/module/selenium-webdriver/" target="_blank" rel="noopener">selenium-webdriver api 文档</a></p>]]></content>
      
      
      <categories>
          
          <category> tech </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 自动化 </tag>
            
            <tag> 测试 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
